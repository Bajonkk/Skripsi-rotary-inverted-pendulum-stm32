
skripsi_RIP_swing-stable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009248  08009248  0000a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095fc  080095fc  0000b1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095fc  080095fc  0000a5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009604  08009604  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800960c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200001f0  080097fc  0000b1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  080097fc  0000b614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e123  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe2  00000000  00000000  00019343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0001b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  0001c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734e  00000000  00000000  0001cafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef18  00000000  00000000  00033e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b53  00000000  00000000  00042d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d38b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a14  00000000  00000000  000d38f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009230 	.word	0x08009230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009230 	.word	0x08009230

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <wrap_angle_deg>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
float wrap_angle_deg(float angle_deg, float rtt) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f8e:	edc7 0a00 	vstr	s1, [r7]
    while (angle_deg > rtt) angle_deg -= 2.0f * rtt;
 8000f92:	e009      	b.n	8000fa8 <wrap_angle_deg+0x24>
 8000f94:	edd7 7a00 	vldr	s15, [r7]
 8000f98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fa8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	dcec      	bgt.n	8000f94 <wrap_angle_deg+0x10>
    while (angle_deg < (-1) * rtt) angle_deg += 2.0f * rtt;
 8000fba:	e009      	b.n	8000fd0 <wrap_angle_deg+0x4c>
 8000fbc:	edd7 7a00 	vldr	s15, [r7]
 8000fc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fd0:	edd7 7a00 	vldr	s15, [r7]
 8000fd4:	eef1 7a67 	vneg.f32	s15, s15
 8000fd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d4ea      	bmi.n	8000fbc <wrap_angle_deg+0x38>
    return angle_deg;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	ee07 3a90 	vmov	s15, r3
}
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <filter>:

float filter(float now, float* filtered_then, float alpha) {
 8000ffa:	b480      	push	{r7}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	ed87 0a03 	vstr	s0, [r7, #12]
 8001004:	60b8      	str	r0, [r7, #8]
 8001006:	edc7 0a01 	vstr	s1, [r7, #4]
    float filtered = alpha * now + (1.0f - alpha) * (*filtered_then);
 800100a:	ed97 7a01 	vldr	s14, [r7, #4]
 800100e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800101a:	edd7 7a01 	vldr	s15, [r7, #4]
 800101e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001030:	edc7 7a05 	vstr	s15, [r7, #20]
    *filtered_then = filtered;  // update the stored value
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
    return filtered;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	ee07 3a90 	vmov	s15, r3
}
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <compute_derivative>:
float compute_derivative(float now, float then, float dt){
 800104e:	b480      	push	{r7}
 8001050:	b087      	sub	sp, #28
 8001052:	af00      	add	r7, sp, #0
 8001054:	ed87 0a03 	vstr	s0, [r7, #12]
 8001058:	edc7 0a02 	vstr	s1, [r7, #8]
 800105c:	ed87 1a01 	vstr	s2, [r7, #4]
	float derivative = ((float)(now - then)) / dt;
 8001060:	ed97 7a03 	vldr	s14, [r7, #12]
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	ee77 6a67 	vsub.f32	s13, s14, s15
 800106c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001074:	edc7 7a05 	vstr	s15, [r7, #20]
	return derivative;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <compute_integral>:

float compute_integral(float now, float then, float dt, float* integral_accum) {
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a03 	vstr	s0, [r7, #12]
 8001096:	edc7 0a02 	vstr	s1, [r7, #8]
 800109a:	ed87 1a01 	vstr	s2, [r7, #4]
 800109e:	6038      	str	r0, [r7, #0]
    float avg_error = (now + then) / 2.0f;
 80010a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b4:	edc7 7a05 	vstr	s15, [r7, #20]

    // Round off tiny noise
    if (fabs(avg_error) < 0.005f) {
 80010b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010bc:	eef0 7ae7 	vabs.f32	s15, s15
 80010c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001148 <compute_integral+0xbc>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d502      	bpl.n	80010d4 <compute_integral+0x48>
        avg_error = 0.0f;
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
    }

    // Integrate only if error is significant
    if (avg_error != 0.0f) {
 80010d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d00d      	beq.n	80010fe <compute_integral+0x72>
    	*integral_accum += dt * avg_error;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	edd7 6a01 	vldr	s13, [r7, #4]
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
    }

    // Anti-windup clamp
    if (*integral_accum > 100.0f) *integral_accum = 100.0f;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800114c <compute_integral+0xc0>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	dd02      	ble.n	8001118 <compute_integral+0x8c>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <compute_integral+0xc4>)
 8001116:	601a      	str	r2, [r3, #0]
	if (*integral_accum < -100.0f) *integral_accum = -100.0f;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001154 <compute_integral+0xc8>
 8001122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d502      	bpl.n	8001132 <compute_integral+0xa6>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <compute_integral+0xcc>)
 8001130:	601a      	str	r2, [r3, #0]

	return *integral_accum;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	ee07 3a90 	vmov	s15, r3
}
 800113a:	eeb0 0a67 	vmov.f32	s0, s15
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	3ba3d70a 	.word	0x3ba3d70a
 800114c:	42c80000 	.word	0x42c80000
 8001150:	42c80000 	.word	0x42c80000
 8001154:	c2c80000 	.word	0xc2c80000
 8001158:	c2c80000 	.word	0xc2c80000

0800115c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_UART_TxCpltCallback+0x24>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d102      	bne.n	8001174 <HAL_UART_TxCpltCallback+0x18>
        tx_ready = 1; // Allow next message to be sent
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_UART_TxCpltCallback+0x28>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    }
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40011000 	.word	0x40011000
 8001184:	20000018 	.word	0x20000018

08001188 <send_uart_dma>:

void send_uart_dma() {
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b088      	sub	sp, #32
 800118e:	af08      	add	r7, sp, #32
//	sprintf(MSG, "%.4f, %.4f, %.4f, %.4f, %.4f, %d\r\n", current_error_2, current_error_1, itg_error_2, itg_error_1, 90.0, ctrl_sgn_k);
//	sprintf(MSG, "%.4f, %.4f, %.4f, %.4f, %.4f, %d\r\n", rad_angle_1, rad_angle_2, itg_error_2, itg_error_1, 90.0, cnt_trns);
	sprintf(MSG, "%.4f, %.4f, %.4f, %.4f, %d\r\n", x2, x1, fdx2, fdx1, ctrl_sgn_k);
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <send_uart_dma+0x7c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9df 	bl	8000558 <__aeabi_f2d>
 800119a:	4682      	mov	sl, r0
 800119c:	468b      	mov	fp, r1
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <send_uart_dma+0x80>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9d8 	bl	8000558 <__aeabi_f2d>
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <send_uart_dma+0x84>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9d1 	bl	8000558 <__aeabi_f2d>
 80011b6:	4680      	mov	r8, r0
 80011b8:	4689      	mov	r9, r1
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <send_uart_dma+0x88>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9ca 	bl	8000558 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4912      	ldr	r1, [pc, #72]	@ (8001214 <send_uart_dma+0x8c>)
 80011ca:	6809      	ldr	r1, [r1, #0]
 80011cc:	9106      	str	r1, [sp, #24]
 80011ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011d6:	e9cd 4500 	strd	r4, r5, [sp]
 80011da:	4652      	mov	r2, sl
 80011dc:	465b      	mov	r3, fp
 80011de:	490e      	ldr	r1, [pc, #56]	@ (8001218 <send_uart_dma+0x90>)
 80011e0:	480e      	ldr	r0, [pc, #56]	@ (800121c <send_uart_dma+0x94>)
 80011e2:	f005 fecd 	bl	8006f80 <siprintf>
//	sprintf(MSG, "%.4f, %.4f\r\n", x2, 90.0);
//	sprintf(MSG, "%.4f, %.4f\r\n", x1, -180.0);
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)MSG, strlen(MSG));
 80011e6:	480d      	ldr	r0, [pc, #52]	@ (800121c <send_uart_dma+0x94>)
 80011e8:	f7ff f84a 	bl	8000280 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	490a      	ldr	r1, [pc, #40]	@ (800121c <send_uart_dma+0x94>)
 80011f4:	480a      	ldr	r0, [pc, #40]	@ (8001220 <send_uart_dma+0x98>)
 80011f6:	f004 f9a1 	bl	800553c <HAL_UART_Transmit_DMA>
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001202:	bf00      	nop
 8001204:	200003bc 	.word	0x200003bc
 8001208:	200003b8 	.word	0x200003b8
 800120c:	200003d0 	.word	0x200003d0
 8001210:	200003cc 	.word	0x200003cc
 8001214:	200003b4 	.word	0x200003b4
 8001218:	08009248 	.word	0x08009248
 800121c:	2000045c 	.word	0x2000045c
 8001220:	200002e4 	.word	0x200002e4

08001224 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001234:	d10d      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x2e>
  {
    HAL_Delay(50); // Debounce
 8001236:	2032      	movs	r0, #50	@ 0x32
 8001238:	f001 fd5a 	bl	8002cf0 <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800123c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001240:	4806      	ldr	r0, [pc, #24]	@ (800125c <HAL_GPIO_EXTI_Callback+0x38>)
 8001242:	f002 fc11 	bl	8003a68 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk; // Full software reset
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x3c>)
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_GPIO_EXTI_Callback+0x40>)
 8001250:	60da      	str	r2, [r3, #12]
    }
  }
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020800 	.word	0x40020800
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0004 	.word	0x05fa0004

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f001 fccd 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 ff93 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f001 f96d 	bl	8002554 <MX_GPIO_Init>
  MX_DMA_Init();
 800127a:	f001 f94b 	bl	8002514 <MX_DMA_Init>
  MX_TIM2_Init();
 800127e:	f000 fff5 	bl	800226c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001282:	f001 f847 	bl	8002314 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001286:	f001 f8c7 	bl	8002418 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800128a:	f001 f919 	bl	80024c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800128e:	213c      	movs	r1, #60	@ 0x3c
 8001290:	4889      	ldr	r0, [pc, #548]	@ (80014b8 <main+0x250>)
 8001292:	f003 fa6f 	bl	8004774 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001296:	2100      	movs	r1, #0
 8001298:	4888      	ldr	r0, [pc, #544]	@ (80014bc <main+0x254>)
 800129a:	f003 f915 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800129e:	2104      	movs	r1, #4
 80012a0:	4886      	ldr	r0, [pc, #536]	@ (80014bc <main+0x254>)
 80012a2:	f003 f911 	bl	80044c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80012a6:	213c      	movs	r1, #60	@ 0x3c
 80012a8:	4885      	ldr	r0, [pc, #532]	@ (80014c0 <main+0x258>)
 80012aa:	f003 fa63 	bl	8004774 <HAL_TIM_Encoder_Start>
  HAL_Delay(500);
 80012ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b2:	f001 fd1d 	bl	8002cf0 <HAL_Delay>
  TIM3->CCR1 = 16000;
 80012b6:	4b83      	ldr	r3, [pc, #524]	@ (80014c4 <main+0x25c>)
 80012b8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80012bc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;
 80012be:	4b81      	ldr	r3, [pc, #516]	@ (80014c4 <main+0x25c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(100);
 80012c4:	2064      	movs	r0, #100	@ 0x64
 80012c6:	f001 fd13 	bl	8002cf0 <HAL_Delay>
  TIM3->CCR1 = 0;
 80012ca:	4b7e      	ldr	r3, [pc, #504]	@ (80014c4 <main+0x25c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;
 80012d0:	4b7c      	ldr	r3, [pc, #496]	@ (80014c4 <main+0x25c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printt = HAL_GetTick();
 80012d6:	f001 fcff 	bl	8002cd8 <HAL_GetTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b7a      	ldr	r3, [pc, #488]	@ (80014c8 <main+0x260>)
 80012e0:	601a      	str	r2, [r3, #0]
	  counterValue_1 = (int32_t)(TIM2->CNT);
 80012e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b78      	ldr	r3, [pc, #480]	@ (80014cc <main+0x264>)
 80012ec:	601a      	str	r2, [r3, #0]
	  counterValue_2 = (int16_t)(TIM4->CNT);
 80012ee:	4b78      	ldr	r3, [pc, #480]	@ (80014d0 <main+0x268>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <main+0x26c>)
 80012f6:	801a      	strh	r2, [r3, #0]
	  x1 = (roundf(100 * counterValue_1 * 360.0 / 4000.0) / 100.0) - 180;
 80012f8:	4b74      	ldr	r3, [pc, #464]	@ (80014cc <main+0x264>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f916 	bl	8000534 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <main+0x270>)
 800130e:	f7ff f97b 	bl	8000608 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <main+0x274>)
 8001320:	f7ff fa9c 	bl	800085c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc44 	bl	8000bb8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	ee00 3a10 	vmov	s0, r3
 8001336:	f007 ff57 	bl	80091e8 <roundf>
 800133a:	ee10 3a10 	vmov	r3, s0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f90a 	bl	8000558 <__aeabi_f2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <main+0x278>)
 800134a:	f7ff fa87 	bl	800085c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b62      	ldr	r3, [pc, #392]	@ (80014e4 <main+0x27c>)
 800135c:	f7fe ff9c 	bl	8000298 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fc26 	bl	8000bb8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4a5e      	ldr	r2, [pc, #376]	@ (80014e8 <main+0x280>)
 8001370:	6013      	str	r3, [r2, #0]
	  dx1 = compute_derivative(x1, prev_x1, Ts);
 8001372:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <main+0x280>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	4b5c      	ldr	r3, [pc, #368]	@ (80014ec <main+0x284>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <main+0x288>)
 8001380:	edd3 6a00 	vldr	s13, [r3]
 8001384:	eeb0 1a66 	vmov.f32	s2, s13
 8001388:	eef0 0a47 	vmov.f32	s1, s14
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f7ff fe5d 	bl	800104e <compute_derivative>
 8001394:	eef0 7a40 	vmov.f32	s15, s0
 8001398:	4b56      	ldr	r3, [pc, #344]	@ (80014f4 <main+0x28c>)
 800139a:	edc3 7a00 	vstr	s15, [r3]
	  fdx1 = filter(dx1, &fdx1_then, 0.0005);
 800139e:	4b55      	ldr	r3, [pc, #340]	@ (80014f4 <main+0x28c>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80014f8 <main+0x290>
 80013a8:	4854      	ldr	r0, [pc, #336]	@ (80014fc <main+0x294>)
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	f7ff fe24 	bl	8000ffa <filter>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
 80013b6:	4b52      	ldr	r3, [pc, #328]	@ (8001500 <main+0x298>)
 80013b8:	edc3 7a00 	vstr	s15, [r3]
	  x2 = roundf(100 * counterValue_2 * 360.0 / 300.0)/100.0;
 80013bc:	4b45      	ldr	r3, [pc, #276]	@ (80014d4 <main+0x26c>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	461a      	mov	r2, r3
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8b2 	bl	8000534 <__aeabi_i2d>
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b40      	ldr	r3, [pc, #256]	@ (80014d8 <main+0x270>)
 80013d6:	f7ff f917 	bl	8000608 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	a333      	add	r3, pc, #204	@ (adr r3, 80014b0 <main+0x248>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff fa38 	bl	800085c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fbe0 	bl	8000bb8 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	ee00 3a10 	vmov	s0, r3
 80013fe:	f007 fef3 	bl	80091e8 <roundf>
 8001402:	eeb0 7a40 	vmov.f32	s14, s0
 8001406:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001504 <main+0x29c>
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <main+0x2a0>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	  dx2 = compute_derivative(x2, prev_x2, Ts);
 8001414:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <main+0x2a0>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	4b3c      	ldr	r3, [pc, #240]	@ (800150c <main+0x2a4>)
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <main+0x288>)
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	eeb0 1a66 	vmov.f32	s2, s13
 800142a:	eef0 0a47 	vmov.f32	s1, s14
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	f7ff fe0c 	bl	800104e <compute_derivative>
 8001436:	eef0 7a40 	vmov.f32	s15, s0
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <main+0x2a8>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
	  fdx2 = filter(dx2, &fdx2_then, 0.0005);
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <main+0x2a8>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 80014f8 <main+0x290>
 800144a:	4832      	ldr	r0, [pc, #200]	@ (8001514 <main+0x2ac>)
 800144c:	eeb0 0a67 	vmov.f32	s0, s15
 8001450:	f7ff fdd3 	bl	8000ffa <filter>
 8001454:	eef0 7a40 	vmov.f32	s15, s0
 8001458:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <main+0x2b0>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
	  prev_x2 = x2;
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <main+0x2a0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <main+0x2a4>)
 8001464:	6013      	str	r3, [r2, #0]
	  prev_x1 = x1;
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <main+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <main+0x284>)
 800146c:	6013      	str	r3, [r2, #0]
	  if(fabs(x2) > 540){
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <main+0x2a0>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eef0 7ae7 	vabs.f32	s15, s15
 8001478:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800151c <main+0x2b4>
 800147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd02      	ble.n	800148c <main+0x224>
		  mode = 3;
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <main+0x2b8>)
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
	  }
	  switch(mode){
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <main+0x2b8>)
 800148e:	f993 3000 	ldrsb.w	r3, [r3]
 8001492:	2b03      	cmp	r3, #3
 8001494:	f200 8641 	bhi.w	800211a <main+0xeb2>
 8001498:	a201      	add	r2, pc, #4	@ (adr r2, 80014a0 <main+0x238>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	08001525 	.word	0x08001525
 80014a4:	08001a69 	.word	0x08001a69
 80014a8:	08001d1d 	.word	0x08001d1d
 80014ac:	080020cf 	.word	0x080020cf
 80014b0:	00000000 	.word	0x00000000
 80014b4:	4072c000 	.word	0x4072c000
 80014b8:	2000020c 	.word	0x2000020c
 80014bc:	20000254 	.word	0x20000254
 80014c0:	2000029c 	.word	0x2000029c
 80014c4:	40000400 	.word	0x40000400
 80014c8:	2000038c 	.word	0x2000038c
 80014cc:	20000398 	.word	0x20000398
 80014d0:	40000800 	.word	0x40000800
 80014d4:	2000039c 	.word	0x2000039c
 80014d8:	40768000 	.word	0x40768000
 80014dc:	40af4000 	.word	0x40af4000
 80014e0:	40590000 	.word	0x40590000
 80014e4:	40668000 	.word	0x40668000
 80014e8:	200003b8 	.word	0x200003b8
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004
 80014f4:	200003c4 	.word	0x200003c4
 80014f8:	3a03126f 	.word	0x3a03126f
 80014fc:	200003d4 	.word	0x200003d4
 8001500:	200003cc 	.word	0x200003cc
 8001504:	42c80000 	.word	0x42c80000
 8001508:	200003bc 	.word	0x200003bc
 800150c:	200003c0 	.word	0x200003c0
 8001510:	200003c8 	.word	0x200003c8
 8001514:	200003d8 	.word	0x200003d8
 8001518:	200003d0 	.word	0x200003d0
 800151c:	44070000 	.word	0x44070000
 8001520:	20000458 	.word	0x20000458
	  case 0:
		  rad_angle_1 = roundf(1000 * counterValue_1 * pi * 2.0 / 4000.0) / 1000.0;
 8001524:	4bcc      	ldr	r3, [pc, #816]	@ (8001858 <main+0x5f0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffff 	bl	8000534 <__aeabi_i2d>
 8001536:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001848 <main+0x5e0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f864 	bl	8000608 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	f7fe fea6 	bl	800029c <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4bbf      	ldr	r3, [pc, #764]	@ (800185c <main+0x5f4>)
 800155e:	f7ff f97d 	bl	800085c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb25 	bl	8000bb8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	ee00 3a10 	vmov	s0, r3
 8001574:	f007 fe38 	bl	80091e8 <roundf>
 8001578:	ee10 3a10 	vmov	r3, s0
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffeb 	bl	8000558 <__aeabi_f2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4bb6      	ldr	r3, [pc, #728]	@ (8001860 <main+0x5f8>)
 8001588:	f7ff f968 	bl	800085c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	49b4      	ldr	r1, [pc, #720]	@ (8001864 <main+0x5fc>)
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_1 = wrap_angle_deg(rad_angle_1, pi);
 8001596:	4bb3      	ldr	r3, [pc, #716]	@ (8001864 <main+0x5fc>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fb0a 	bl	8000bb8 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8001868 <main+0x600>
 80015aa:	ee00 3a10 	vmov	s0, r3
 80015ae:	f7ff fce9 	bl	8000f84 <wrap_angle_deg>
 80015b2:	ee10 3a10 	vmov	r3, s0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffce 	bl	8000558 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	49a8      	ldr	r1, [pc, #672]	@ (8001864 <main+0x5fc>)
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_2 = roundf(1000 * counterValue_2 * pi * 2.0 / 300.0) / 1000.0;
 80015c6:	4ba9      	ldr	r3, [pc, #676]	@ (800186c <main+0x604>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	461a      	mov	r2, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffac 	bl	8000534 <__aeabi_i2d>
 80015dc:	a39a      	add	r3, pc, #616	@ (adr r3, 8001848 <main+0x5e0>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f811 	bl	8000608 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	f7fe fe53 	bl	800029c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	a394      	add	r3, pc, #592	@ (adr r3, 8001850 <main+0x5e8>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f92a 	bl	800085c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fad2 	bl	8000bb8 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	ee00 3a10 	vmov	s0, r3
 800161a:	f007 fde5 	bl	80091e8 <roundf>
 800161e:	ee10 3a10 	vmov	r3, s0
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff98 	bl	8000558 <__aeabi_f2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b8c      	ldr	r3, [pc, #560]	@ (8001860 <main+0x5f8>)
 800162e:	f7ff f915 	bl	800085c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	498e      	ldr	r1, [pc, #568]	@ (8001870 <main+0x608>)
 8001638:	e9c1 2300 	strd	r2, r3, [r1]
		  current_error_1 = sp1 - rad_angle_1;
 800163c:	4b8d      	ldr	r3, [pc, #564]	@ (8001874 <main+0x60c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff89 	bl	8000558 <__aeabi_f2d>
 8001646:	4b87      	ldr	r3, [pc, #540]	@ (8001864 <main+0x5fc>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe24 	bl	8000298 <__aeabi_dsub>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4988      	ldr	r1, [pc, #544]	@ (8001878 <main+0x610>)
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
		  drv_error_1 = compute_derivative(current_error_1, prev_error_1, Ts);
 800165a:	4b87      	ldr	r3, [pc, #540]	@ (8001878 <main+0x610>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff faa8 	bl	8000bb8 <__aeabi_d2f>
 8001668:	4606      	mov	r6, r0
 800166a:	4b84      	ldr	r3, [pc, #528]	@ (800187c <main+0x614>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff faa0 	bl	8000bb8 <__aeabi_d2f>
 8001678:	4602      	mov	r2, r0
 800167a:	4b81      	ldr	r3, [pc, #516]	@ (8001880 <main+0x618>)
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	eeb0 1a67 	vmov.f32	s2, s15
 8001684:	ee00 2a90 	vmov	s1, r2
 8001688:	ee00 6a10 	vmov	s0, r6
 800168c:	f7ff fcdf 	bl	800104e <compute_derivative>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	4b7b      	ldr	r3, [pc, #492]	@ (8001884 <main+0x61c>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
		  fdrv_error_1 = filter(drv_error_1, &fdrv_error_1_then, 0.001);
 800169a:	4b7a      	ldr	r3, [pc, #488]	@ (8001884 <main+0x61c>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8001888 <main+0x620>
 80016a4:	4879      	ldr	r0, [pc, #484]	@ (800188c <main+0x624>)
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f7ff fca6 	bl	8000ffa <filter>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	4b77      	ldr	r3, [pc, #476]	@ (8001890 <main+0x628>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
		  itg_error_1 = compute_integral(current_error_1, prev_error_1, Ts, &integral_1);
 80016b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <main+0x610>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa79 	bl	8000bb8 <__aeabi_d2f>
 80016c6:	4606      	mov	r6, r0
 80016c8:	4b6c      	ldr	r3, [pc, #432]	@ (800187c <main+0x614>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa71 	bl	8000bb8 <__aeabi_d2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b69      	ldr	r3, [pc, #420]	@ (8001880 <main+0x618>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	486d      	ldr	r0, [pc, #436]	@ (8001894 <main+0x62c>)
 80016e0:	eeb0 1a67 	vmov.f32	s2, s15
 80016e4:	ee00 2a90 	vmov	s1, r2
 80016e8:	ee00 6a10 	vmov	s0, r6
 80016ec:	f7ff fcce 	bl	800108c <compute_integral>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	4b68      	ldr	r3, [pc, #416]	@ (8001898 <main+0x630>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
		  ctrl_sgn_1 = Kp_1 * current_error_1 + Ki_1 * itg_error_1 + Kd_1 * drv_error_1;
 80016fa:	4b68      	ldr	r3, [pc, #416]	@ (800189c <main+0x634>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff2a 	bl	8000558 <__aeabi_f2d>
 8001704:	4b5c      	ldr	r3, [pc, #368]	@ (8001878 <main+0x610>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff7d 	bl	8000608 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4692      	mov	sl, r2
 8001714:	469b      	mov	fp, r3
 8001716:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <main+0x638>)
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	4b5e      	ldr	r3, [pc, #376]	@ (8001898 <main+0x630>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	ee17 0a90 	vmov	r0, s15
 800172a:	f7fe ff15 	bl	8000558 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4650      	mov	r0, sl
 8001734:	4659      	mov	r1, fp
 8001736:	f7fe fdb1 	bl	800029c <__adddf3>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4692      	mov	sl, r2
 8001740:	469b      	mov	fp, r3
 8001742:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <main+0x63c>)
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <main+0x61c>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4650      	mov	r0, sl
 8001760:	4659      	mov	r1, fp
 8001762:	f7fe fd9b 	bl	800029c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	494f      	ldr	r1, [pc, #316]	@ (80018a8 <main+0x640>)
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
		  current_error_2 = rad_angle_2;
 8001770:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <main+0x608>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa1d 	bl	8000bb8 <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <main+0x644>)
 8001782:	6013      	str	r3, [r2, #0]
		  drv_error_2 = compute_derivative(current_error_2, prev_error_2, Ts);
 8001784:	4b49      	ldr	r3, [pc, #292]	@ (80018ac <main+0x644>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <main+0x648>)
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <main+0x618>)
 8001792:	edd3 6a00 	vldr	s13, [r3]
 8001796:	eeb0 1a66 	vmov.f32	s2, s13
 800179a:	eef0 0a47 	vmov.f32	s1, s14
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	f7ff fc54 	bl	800104e <compute_derivative>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	4b42      	ldr	r3, [pc, #264]	@ (80018b4 <main+0x64c>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
		  fdrv_error_2 = filter(drv_error_2, &fdrv_error_2_then, 0.001);
 80017b0:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <main+0x64c>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001888 <main+0x620>
 80017ba:	483f      	ldr	r0, [pc, #252]	@ (80018b8 <main+0x650>)
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f7ff fc1b 	bl	8000ffa <filter>
 80017c4:	eef0 7a40 	vmov.f32	s15, s0
 80017c8:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <main+0x654>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
		  itg_error_2 = compute_integral(current_error_2, prev_error_2, Ts, &integral_2);
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <main+0x644>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <main+0x648>)
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <main+0x618>)
 80017dc:	edd3 6a00 	vldr	s13, [r3]
 80017e0:	4837      	ldr	r0, [pc, #220]	@ (80018c0 <main+0x658>)
 80017e2:	eeb0 1a66 	vmov.f32	s2, s13
 80017e6:	eef0 0a47 	vmov.f32	s1, s14
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	f7ff fc4d 	bl	800108c <compute_integral>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <main+0x65c>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
		  ctrl_sgn_2 = Kp_2 * current_error_2 + Ki_2 * itg_error_2 + Kd_2 * drv_error_2;
 80017fc:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <main+0x660>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <main+0x644>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <main+0x664>)
 800180e:	edd3 6a00 	vldr	s13, [r3]
 8001812:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <main+0x65c>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <main+0x668>)
 8001822:	edd3 6a00 	vldr	s13, [r3]
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <main+0x64c>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001838:	ee17 2a90 	vmov	r2, s15
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <main+0x66c>)
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e04a      	b.n	80018d8 <main+0x670>
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	54442d18 	.word	0x54442d18
 800184c:	400921fb 	.word	0x400921fb
 8001850:	00000000 	.word	0x00000000
 8001854:	4072c000 	.word	0x4072c000
 8001858:	20000398 	.word	0x20000398
 800185c:	40af4000 	.word	0x40af4000
 8001860:	408f4000 	.word	0x408f4000
 8001864:	200003e0 	.word	0x200003e0
 8001868:	40490fdb 	.word	0x40490fdb
 800186c:	2000039c 	.word	0x2000039c
 8001870:	200003e8 	.word	0x200003e8
 8001874:	200003dc 	.word	0x200003dc
 8001878:	200003f0 	.word	0x200003f0
 800187c:	200003f8 	.word	0x200003f8
 8001880:	20000004 	.word	0x20000004
 8001884:	20000410 	.word	0x20000410
 8001888:	3a83126f 	.word	0x3a83126f
 800188c:	20000428 	.word	0x20000428
 8001890:	20000420 	.word	0x20000420
 8001894:	20000408 	.word	0x20000408
 8001898:	20000418 	.word	0x20000418
 800189c:	20000008 	.word	0x20000008
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	20000450 	.word	0x20000450
 80018a8:	200003a0 	.word	0x200003a0
 80018ac:	20000400 	.word	0x20000400
 80018b0:	20000404 	.word	0x20000404
 80018b4:	20000414 	.word	0x20000414
 80018b8:	2000042c 	.word	0x2000042c
 80018bc:	20000424 	.word	0x20000424
 80018c0:	2000040c 	.word	0x2000040c
 80018c4:	2000041c 	.word	0x2000041c
 80018c8:	20000010 	.word	0x20000010
 80018cc:	20000014 	.word	0x20000014
 80018d0:	20000454 	.word	0x20000454
 80018d4:	200003b0 	.word	0x200003b0
		  ctrl_sgn_k = ctrl_sgn_1 + ctrl_sgn_2;
 80018d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a10 <main+0x7a8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe29 	bl	8000534 <__aeabi_i2d>
 80018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <main+0x7ac>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fcd8 	bl	800029c <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f938 	bl	8000b68 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <main+0x7b0>)
 80018fc:	6013      	str	r3, [r2, #0]
		  if (ctrl_sgn_k > 50000) ctrl_sgn_k = 50000;
 80018fe:	4b46      	ldr	r3, [pc, #280]	@ (8001a18 <main+0x7b0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001906:	4293      	cmp	r3, r2
 8001908:	dd03      	ble.n	8001912 <main+0x6aa>
 800190a:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <main+0x7b0>)
 800190c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001910:	601a      	str	r2, [r3, #0]
		  if (ctrl_sgn_k < -50000) ctrl_sgn_k = -50000;
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <main+0x7b0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a41      	ldr	r2, [pc, #260]	@ (8001a1c <main+0x7b4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	da02      	bge.n	8001922 <main+0x6ba>
 800191c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <main+0x7b0>)
 800191e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a1c <main+0x7b4>)
 8001920:	601a      	str	r2, [r3, #0]
		  if(ctrl_sgn_k >= 0){
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <main+0x7b0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db06      	blt.n	8001938 <main+0x6d0>
			  TIM3->CCR1 = 0;
 800192a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <main+0x7b8>)
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = ctrl_sgn_k; //CCW
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <main+0x7b0>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <main+0x7b8>)
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if(ctrl_sgn_k <= 0){
 8001938:	4b37      	ldr	r3, [pc, #220]	@ (8001a18 <main+0x7b0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dc07      	bgt.n	8001950 <main+0x6e8>
			  TIM3->CCR1 = (-1) * ctrl_sgn_k; //CW
 8001940:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <main+0x7b0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	425a      	negs	r2, r3
 8001946:	4b36      	ldr	r3, [pc, #216]	@ (8001a20 <main+0x7b8>)
 8001948:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = 0;
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <main+0x7b8>)
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if(rad_angle_1 <= -0.9 * pi || rad_angle_1 >= 0.9 * pi){
 8001950:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <main+0x7bc>)
 8001952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001956:	a32a      	add	r3, pc, #168	@ (adr r3, 8001a00 <main+0x798>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7ff f8d0 	bl	8000b00 <__aeabi_dcmple>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <main+0x714>
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <main+0x7bc>)
 8001968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196c:	a326      	add	r3, pc, #152	@ (adr r3, 8001a08 <main+0x7a0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7ff f8cf 	bl	8000b14 <__aeabi_dcmpge>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d02e      	beq.n	80019da <main+0x772>
			  mode = 2;
 800197c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <main+0x7c0>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
			  if (rad_angle_1 >= 0.9 * pi){
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <main+0x7bc>)
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a08 <main+0x7a0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7ff f8c1 	bl	8000b14 <__aeabi_dcmpge>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <main+0x744>
		  		prev_angle_1 = -0.1 * pi;
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <main+0x7c4>)
 800199a:	4a25      	ldr	r2, [pc, #148]	@ (8001a30 <main+0x7c8>)
 800199c:	601a      	str	r2, [r3, #0]
		  		drv_angle_1 = pi;
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <main+0x7cc>)
 80019a0:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <main+0x7d0>)
 80019a2:	601a      	str	r2, [r3, #0]
		  		fdrv_angle_1_then = pi;
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <main+0x7d4>)
 80019a6:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <main+0x7d0>)
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e008      	b.n	80019be <main+0x756>
			  } else {
				prev_angle_1 = 0.1 * pi;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <main+0x7c4>)
 80019ae:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <main+0x7d8>)
 80019b0:	601a      	str	r2, [r3, #0]
				drv_angle_1 = -pi;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <main+0x7cc>)
 80019b4:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <main+0x7dc>)
 80019b6:	601a      	str	r2, [r3, #0]
				fdrv_angle_1_then = -pi;
 80019b8:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <main+0x7d4>)
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <main+0x7dc>)
 80019bc:	601a      	str	r2, [r3, #0]
			  }
			  fdrv_angle_2_then = 0;
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <main+0x7e0>)
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
			  prev_angle_2 = rad_angle_2;
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <main+0x7e4>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8f2 	bl	8000bb8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <main+0x7e8>)
 80019d8:	6013      	str	r3, [r2, #0]
		  }

		  prev_error_1 = current_error_1;
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <main+0x7ec>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	491d      	ldr	r1, [pc, #116]	@ (8001a58 <main+0x7f0>)
 80019e2:	e9c1 2300 	strd	r2, r3, [r1]
		  prev_ctrl_sgn_1 = ctrl_sgn_1;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <main+0x7ac>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	491b      	ldr	r1, [pc, #108]	@ (8001a5c <main+0x7f4>)
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
		  prev_error_2 = current_error_2;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <main+0x7f8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <main+0x7fc>)
 80019f8:	6013      	str	r3, [r2, #0]
		  break;
 80019fa:	e38e      	b.n	800211a <main+0xeb2>
 80019fc:	f3af 8000 	nop.w
 8001a00:	65708efc 	.word	0x65708efc
 8001a04:	c0069e95 	.word	0xc0069e95
 8001a08:	65708efc 	.word	0x65708efc
 8001a0c:	40069e95 	.word	0x40069e95
 8001a10:	200003b0 	.word	0x200003b0
 8001a14:	200003a0 	.word	0x200003a0
 8001a18:	200003b4 	.word	0x200003b4
 8001a1c:	ffff3cb0 	.word	0xffff3cb0
 8001a20:	40000400 	.word	0x40000400
 8001a24:	200003e0 	.word	0x200003e0
 8001a28:	20000458 	.word	0x20000458
 8001a2c:	20000448 	.word	0x20000448
 8001a30:	bea0d97c 	.word	0xbea0d97c
 8001a34:	20000430 	.word	0x20000430
 8001a38:	40490fdb 	.word	0x40490fdb
 8001a3c:	20000440 	.word	0x20000440
 8001a40:	3ea0d97c 	.word	0x3ea0d97c
 8001a44:	c0490fdb 	.word	0xc0490fdb
 8001a48:	20000444 	.word	0x20000444
 8001a4c:	200003e8 	.word	0x200003e8
 8001a50:	2000044c 	.word	0x2000044c
 8001a54:	200003f0 	.word	0x200003f0
 8001a58:	200003f8 	.word	0x200003f8
 8001a5c:	200003a8 	.word	0x200003a8
 8001a60:	20000400 	.word	0x20000400
 8001a64:	20000404 	.word	0x20000404
	  case 1:
		  rad_angle_1 = roundf(1000 * counterValue_1 * pi * 2.0 / 4000.0) / 1000.0;
 8001a68:	4b99      	ldr	r3, [pc, #612]	@ (8001cd0 <main+0xa68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd5d 	bl	8000534 <__aeabi_i2d>
 8001a7a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001cb0 <main+0xa48>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdc2 	bl	8000608 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f7fe fc04 	bl	800029c <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd4 <main+0xa6c>)
 8001aa2:	f7fe fedb 	bl	800085c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f883 	bl	8000bb8 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee00 3a10 	vmov	s0, r3
 8001ab8:	f007 fb96 	bl	80091e8 <roundf>
 8001abc:	ee10 3a10 	vmov	r3, s0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <main+0xa70>)
 8001acc:	f7fe fec6 	bl	800085c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4981      	ldr	r1, [pc, #516]	@ (8001cdc <main+0xa74>)
 8001ad6:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_1 = wrap_angle_deg(rad_angle_1, pi);
 8001ada:	4b80      	ldr	r3, [pc, #512]	@ (8001cdc <main+0xa74>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f868 	bl	8000bb8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8001ce0 <main+0xa78>
 8001aee:	ee00 3a10 	vmov	s0, r3
 8001af2:	f7ff fa47 	bl	8000f84 <wrap_angle_deg>
 8001af6:	ee10 3a10 	vmov	r3, s0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4975      	ldr	r1, [pc, #468]	@ (8001cdc <main+0xa74>)
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_2 = roundf(1000 * counterValue_2 * pi * 2.0 / 300.0) / 1000.0;
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <main+0xa7c>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	461a      	mov	r2, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd0a 	bl	8000534 <__aeabi_i2d>
 8001b20:	a363      	add	r3, pc, #396	@ (adr r3, 8001cb0 <main+0xa48>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	f7fe fbb1 	bl	800029c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	a35d      	add	r3, pc, #372	@ (adr r3, 8001cb8 <main+0xa50>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe88 	bl	800085c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f830 	bl	8000bb8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	ee00 3a10 	vmov	s0, r3
 8001b5e:	f007 fb43 	bl	80091e8 <roundf>
 8001b62:	ee10 3a10 	vmov	r3, s0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcf6 	bl	8000558 <__aeabi_f2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <main+0xa70>)
 8001b72:	f7fe fe73 	bl	800085c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	495b      	ldr	r1, [pc, #364]	@ (8001ce8 <main+0xa80>)
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]
		  ctrl_sgn_k = 10000 * rad_angle_1 + 10000 * rad_angle_2;
 8001b80:	4b56      	ldr	r3, [pc, #344]	@ (8001cdc <main+0xa74>)
 8001b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b86:	a34e      	add	r3, pc, #312	@ (adr r3, 8001cc0 <main+0xa58>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fd3c 	bl	8000608 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4692      	mov	sl, r2
 8001b96:	469b      	mov	fp, r3
 8001b98:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <main+0xa80>)
 8001b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9e:	a348      	add	r3, pc, #288	@ (adr r3, 8001cc0 <main+0xa58>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd30 	bl	8000608 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4650      	mov	r0, sl
 8001bae:	4659      	mov	r1, fp
 8001bb0:	f7fe fb74 	bl	800029c <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7fe ffd4 	bl	8000b68 <__aeabi_d2iz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cec <main+0xa84>)
 8001bc4:	6013      	str	r3, [r2, #0]
		  if (ctrl_sgn_k > 50000) ctrl_sgn_k = 50000;
 8001bc6:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <main+0xa84>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dd03      	ble.n	8001bda <main+0x972>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <main+0xa84>)
 8001bd4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001bd8:	601a      	str	r2, [r3, #0]
		  if (ctrl_sgn_k < -50000) ctrl_sgn_k = -50000;
 8001bda:	4b44      	ldr	r3, [pc, #272]	@ (8001cec <main+0xa84>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a44      	ldr	r2, [pc, #272]	@ (8001cf0 <main+0xa88>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	da02      	bge.n	8001bea <main+0x982>
 8001be4:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <main+0xa84>)
 8001be6:	4a42      	ldr	r2, [pc, #264]	@ (8001cf0 <main+0xa88>)
 8001be8:	601a      	str	r2, [r3, #0]
		  if(ctrl_sgn_k >= 0){
 8001bea:	4b40      	ldr	r3, [pc, #256]	@ (8001cec <main+0xa84>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db06      	blt.n	8001c00 <main+0x998>
			  TIM3->CCR1 = 0;
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <main+0xa8c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = ctrl_sgn_k; //CCW
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <main+0xa84>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <main+0xa8c>)
 8001bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if(ctrl_sgn_k <= 0){
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <main+0xa84>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dc07      	bgt.n	8001c18 <main+0x9b0>
			  TIM3->CCR1 = (-1) * ctrl_sgn_k; //CW
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <main+0xa84>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	425a      	negs	r2, r3
 8001c0e:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <main+0xa8c>)
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = 0;
 8001c12:	4b38      	ldr	r3, [pc, #224]	@ (8001cf4 <main+0xa8c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if (fabs(rad_angle_1) <= 0.2){
 8001c18:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <main+0xa74>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	4614      	mov	r4, r2
 8001c20:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001c24:	a328      	add	r3, pc, #160	@ (adr r3, 8001cc8 <main+0xa60>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe ff67 	bl	8000b00 <__aeabi_dcmple>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <main+0x9e4>
			  cnt_trns++;
 8001c38:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf8 <main+0xa90>)
 8001c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <main+0xa90>)
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	e002      	b.n	8001c52 <main+0x9ea>
		  } else {
			  cnt_trns = 0;
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <main+0xa90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
		  }
		  if (cnt_trns >= 1000){
 8001c52:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <main+0xa90>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c5c:	f2c0 825c 	blt.w	8002118 <main+0xeb0>
			  mode = 0;
 8001c60:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <main+0xa94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
			  prev_error_1 = 0;
 8001c66:	4926      	ldr	r1, [pc, #152]	@ (8001d00 <main+0xa98>)
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
			  prev_error_2 = 0;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <main+0xa9c>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
			  itg_error_1 = 0;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <main+0xaa0>)
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
			  itg_error_2 = 0;
 8001c84:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <main+0xaa4>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
			  integral_1 = 0;
 8001c8c:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <main+0xaa8>)
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
			  integral_2 = 0;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <main+0xaac>)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
			  ctrl_sgn_2 = 0;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <main+0xab0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
			  ctrl_sgn_k = 0;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <main+0xa84>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001ca8:	e236      	b.n	8002118 <main+0xeb0>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	400921fb 	.word	0x400921fb
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	4072c000 	.word	0x4072c000
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40c38800 	.word	0x40c38800
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	3fc99999 	.word	0x3fc99999
 8001cd0:	20000398 	.word	0x20000398
 8001cd4:	40af4000 	.word	0x40af4000
 8001cd8:	408f4000 	.word	0x408f4000
 8001cdc:	200003e0 	.word	0x200003e0
 8001ce0:	40490fdb 	.word	0x40490fdb
 8001ce4:	2000039c 	.word	0x2000039c
 8001ce8:	200003e8 	.word	0x200003e8
 8001cec:	200003b4 	.word	0x200003b4
 8001cf0:	ffff3cb0 	.word	0xffff3cb0
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	2000039e 	.word	0x2000039e
 8001cfc:	20000458 	.word	0x20000458
 8001d00:	200003f8 	.word	0x200003f8
 8001d04:	20000404 	.word	0x20000404
 8001d08:	20000418 	.word	0x20000418
 8001d0c:	2000041c 	.word	0x2000041c
 8001d10:	20000408 	.word	0x20000408
 8001d14:	2000040c 	.word	0x2000040c
 8001d18:	200003b0 	.word	0x200003b0
	  case 2:
		  rad_angle_1 = (roundf(1000 * counterValue_1 * pi * 2.0 / 4000.0) / 1000.0) - pi;
 8001d1c:	4bc8      	ldr	r3, [pc, #800]	@ (8002040 <main+0xdd8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc03 	bl	8000534 <__aeabi_i2d>
 8001d2e:	a3b4      	add	r3, pc, #720	@ (adr r3, 8002000 <main+0xd98>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f7fe faaa 	bl	800029c <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4bbb      	ldr	r3, [pc, #748]	@ (8002044 <main+0xddc>)
 8001d56:	f7fe fd81 	bl	800085c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff29 	bl	8000bb8 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	ee00 3a10 	vmov	s0, r3
 8001d6c:	f007 fa3c 	bl	80091e8 <roundf>
 8001d70:	ee10 3a10 	vmov	r3, s0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbef 	bl	8000558 <__aeabi_f2d>
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4bb2      	ldr	r3, [pc, #712]	@ (8002048 <main+0xde0>)
 8001d80:	f7fe fd6c 	bl	800085c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	a39c      	add	r3, pc, #624	@ (adr r3, 8002000 <main+0xd98>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fa81 	bl	8000298 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	49ac      	ldr	r1, [pc, #688]	@ (800204c <main+0xde4>)
 8001d9c:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_1 = wrap_angle_deg(rad_angle_1, pi);
 8001da0:	4baa      	ldr	r3, [pc, #680]	@ (800204c <main+0xde4>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff05 	bl	8000bb8 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8002050 <main+0xde8>
 8001db4:	ee00 3a10 	vmov	s0, r3
 8001db8:	f7ff f8e4 	bl	8000f84 <wrap_angle_deg>
 8001dbc:	ee10 3a10 	vmov	r3, s0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	49a0      	ldr	r1, [pc, #640]	@ (800204c <main+0xde4>)
 8001dcc:	e9c1 2300 	strd	r2, r3, [r1]
		  rad_angle_2 = roundf(1000 * counterValue_2 * pi * 2.0 / 300.0) / 1000.0;
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002054 <main+0xdec>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fba7 	bl	8000534 <__aeabi_i2d>
 8001de6:	a386      	add	r3, pc, #536	@ (adr r3, 8002000 <main+0xd98>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fc0c 	bl	8000608 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f7fe fa4e 	bl	800029c <__adddf3>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	a37f      	add	r3, pc, #508	@ (adr r3, 8002008 <main+0xda0>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fd25 	bl	800085c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fecd 	bl	8000bb8 <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	ee00 3a10 	vmov	s0, r3
 8001e24:	f007 f9e0 	bl	80091e8 <roundf>
 8001e28:	ee10 3a10 	vmov	r3, s0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb93 	bl	8000558 <__aeabi_f2d>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b84      	ldr	r3, [pc, #528]	@ (8002048 <main+0xde0>)
 8001e38:	f7fe fd10 	bl	800085c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4985      	ldr	r1, [pc, #532]	@ (8002058 <main+0xdf0>)
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
		  drv_angle_1 = compute_derivative(rad_angle_1, prev_angle_1, Ts);
 8001e46:	4b81      	ldr	r3, [pc, #516]	@ (800204c <main+0xde4>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe feb2 	bl	8000bb8 <__aeabi_d2f>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b81      	ldr	r3, [pc, #516]	@ (800205c <main+0xdf4>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	4b80      	ldr	r3, [pc, #512]	@ (8002060 <main+0xdf8>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	eeb0 1a47 	vmov.f32	s2, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	ee00 2a10 	vmov	s0, r2
 8001e6e:	f7ff f8ee 	bl	800104e <compute_derivative>
 8001e72:	eef0 7a40 	vmov.f32	s15, s0
 8001e76:	4b7b      	ldr	r3, [pc, #492]	@ (8002064 <main+0xdfc>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
		  fdrv_angle_1 = filter(drv_angle_1, &fdrv_angle_1_then, 0.0012);
 8001e7c:	4b79      	ldr	r3, [pc, #484]	@ (8002064 <main+0xdfc>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8002068 <main+0xe00>
 8001e86:	4879      	ldr	r0, [pc, #484]	@ (800206c <main+0xe04>)
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	f7ff f8b5 	bl	8000ffa <filter>
 8001e90:	eef0 7a40 	vmov.f32	s15, s0
 8001e94:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <main+0xe08>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
		  drv_angle_2 = compute_derivative(rad_angle_2, prev_angle_2, Ts);
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002058 <main+0xdf0>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe88 	bl	8000bb8 <__aeabi_d2f>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b72      	ldr	r3, [pc, #456]	@ (8002074 <main+0xe0c>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002060 <main+0xdf8>)
 8001eb2:	ed93 7a00 	vldr	s14, [r3]
 8001eb6:	eeb0 1a47 	vmov.f32	s2, s14
 8001eba:	eef0 0a67 	vmov.f32	s1, s15
 8001ebe:	ee00 2a10 	vmov	s0, r2
 8001ec2:	f7ff f8c4 	bl	800104e <compute_derivative>
 8001ec6:	eef0 7a40 	vmov.f32	s15, s0
 8001eca:	4b6b      	ldr	r3, [pc, #428]	@ (8002078 <main+0xe10>)
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
		  fdrv_angle_2 = filter(drv_angle_2, &fdrv_angle_2_then, 0.0012);
 8001ed0:	4b69      	ldr	r3, [pc, #420]	@ (8002078 <main+0xe10>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002068 <main+0xe00>
 8001eda:	4868      	ldr	r0, [pc, #416]	@ (800207c <main+0xe14>)
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	f7ff f88b 	bl	8000ffa <filter>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	4b65      	ldr	r3, [pc, #404]	@ (8002080 <main+0xe18>)
 8001eea:	edc3 7a00 	vstr	s15, [r3]
		  ctrl_sgn_k = 100000 * ((0.1412)* (rad_angle_2) + (1.8605)* rad_angle_1 + (0.0781)* fdrv_angle_2 + (0.2341)* fdrv_angle_1);
 8001eee:	4b5a      	ldr	r3, [pc, #360]	@ (8002058 <main+0xdf0>)
 8001ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef4:	a346      	add	r3, pc, #280	@ (adr r3, 8002010 <main+0xda8>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb85 	bl	8000608 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4692      	mov	sl, r2
 8001f04:	469b      	mov	fp, r3
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <main+0xde4>)
 8001f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0c:	a342      	add	r3, pc, #264	@ (adr r3, 8002018 <main+0xdb0>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe fb79 	bl	8000608 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	4659      	mov	r1, fp
 8001f1e:	f7fe f9bd 	bl	800029c <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4692      	mov	sl, r2
 8001f28:	469b      	mov	fp, r3
 8001f2a:	4b55      	ldr	r3, [pc, #340]	@ (8002080 <main+0xe18>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb12 	bl	8000558 <__aeabi_f2d>
 8001f34:	a33a      	add	r3, pc, #232	@ (adr r3, 8002020 <main+0xdb8>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fb65 	bl	8000608 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4650      	mov	r0, sl
 8001f44:	4659      	mov	r1, fp
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4692      	mov	sl, r2
 8001f50:	469b      	mov	fp, r3
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <main+0xe08>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fafe 	bl	8000558 <__aeabi_f2d>
 8001f5c:	a332      	add	r3, pc, #200	@ (adr r3, 8002028 <main+0xdc0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fb51 	bl	8000608 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4650      	mov	r0, sl
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	f7fe f995 	bl	800029c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002030 <main+0xdc8>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fb42 	bl	8000608 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fdec 	bl	8000b68 <__aeabi_d2iz>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a3c      	ldr	r2, [pc, #240]	@ (8002084 <main+0xe1c>)
 8001f94:	6013      	str	r3, [r2, #0]
		  if (ctrl_sgn_k > 70000) ctrl_sgn_k = 70000;
 8001f96:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <main+0xe1c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002088 <main+0xe20>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dd02      	ble.n	8001fa6 <main+0xd3e>
 8001fa0:	4b38      	ldr	r3, [pc, #224]	@ (8002084 <main+0xe1c>)
 8001fa2:	4a39      	ldr	r2, [pc, #228]	@ (8002088 <main+0xe20>)
 8001fa4:	601a      	str	r2, [r3, #0]
		  if (ctrl_sgn_k < -70000) ctrl_sgn_k = -70000;
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <main+0xe1c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a38      	ldr	r2, [pc, #224]	@ (800208c <main+0xe24>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	da02      	bge.n	8001fb6 <main+0xd4e>
 8001fb0:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <main+0xe1c>)
 8001fb2:	4a36      	ldr	r2, [pc, #216]	@ (800208c <main+0xe24>)
 8001fb4:	601a      	str	r2, [r3, #0]
		  if(ctrl_sgn_k >= 0){
 8001fb6:	4b33      	ldr	r3, [pc, #204]	@ (8002084 <main+0xe1c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db06      	blt.n	8001fcc <main+0xd64>
			  TIM3->CCR1 = ctrl_sgn_k;
 8001fbe:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <main+0xe1c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <main+0xe28>)
 8001fc4:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = 0; //CCW
 8001fc6:	4b32      	ldr	r3, [pc, #200]	@ (8002090 <main+0xe28>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if(ctrl_sgn_k <= 0){
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <main+0xe1c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dc07      	bgt.n	8001fe4 <main+0xd7c>
			  TIM3->CCR1 = 0; //CW
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002090 <main+0xe28>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM3->CCR2 = (-1) * ctrl_sgn_k;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <main+0xe1c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	425a      	negs	r2, r3
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <main+0xe28>)
 8001fe2:	639a      	str	r2, [r3, #56]	@ 0x38
		  }
		  if(fabs(rad_angle_1) > 0.3 * pi){
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <main+0xde4>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	4690      	mov	r8, r2
 8001fec:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ff0:	a311      	add	r3, pc, #68	@ (adr r3, 8002038 <main+0xdd0>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	e04b      	b.n	8002094 <main+0xe2c>
 8001ffc:	f3af 8000 	nop.w
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb
 8002008:	00000000 	.word	0x00000000
 800200c:	4072c000 	.word	0x4072c000
 8002010:	7318fc50 	.word	0x7318fc50
 8002014:	3fc212d7 	.word	0x3fc212d7
 8002018:	a5e353f8 	.word	0xa5e353f8
 800201c:	3ffdc49b 	.word	0x3ffdc49b
 8002020:	91d14e3c 	.word	0x91d14e3c
 8002024:	3fb3fe5c 	.word	0x3fb3fe5c
 8002028:	21ff2e49 	.word	0x21ff2e49
 800202c:	3fcdf6fd 	.word	0x3fcdf6fd
 8002030:	00000000 	.word	0x00000000
 8002034:	40f86a00 	.word	0x40f86a00
 8002038:	31eb6950 	.word	0x31eb6950
 800203c:	3fee28c7 	.word	0x3fee28c7
 8002040:	20000398 	.word	0x20000398
 8002044:	40af4000 	.word	0x40af4000
 8002048:	408f4000 	.word	0x408f4000
 800204c:	200003e0 	.word	0x200003e0
 8002050:	40490fdb 	.word	0x40490fdb
 8002054:	2000039c 	.word	0x2000039c
 8002058:	200003e8 	.word	0x200003e8
 800205c:	20000448 	.word	0x20000448
 8002060:	20000004 	.word	0x20000004
 8002064:	20000430 	.word	0x20000430
 8002068:	3a9d4952 	.word	0x3a9d4952
 800206c:	20000440 	.word	0x20000440
 8002070:	20000438 	.word	0x20000438
 8002074:	2000044c 	.word	0x2000044c
 8002078:	20000434 	.word	0x20000434
 800207c:	20000444 	.word	0x20000444
 8002080:	2000043c 	.word	0x2000043c
 8002084:	200003b4 	.word	0x200003b4
 8002088:	00011170 	.word	0x00011170
 800208c:	fffeee90 	.word	0xfffeee90
 8002090:	40000400 	.word	0x40000400
 8002094:	f7fe fd48 	bl	8000b28 <__aeabi_dcmpgt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <main+0xe3c>
		  		  mode = 1;
 800209e:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <main+0xeec>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
		  }
		  prev_angle_1 = rad_angle_1;
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <main+0xef0>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd83 	bl	8000bb8 <__aeabi_d2f>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a29      	ldr	r2, [pc, #164]	@ (800215c <main+0xef4>)
 80020b6:	6013      	str	r3, [r2, #0]
		  prev_angle_2 = rad_angle_2;
 80020b8:	4b29      	ldr	r3, [pc, #164]	@ (8002160 <main+0xef8>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd79 	bl	8000bb8 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <main+0xefc>)
 80020ca:	6013      	str	r3, [r2, #0]
		  break;
 80020cc:	e025      	b.n	800211a <main+0xeb2>

	  case 3:
		  TIM3->CCR1 = 0;
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <main+0xf00>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM3->CCR2 = 0;
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <main+0xf00>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38
		  x1 = 0;
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <main+0xf04>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
		  x2 = 0;
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <main+0xf08>)
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
		  fdx1 = 0;
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <main+0xf0c>)
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
		  fdx2 = 0;
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <main+0xf10>)
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
		  itg_error_1 = 0;
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <main+0xf14>)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
		  itg_error_2 = 0;
 8002102:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <main+0xf18>)
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
		  ctrl_sgn_2 = 0;
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <main+0xf1c>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
		  ctrl_sgn_k = 0;
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <main+0xf20>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		  break;
 8002116:	e000      	b.n	800211a <main+0xeb2>
		  break;
 8002118:	bf00      	nop
	  }
	  printt_then = printt;
 800211a:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <main+0xf24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <main+0xf28>)
 8002120:	6013      	str	r3, [r2, #0]
	  if (printt - printt_then2 > 5){
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <main+0xf24>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <main+0xf2c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b05      	cmp	r3, #5
 800212e:	f77f a8d2 	ble.w	80012d6 <main+0x6e>
//		  if (printt < 20000){
			  if (tx_ready) {
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <main+0xf30>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <main+0xede>
				  send_uart_dma();
 800213c:	f7ff f824 	bl	8001188 <send_uart_dma>
				  tx_ready = 0;
 8002140:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <main+0xf30>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
//			  }
		  } else {

		  }
		  printt_then2 = printt;
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <main+0xf24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <main+0xf2c>)
 800214c:	6013      	str	r3, [r2, #0]
	  printt = HAL_GetTick();
 800214e:	f7ff b8c2 	b.w	80012d6 <main+0x6e>
 8002152:	bf00      	nop
 8002154:	20000458 	.word	0x20000458
 8002158:	200003e0 	.word	0x200003e0
 800215c:	20000448 	.word	0x20000448
 8002160:	200003e8 	.word	0x200003e8
 8002164:	2000044c 	.word	0x2000044c
 8002168:	40000400 	.word	0x40000400
 800216c:	200003b8 	.word	0x200003b8
 8002170:	200003bc 	.word	0x200003bc
 8002174:	200003cc 	.word	0x200003cc
 8002178:	200003d0 	.word	0x200003d0
 800217c:	20000418 	.word	0x20000418
 8002180:	2000041c 	.word	0x2000041c
 8002184:	200003b0 	.word	0x200003b0
 8002188:	200003b4 	.word	0x200003b4
 800218c:	2000038c 	.word	0x2000038c
 8002190:	20000390 	.word	0x20000390
 8002194:	20000394 	.word	0x20000394
 8002198:	20000018 	.word	0x20000018

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	@ 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	2230      	movs	r2, #48	@ 0x30
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 ff4d 	bl	800704a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <SystemClock_Config+0xc8>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <SystemClock_Config+0xc8>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <SystemClock_Config+0xc8>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <SystemClock_Config+0xcc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <SystemClock_Config+0xcc>)
 80021e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <SystemClock_Config+0xcc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002202:	2302      	movs	r3, #2
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002206:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800220c:	230c      	movs	r3, #12
 800220e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002210:	2360      	movs	r3, #96	@ 0x60
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002218:	2304      	movs	r3, #4
 800221a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fc51 	bl	8003ac8 <HAL_RCC_OscConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800222c:	f000 f9f4 	bl	8002618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002230:	230f      	movs	r3, #15
 8002232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002234:	2302      	movs	r3, #2
 8002236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800223c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2103      	movs	r1, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f001 feb3 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002258:	f000 f9de 	bl	8002618 <Error_Handler>
  }
}
 800225c:	bf00      	nop
 800225e:	3750      	adds	r7, #80	@ 0x50
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2224      	movs	r2, #36	@ 0x24
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fee5 	bl	800704a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <MX_TIM2_Init+0xa4>)
 800228a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800228e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <MX_TIM2_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <MX_TIM2_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <MX_TIM2_Init+0xa4>)
 800229e:	f04f 32ff 	mov.w	r2, #4294967295
 80022a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <MX_TIM2_Init+0xa4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <MX_TIM2_Init+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022b0:	2303      	movs	r3, #3
 80022b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022b8:	2301      	movs	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80022c0:	230a      	movs	r3, #10
 80022c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80022d0:	230a      	movs	r3, #10
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	4619      	mov	r1, r3
 80022da:	480d      	ldr	r0, [pc, #52]	@ (8002310 <MX_TIM2_Init+0xa4>)
 80022dc:	f002 f9a4 	bl	8004628 <HAL_TIM_Encoder_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022e6:	f000 f997 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4806      	ldr	r0, [pc, #24]	@ (8002310 <MX_TIM2_Init+0xa4>)
 80022f8:	f003 f84e 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002302:	f000 f989 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	3730      	adds	r7, #48	@ 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000020c 	.word	0x2000020c

08002314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	@ 0x38
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	615a      	str	r2, [r3, #20]
 8002342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002344:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002346:	4a33      	ldr	r2, [pc, #204]	@ (8002414 <MX_TIM3_Init+0x100>)
 8002348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800234a:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <MX_TIM3_Init+0xfc>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002356:	4b2e      	ldr	r3, [pc, #184]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800235c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800236a:	4829      	ldr	r0, [pc, #164]	@ (8002410 <MX_TIM3_Init+0xfc>)
 800236c:	f002 f804 	bl	8004378 <HAL_TIM_Base_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002376:	f000 f94f 	bl	8002618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002384:	4619      	mov	r1, r3
 8002386:	4822      	ldr	r0, [pc, #136]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002388:	f002 fc34 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002392:	f000 f941 	bl	8002618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002396:	481e      	ldr	r0, [pc, #120]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002398:	f002 f83d 	bl	8004416 <HAL_TIM_PWM_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023a2:	f000 f939 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ae:	f107 0320 	add.w	r3, r7, #32
 80023b2:	4619      	mov	r1, r3
 80023b4:	4816      	ldr	r0, [pc, #88]	@ (8002410 <MX_TIM3_Init+0xfc>)
 80023b6:	f002 ffef 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80023c0:	f000 f92a 	bl	8002618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c4:	2360      	movs	r3, #96	@ 0x60
 80023c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	4619      	mov	r1, r3
 80023da:	480d      	ldr	r0, [pc, #52]	@ (8002410 <MX_TIM3_Init+0xfc>)
 80023dc:	f002 fb48 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80023e6:	f000 f917 	bl	8002618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2204      	movs	r2, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4807      	ldr	r0, [pc, #28]	@ (8002410 <MX_TIM3_Init+0xfc>)
 80023f2:	f002 fb3d 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80023fc:	f000 f90c 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002400:	4803      	ldr	r0, [pc, #12]	@ (8002410 <MX_TIM3_Init+0xfc>)
 8002402:	f000 f9e5 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 8002406:	bf00      	nop
 8002408:	3738      	adds	r7, #56	@ 0x38
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000254 	.word	0x20000254
 8002414:	40000400 	.word	0x40000400

08002418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	@ 0x30
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	2224      	movs	r2, #36	@ 0x24
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fe0f 	bl	800704a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002436:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <MX_TIM4_Init+0xa4>)
 8002438:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800243a:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002448:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800244c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002454:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800245a:	2303      	movs	r3, #3
 800245c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800246a:	230a      	movs	r3, #10
 800246c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002472:	2301      	movs	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800247a:	230a      	movs	r3, #10
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	4619      	mov	r1, r3
 8002484:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 8002486:	f002 f8cf 	bl	8004628 <HAL_TIM_Encoder_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002490:	f000 f8c2 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <MX_TIM4_Init+0xa0>)
 80024a2:	f002 ff79 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024ac:	f000 f8b4 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	3730      	adds	r7, #48	@ 0x30
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000029c 	.word	0x2000029c
 80024bc:	40000800 	.word	0x40000800

080024c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <MX_USART1_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024cc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f8:	f002 ffd0 	bl	800549c <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f000 f889 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200002e4 	.word	0x200002e4
 8002510:	40011000 	.word	0x40011000

08002514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <MX_DMA_Init+0x3c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <MX_DMA_Init+0x3c>)
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <MX_DMA_Init+0x3c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2046      	movs	r0, #70	@ 0x46
 800253c:	f000 fcd7 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002540:	2046      	movs	r0, #70	@ 0x46
 8002542:	f000 fcf0 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <MX_GPIO_Init+0xbc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a27      	ldr	r2, [pc, #156]	@ (8002610 <MX_GPIO_Init+0xbc>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <MX_GPIO_Init+0xbc>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <MX_GPIO_Init+0xbc>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <MX_GPIO_Init+0xbc>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <MX_GPIO_Init+0xbc>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <MX_GPIO_Init+0xbc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4808      	ldr	r0, [pc, #32]	@ (8002614 <MX_GPIO_Init+0xc0>)
 80025f2:	f001 f8b5 	bl	8003760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2028      	movs	r0, #40	@ 0x28
 80025fc:	f000 fc77 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002600:	2028      	movs	r0, #40	@ 0x28
 8002602:	f000 fc90 	bl	8002f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002606:	bf00      	nop
 8002608:	3728      	adds	r7, #40	@ 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40020800 	.word	0x40020800

08002618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <Error_Handler+0x8>

08002624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a0f      	ldr	r2, [pc, #60]	@ (8002670 <HAL_MspInit+0x4c>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_MspInit+0x4c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_MspInit+0x4c>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_MspInit+0x4c>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002694:	d134      	bne.n	8002700 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a37      	ldr	r2, [pc, #220]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4b31      	ldr	r3, [pc, #196]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a30      	ldr	r2, [pc, #192]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026ce:	2303      	movs	r3, #3
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026de:	2301      	movs	r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4825      	ldr	r0, [pc, #148]	@ (8002780 <HAL_TIM_Encoder_MspInit+0x10c>)
 80026ea:	f001 f839 	bl	8003760 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	201c      	movs	r0, #28
 80026f4:	f000 fbfb 	bl	8002eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026f8:	201c      	movs	r0, #28
 80026fa:	f000 fc14 	bl	8002f26 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026fe:	e038      	b.n	8002772 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x110>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d133      	bne.n	8002772 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a13      	ldr	r2, [pc, #76]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_TIM_Encoder_MspInit+0x108>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23c0      	movs	r3, #192	@ 0xc0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002752:	2302      	movs	r3, #2
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	480a      	ldr	r0, [pc, #40]	@ (8002788 <HAL_TIM_Encoder_MspInit+0x114>)
 800275e:	f000 ffff 	bl	8003760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	201e      	movs	r0, #30
 8002768:	f000 fbc1 	bl	8002eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800276c:	201e      	movs	r0, #30
 800276e:	f000 fbda 	bl	8002f26 <HAL_NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3730      	adds	r7, #48	@ 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000
 8002784:	40000800 	.word	0x40000800
 8002788:	40020400 	.word	0x40020400

0800278c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0b      	ldr	r2, [pc, #44]	@ (80027c8 <HAL_TIM_Base_MspInit+0x3c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10d      	bne.n	80027ba <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <HAL_TIM_Base_MspInit+0x40>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <HAL_TIM_MspPostInit+0x68>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d11d      	bne.n	800282e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_TIM_MspPostInit+0x6c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_TIM_MspPostInit+0x6c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_TIM_MspPostInit+0x6c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800280e:	23c0      	movs	r3, #192	@ 0xc0
 8002810:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800281e:	2302      	movs	r3, #2
 8002820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	@ (8002840 <HAL_TIM_MspPostInit+0x70>)
 800282a:	f000 ff99 	bl	8003760 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800282e:	bf00      	nop
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40000400 	.word	0x40000400
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <HAL_UART_MspInit+0xf0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d162      	bne.n	800292c <HAL_UART_MspInit+0xe8>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	4b30      	ldr	r3, [pc, #192]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	4a2b      	ldr	r2, [pc, #172]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6313      	str	r3, [r2, #48]	@ 0x30
 8002892:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_UART_MspInit+0xf4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800289e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b0:	2307      	movs	r3, #7
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	4820      	ldr	r0, [pc, #128]	@ (800293c <HAL_UART_MspInit+0xf8>)
 80028bc:	f000 ff50 	bl	8003760 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028c2:	4a20      	ldr	r2, [pc, #128]	@ (8002944 <HAL_UART_MspInit+0x100>)
 80028c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028d0:	2240      	movs	r2, #64	@ 0x40
 80028d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002900:	480f      	ldr	r0, [pc, #60]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 8002902:	f000 fb2b 	bl	8002f5c <HAL_DMA_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800290c:	f7ff fe84 	bl	8002618 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <HAL_UART_MspInit+0xfc>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	2025      	movs	r0, #37	@ 0x25
 8002922:	f000 fae4 	bl	8002eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002926:	2025      	movs	r0, #37	@ 0x25
 8002928:	f000 fafd 	bl	8002f26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40011000 	.word	0x40011000
 8002938:	40023800 	.word	0x40023800
 800293c:	40020000 	.word	0x40020000
 8002940:	2000032c 	.word	0x2000032c
 8002944:	400264b8 	.word	0x400264b8

08002948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <NMI_Handler+0x4>

08002950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <HardFault_Handler+0x4>

08002958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <MemManage_Handler+0x4>

08002960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <UsageFault_Handler+0x4>

08002970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299e:	f000 f987 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029ac:	4802      	ldr	r0, [pc, #8]	@ (80029b8 <TIM2_IRQHandler+0x10>)
 80029ae:	f001 ff6f 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000020c 	.word	0x2000020c

080029bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029c0:	4802      	ldr	r0, [pc, #8]	@ (80029cc <TIM4_IRQHandler+0x10>)
 80029c2:	f001 ff65 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000029c 	.word	0x2000029c

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <USART1_IRQHandler+0x10>)
 80029d6:	f002 fe21 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200002e4 	.word	0x200002e4

080029e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80029ec:	f001 f854 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <DMA2_Stream7_IRQHandler+0x10>)
 80029fa:	f000 fc47 	bl	800328c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000032c 	.word	0x2000032c

08002a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a22:	f004 fb65 	bl	80070f0 <__errno>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2216      	movs	r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_exit>:

void _exit (int status)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe7 	bl	8002a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
  }

  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e009      	b.n	8002aae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf1      	blt.n	8002a9a <_write+0x12>
  }
  return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_close>:

int _close(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_isatty>:

int _isatty(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b00:	2301      	movs	r3, #1
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f004 faca 	bl	80070f0 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20020000 	.word	0x20020000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	200004c0 	.word	0x200004c0
 8002b90:	20000618 	.word	0x20000618

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bbc:	f7ff ffea 	bl	8002b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be6:	f004 fa89 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fe fb3d 	bl	8001268 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002bfc:	0800960c 	.word	0x0800960c
  ldr r2, =_sbss
 8002c00:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c04:	20000614 	.word	0x20000614

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f94f 	bl	8002ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fcf0 	bl	8002624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f967 	bl	8002f42 <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f92f 	bl	8002eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000001c 	.word	0x2000001c
 8002ca8:	20000024 	.word	0x20000024
 8002cac:	20000020 	.word	0x20000020

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000024 	.word	0x20000024
 8002cd4:	200004c4 	.word	0x200004c4

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200004c4 	.word	0x200004c4

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000024 	.word	0x20000024

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	@ (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	@ (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	@ (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ea4:	d301      	bcc.n	8002eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00f      	b.n	8002eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <SysTick_Config+0x40>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f7ff ff8e 	bl	8002dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <SysTick_Config+0x40>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec2:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <SysTick_Config+0x40>)
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000e010 	.word	0xe000e010

08002ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff29 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff3e 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff8e 	bl	8002e2c <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff5d 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff31 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa2 	bl	8002e94 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff feb6 	bl	8002cd8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e099      	b.n	80030ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f98:	e00f      	b.n	8002fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9a:	f7ff fe9d 	bl	8002cd8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d908      	bls.n	8002fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e078      	b.n	80030ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e8      	bne.n	8002f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4b38      	ldr	r3, [pc, #224]	@ (80030b4 <HAL_DMA_Init+0x158>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	2b04      	cmp	r3, #4
 8003012:	d107      	bne.n	8003024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	4313      	orrs	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0307 	bic.w	r3, r3, #7
 800303a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	2b04      	cmp	r3, #4
 800304c:	d117      	bne.n	800307e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00e      	beq.n	800307e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fb01 	bl	8003668 <DMA_CheckFifoParam>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800307a:	2301      	movs	r3, #1
 800307c:	e016      	b.n	80030ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fab8 	bl	80035fc <DMA_CalcBaseAndBitshift>
 800308c:	4603      	mov	r3, r0
 800308e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	223f      	movs	r2, #63	@ 0x3f
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	f010803f 	.word	0xf010803f

080030b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_DMA_Start_IT+0x26>
 80030da:	2302      	movs	r3, #2
 80030dc:	e040      	b.n	8003160 <HAL_DMA_Start_IT+0xa8>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12f      	bne.n	8003152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fa4a 	bl	80035a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	223f      	movs	r2, #63	@ 0x3f
 8003112:	409a      	lsls	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0216 	orr.w	r2, r2, #22
 8003126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0208 	orr.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e005      	b.n	800315e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003176:	f7ff fdaf 	bl	8002cd8 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d008      	beq.n	800319a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e052      	b.n	8003240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0216 	bic.w	r2, r2, #22
 80031a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_DMA_Abort+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0208 	bic.w	r2, r2, #8
 80031d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ea:	e013      	b.n	8003214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ec:	f7ff fd74 	bl	8002cd8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d90c      	bls.n	8003214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e015      	b.n	8003240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e4      	bne.n	80031ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	223f      	movs	r2, #63	@ 0x3f
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00c      	b.n	8003280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2205      	movs	r2, #5
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003298:	4b8e      	ldr	r3, [pc, #568]	@ (80034d4 <HAL_DMA_IRQHandler+0x248>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a8e      	ldr	r2, [pc, #568]	@ (80034d8 <HAL_DMA_IRQHandler+0x24c>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0a9b      	lsrs	r3, r3, #10
 80032a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	2208      	movs	r2, #8
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	2208      	movs	r2, #8
 80032e6:	409a      	lsls	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2204      	movs	r2, #4
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003350:	2204      	movs	r2, #4
 8003352:	409a      	lsls	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	2210      	movs	r2, #16
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d043      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d03c      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	2210      	movs	r2, #16
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d024      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
 80033ba:	e01f      	b.n	80033fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
 80033cc:	e016      	b.n	80033fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0208 	bic.w	r2, r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003400:	2220      	movs	r2, #32
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 808f 	beq.w	800352c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8087 	beq.w	800352c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	2220      	movs	r2, #32
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b05      	cmp	r3, #5
 8003434:	d136      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0216 	bic.w	r2, r2, #22
 8003444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_DMA_IRQHandler+0x1da>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0208 	bic.w	r2, r2, #8
 8003474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	223f      	movs	r2, #63	@ 0x3f
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003496:	2b00      	cmp	r3, #0
 8003498:	d07e      	beq.n	8003598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
        }
        return;
 80034a2:	e079      	b.n	8003598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d031      	beq.n	800352c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
 80034d0:	e02c      	b.n	800352c <HAL_DMA_IRQHandler+0x2a0>
 80034d2:	bf00      	nop
 80034d4:	2000001c 	.word	0x2000001c
 80034d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
 80034ec:	e01e      	b.n	800352c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0210 	bic.w	r2, r2, #16
 800350a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	2b00      	cmp	r3, #0
 8003532:	d032      	beq.n	800359a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2205      	movs	r2, #5
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	3301      	adds	r3, #1
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	d307      	bcc.n	8003574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f2      	bne.n	8003558 <HAL_DMA_IRQHandler+0x2cc>
 8003572:	e000      	b.n	8003576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
 8003596:	e000      	b.n	800359a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003598:	bf00      	nop
    }
  }
}
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d108      	bne.n	80035e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035de:	e007      	b.n	80035f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3b10      	subs	r3, #16
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <DMA_CalcBaseAndBitshift+0x64>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003616:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <DMA_CalcBaseAndBitshift+0x68>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d909      	bls.n	800363e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	1d1a      	adds	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	659a      	str	r2, [r3, #88]	@ 0x58
 800363c:	e007      	b.n	800364e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	aaaaaaab 	.word	0xaaaaaaab
 8003664:	08009280 	.word	0x08009280

08003668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11f      	bne.n	80036c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d856      	bhi.n	8003736 <DMA_CheckFifoParam+0xce>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <DMA_CheckFifoParam+0x28>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a1 	.word	0x080036a1
 8003694:	080036b3 	.word	0x080036b3
 8003698:	080036a1 	.word	0x080036a1
 800369c:	08003737 	.word	0x08003737
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d046      	beq.n	800373a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e043      	b.n	800373a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ba:	d140      	bne.n	800373e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c0:	e03d      	b.n	800373e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ca:	d121      	bne.n	8003710 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d837      	bhi.n	8003742 <DMA_CheckFifoParam+0xda>
 80036d2:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <DMA_CheckFifoParam+0x70>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036ef 	.word	0x080036ef
 80036e0:	080036e9 	.word	0x080036e9
 80036e4:	08003701 	.word	0x08003701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e030      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d025      	beq.n	8003746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e022      	b.n	8003746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003708:	d11f      	bne.n	800374a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370e:	e01c      	b.n	800374a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d903      	bls.n	800371e <DMA_CheckFifoParam+0xb6>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d003      	beq.n	8003724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800371c:	e018      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      break;
 8003722:	e015      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e00b      	b.n	800374e <DMA_CheckFifoParam+0xe6>
      break;
 8003736:	bf00      	nop
 8003738:	e00a      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e008      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e006      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e004      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;   
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <DMA_CheckFifoParam+0xe8>
      break;
 800374e:	bf00      	nop
    }
  } 
  
  return status; 
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	@ 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e159      	b.n	8003a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800377c:	2201      	movs	r2, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	f040 8148 	bne.w	8003a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d005      	beq.n	80037b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d130      	bne.n	8003814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 0201 	and.w	r2, r3, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d017      	beq.n	8003850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d123      	bne.n	80038a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	08da      	lsrs	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3208      	adds	r2, #8
 8003864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	220f      	movs	r2, #15
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	08da      	lsrs	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3208      	adds	r2, #8
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0203 	and.w	r2, r3, #3
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a2 	beq.w	8003a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b57      	ldr	r3, [pc, #348]	@ (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038f6:	4b54      	ldr	r3, [pc, #336]	@ (8003a48 <HAL_GPIO_Init+0x2e8>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003902:	4a52      	ldr	r2, [pc, #328]	@ (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	3302      	adds	r3, #2
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	220f      	movs	r2, #15
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a49      	ldr	r2, [pc, #292]	@ (8003a50 <HAL_GPIO_Init+0x2f0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x202>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a48      	ldr	r2, [pc, #288]	@ (8003a54 <HAL_GPIO_Init+0x2f4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x1fe>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a47      	ldr	r2, [pc, #284]	@ (8003a58 <HAL_GPIO_Init+0x2f8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x1fa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a46      	ldr	r2, [pc, #280]	@ (8003a5c <HAL_GPIO_Init+0x2fc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x1f6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a45      	ldr	r2, [pc, #276]	@ (8003a60 <HAL_GPIO_Init+0x300>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x1f2>
 800394e:	2304      	movs	r3, #4
 8003950:	e008      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003952:	2307      	movs	r3, #7
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003956:	2303      	movs	r3, #3
 8003958:	e004      	b.n	8003964 <HAL_GPIO_Init+0x204>
 800395a:	2302      	movs	r3, #2
 800395c:	e002      	b.n	8003964 <HAL_GPIO_Init+0x204>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_GPIO_Init+0x204>
 8003962:	2300      	movs	r3, #0
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f002 0203 	and.w	r2, r2, #3
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	4093      	lsls	r3, r2
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003974:	4935      	ldr	r1, [pc, #212]	@ (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d0:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039d6:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a00:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a24:	4a0f      	ldr	r2, [pc, #60]	@ (8003a64 <HAL_GPIO_Init+0x304>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	f67f aea2 	bls.w	800377c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3724      	adds	r7, #36	@ 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40013c00 	.word	0x40013c00

08003a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e001      	b.n	8003a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aae:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fbb4 	bl	8001224 <HAL_GPIO_EXTI_Callback>
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e267      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d075      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ae6:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b85      	ldr	r3, [pc, #532]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d112      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afe:	4b82      	ldr	r3, [pc, #520]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b0a:	d10b      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05b      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x108>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d157      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e242      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x74>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x98>
 8003b46:	4b70      	ldr	r3, [pc, #448]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b6d      	ldr	r3, [pc, #436]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6c      	ldr	r2, [pc, #432]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b60:	4b69      	ldr	r3, [pc, #420]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a68      	ldr	r2, [pc, #416]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff f8aa 	bl	8002cd8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7ff f8a6 	bl	8002cd8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	@ 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e207      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0xc0>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7ff f896 	bl	8002cd8 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7ff f892 	bl	8002cd8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1f3      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	4b51      	ldr	r3, [pc, #324]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xe8>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bde:	4b4a      	ldr	r3, [pc, #296]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b47      	ldr	r3, [pc, #284]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d11c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b44      	ldr	r3, [pc, #272]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	4b41      	ldr	r3, [pc, #260]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x152>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1c7      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4937      	ldr	r1, [pc, #220]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e03a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b34      	ldr	r3, [pc, #208]	@ (8003d0c <HAL_RCC_OscConfig+0x244>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7ff f84b 	bl	8002cd8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c46:	f7ff f847 	bl	8002cd8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1a8      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4925      	ldr	r1, [pc, #148]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	4b24      	ldr	r3, [pc, #144]	@ (8003d0c <HAL_RCC_OscConfig+0x244>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7ff f82a 	bl	8002cd8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7ff f826 	bl	8002cd8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e187      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d036      	beq.n	8003d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_RCC_OscConfig+0x248>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7ff f80a 	bl	8002cd8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7ff f806 	bl	8002cd8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e167      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x200>
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce8:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x248>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cee:	f7fe fff3 	bl	8002cd8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00e      	b.n	8003d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe ffef 	bl	8002cd8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d907      	bls.n	8003d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e150      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	42470000 	.word	0x42470000
 8003d10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b88      	ldr	r3, [pc, #544]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8097 	beq.w	8003e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b81      	ldr	r3, [pc, #516]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b7d      	ldr	r3, [pc, #500]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	4a7c      	ldr	r2, [pc, #496]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b77      	ldr	r3, [pc, #476]	@ (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b74      	ldr	r3, [pc, #464]	@ (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a73      	ldr	r2, [pc, #460]	@ (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe ffaf 	bl	8002cd8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe ffab 	bl	8002cd8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e10c      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b6a      	ldr	r3, [pc, #424]	@ (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2ea>
 8003da4:	4b64      	ldr	r3, [pc, #400]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a63      	ldr	r2, [pc, #396]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	e01c      	b.n	8003dec <HAL_RCC_OscConfig+0x324>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x30c>
 8003dba:	4b5f      	ldr	r3, [pc, #380]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	4a5b      	ldr	r2, [pc, #364]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0x324>
 8003dd4:	4b58      	ldr	r3, [pc, #352]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	4a57      	ldr	r2, [pc, #348]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de0:	4b55      	ldr	r3, [pc, #340]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	4a54      	ldr	r2, [pc, #336]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003de6:	f023 0304 	bic.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe ff70 	bl	8002cd8 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe ff6c 	bl	8002cd8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0cb      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	4b49      	ldr	r3, [pc, #292]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ee      	beq.n	8003dfc <HAL_RCC_OscConfig+0x334>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fe ff5a 	bl	8002cd8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe ff56 	bl	8002cd8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0b5      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ee      	bne.n	8003e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	4a38      	ldr	r2, [pc, #224]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80a1 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e66:	4b34      	ldr	r3, [pc, #208]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d05c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d141      	bne.n	8003efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b31      	ldr	r3, [pc, #196]	@ (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe ff2a 	bl	8002cd8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fe ff26 	bl	8002cd8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e087      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b27      	ldr	r3, [pc, #156]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	491b      	ldr	r1, [pc, #108]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fe feff 	bl	8002cd8 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe fefb 	bl	8002cd8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e05c      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x416>
 8003efc:	e054      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fee8 	bl	8002cd8 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fe fee4 	bl	8002cd8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e045      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x444>
 8003f2a:	e03d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e038      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <HAL_RCC_OscConfig+0x4ec>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d028      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d121      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d11a      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fe fe16 	bl	8002cd8 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe fe12 	bl	8002cd8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fd76 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	08009268 	.word	0x08009268
 800417c:	2000001c 	.word	0x2000001c
 8004180:	20000020 	.word	0x20000020

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b090      	sub	sp, #64	@ 0x40
 800418a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419c:	4b59      	ldr	r3, [pc, #356]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d00d      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x40>
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	f200 80a1 	bhi.w	80042f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x34>
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d003      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x3a>
 80041b6:	e09b      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b53      	ldr	r3, [pc, #332]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041bc:	e09b      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041be:	4b53      	ldr	r3, [pc, #332]	@ (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041c2:	e098      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d028      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041da:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	099b      	lsrs	r3, r3, #6
 80041e0:	2200      	movs	r2, #0
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041ec:	2100      	movs	r1, #0
 80041ee:	4b47      	ldr	r3, [pc, #284]	@ (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041f0:	fb03 f201 	mul.w	r2, r3, r1
 80041f4:	2300      	movs	r3, #0
 80041f6:	fb00 f303 	mul.w	r3, r0, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	4a43      	ldr	r2, [pc, #268]	@ (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004204:	460a      	mov	r2, r1
 8004206:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800420a:	4413      	add	r3, r2
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004210:	2200      	movs	r2, #0
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	61fa      	str	r2, [r7, #28]
 8004216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800421e:	f7fc fd1b 	bl	8000c58 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4613      	mov	r3, r2
 8004228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800422a:	e053      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422c:	4b35      	ldr	r3, [pc, #212]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	2200      	movs	r2, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	617a      	str	r2, [r7, #20]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800423e:	f04f 0b00 	mov.w	fp, #0
 8004242:	4652      	mov	r2, sl
 8004244:	465b      	mov	r3, fp
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	0159      	lsls	r1, r3, #5
 8004250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004254:	0150      	lsls	r0, r2, #5
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	ebb2 080a 	subs.w	r8, r2, sl
 800425e:	eb63 090b 	sbc.w	r9, r3, fp
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800426e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004276:	ebb2 0408 	subs.w	r4, r2, r8
 800427a:	eb63 0509 	sbc.w	r5, r3, r9
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	00eb      	lsls	r3, r5, #3
 8004288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428c:	00e2      	lsls	r2, r4, #3
 800428e:	4614      	mov	r4, r2
 8004290:	461d      	mov	r5, r3
 8004292:	eb14 030a 	adds.w	r3, r4, sl
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	eb45 030b 	adc.w	r3, r5, fp
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042aa:	4629      	mov	r1, r5
 80042ac:	028b      	lsls	r3, r1, #10
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b4:	4621      	mov	r1, r4
 80042b6:	028a      	lsls	r2, r1, #10
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042be:	2200      	movs	r2, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	60fa      	str	r2, [r7, #12]
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	f7fc fcc6 	bl	8000c58 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x184>)
 80042f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3740      	adds	r7, #64	@ 0x40
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	00f42400 	.word	0x00f42400
 800430c:	017d7840 	.word	0x017d7840

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_RCC_GetHCLKFreq+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000001c 	.word	0x2000001c

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800432c:	f7ff fff0 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	@ (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	08009278 	.word	0x08009278

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004354:	f7ff ffdc 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0b5b      	lsrs	r3, r3, #13
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	@ (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	08009278 	.word	0x08009278

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe f9f4 	bl	800278c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 fd16 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e041      	b.n	80044ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f839 	bl	80044b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 fcc7 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x24>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start+0x3e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e068      	b.n	800460c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0x82>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0x92>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fee6 	bl	800534c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a23      	ldr	r2, [pc, #140]	@ (8004614 <HAL_TIM_PWM_Start+0x14c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d107      	bne.n	800459a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004598:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_TIM_PWM_Start+0x14c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ac:	d013      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <HAL_TIM_PWM_Start+0x150>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a17      	ldr	r2, [pc, #92]	@ (800461c <HAL_TIM_PWM_Start+0x154>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <HAL_TIM_PWM_Start+0x158>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	@ (8004624 <HAL_TIM_PWM_Start+0x15c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e097      	b.n	800476c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fe f80f 	bl	8002674 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466c:	f023 0307 	bic.w	r3, r3, #7
 8004670:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f000 fbb3 	bl	8004de8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	4313      	orrs	r3, r2
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80046c8:	f023 030c 	bic.w	r3, r3, #12
 80046cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	4313      	orrs	r3, r2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	011a      	lsls	r2, r3, #4
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	031b      	lsls	r3, r3, #12
 80046f8:	4313      	orrs	r3, r2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	4313      	orrs	r3, r2
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004784:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800478c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004794:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800479c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d102      	bne.n	80047b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047aa:	7b7b      	ldrb	r3, [r7, #13]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d001      	beq.n	80047b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e069      	b.n	8004888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047c4:	e031      	b.n	800482a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d110      	bne.n	80047ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047cc:	7bbb      	ldrb	r3, [r7, #14]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d102      	bne.n	80047d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047d2:	7b3b      	ldrb	r3, [r7, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e055      	b.n	8004888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ec:	e01d      	b.n	800482a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d108      	bne.n	8004806 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fa:	7b7b      	ldrb	r3, [r7, #13]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d102      	bne.n	8004806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004800:	7b3b      	ldrb	r3, [r7, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e03e      	b.n	8004888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_TIM_Encoder_Start+0xc4>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d008      	beq.n	8004848 <HAL_TIM_Encoder_Start+0xd4>
 8004836:	e00f      	b.n	8004858 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd83 	bl	800534c <TIM_CCxChannelCmd>
      break;
 8004846:	e016      	b.n	8004876 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	2104      	movs	r1, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fd7b 	bl	800534c <TIM_CCxChannelCmd>
      break;
 8004856:	e00e      	b.n	8004876 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fd73 	bl	800534c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	2104      	movs	r1, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fd6c 	bl	800534c <TIM_CCxChannelCmd>
      break;
 8004874:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa65 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa57 	bl	8004d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa68 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa3f 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa31 	bl	8004d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa42 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa19 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa0b 	bl	8004d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa1c 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9f3 	bl	8004daa <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9e5 	bl	8004d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9f6 	bl	8004dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9c3 	bl	8004d82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd34 	bl	8005488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9c7 	bl	8004dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fd06 	bl	8005474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ae      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	f200 809f 	bhi.w	8004bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004bdd 	.word	0x08004bdd
 8004aac:	08004bdd 	.word	0x08004bdd
 8004ab0:	08004bdd 	.word	0x08004bdd
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004bdd 	.word	0x08004bdd
 8004abc:	08004bdd 	.word	0x08004bdd
 8004ac0:	08004bdd 	.word	0x08004bdd
 8004ac4:	08004b5b 	.word	0x08004b5b
 8004ac8:	08004bdd 	.word	0x08004bdd
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	08004bdd 	.word	0x08004bdd
 8004ad4:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fa0e 	bl	8004f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e064      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa54 	bl	8004fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]
      break;
 8004b58:	e043      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa9f 	bl	80050a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	61da      	str	r2, [r3, #28]
      break;
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fae9 	bl	8005178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x1c>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0b4      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c48:	d03e      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4e:	f200 8087 	bhi.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x172>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	d87f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b70      	cmp	r3, #112	@ 0x70
 8004c62:	d01a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xa6>
 8004c64:	2b70      	cmp	r3, #112	@ 0x70
 8004c66:	d87b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b60      	cmp	r3, #96	@ 0x60
 8004c6a:	d050      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x11a>
 8004c6c:	2b60      	cmp	r3, #96	@ 0x60
 8004c6e:	d877      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b50      	cmp	r3, #80	@ 0x50
 8004c72:	d03c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	2b50      	cmp	r3, #80	@ 0x50
 8004c76:	d873      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d058      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x13a>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d86f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b30      	cmp	r3, #48	@ 0x30
 8004c82:	d064      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b30      	cmp	r3, #48	@ 0x30
 8004c86:	d86b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d060      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d867      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d05a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	e062      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	f000 fb2f 	bl	800530c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	f000 fb18 	bl	800530c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cea:	609a      	str	r2, [r3, #8]
      break;
 8004cec:	e03c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 fa8c 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2150      	movs	r1, #80	@ 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fae5 	bl	80052d6 <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e02c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 faab 	bl	8005276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2160      	movs	r1, #96	@ 0x60
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fad5 	bl	80052d6 <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 fa6c 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	@ 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fac5 	bl	80052d6 <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 fabc 	bl	80052d6 <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8004ee4 <TIM_Base_SetConfig+0xfc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a37      	ldr	r2, [pc, #220]	@ (8004ee8 <TIM_Base_SetConfig+0x100>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a36      	ldr	r2, [pc, #216]	@ (8004eec <TIM_Base_SetConfig+0x104>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a35      	ldr	r2, [pc, #212]	@ (8004ef0 <TIM_Base_SetConfig+0x108>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee4 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d017      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a28      	ldr	r2, [pc, #160]	@ (8004ee8 <TIM_Base_SetConfig+0x100>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	@ (8004eec <TIM_Base_SetConfig+0x104>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00f      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a26      	ldr	r2, [pc, #152]	@ (8004ef0 <TIM_Base_SetConfig+0x108>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	@ (8004ef4 <TIM_Base_SetConfig+0x10c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a24      	ldr	r2, [pc, #144]	@ (8004ef8 <TIM_Base_SetConfig+0x110>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a23      	ldr	r2, [pc, #140]	@ (8004efc <TIM_Base_SetConfig+0x114>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee4 <TIM_Base_SetConfig+0xfc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	611a      	str	r2, [r3, #16]
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800

08004f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 0201 	bic.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0302 	bic.w	r3, r3, #2
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc8 <TIM_OC1_SetConfig+0xc8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0308 	bic.w	r3, r3, #8
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <TIM_OC1_SetConfig+0xc8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000

08004fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0210 	bic.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0320 	bic.w	r3, r3, #32
 8005016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <TIM_OC2_SetConfig+0xd4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10d      	bne.n	8005048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005046:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <TIM_OC2_SetConfig+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d113      	bne.n	8005078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000

080050a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005174 <TIM_OC3_SetConfig+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10d      	bne.n	800511e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800511c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a14      	ldr	r2, [pc, #80]	@ (8005174 <TIM_OC3_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d113      	bne.n	800514e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40010000 	.word	0x40010000

08005178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a10      	ldr	r2, [pc, #64]	@ (8005214 <TIM_OC4_SetConfig+0x9c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d109      	bne.n	80051ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000

08005218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 030a 	bic.w	r3, r3, #10
 8005254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0210 	bic.w	r2, r3, #16
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f043 0307 	orr.w	r3, r3, #7
 80052f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	431a      	orrs	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	609a      	str	r2, [r3, #8]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2201      	movs	r2, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1a      	ldr	r2, [r3, #32]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	43db      	mvns	r3, r3
 800536e:	401a      	ands	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e050      	b.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d013      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a16      	ldr	r2, [pc, #88]	@ (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a15      	ldr	r2, [pc, #84]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10c      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800542c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40014000 	.word	0x40014000

08005474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e042      	b.n	8005534 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd f9be 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	@ 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fdc1 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	@ 0x30
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	d156      	bne.n	8005604 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_UART_Transmit_DMA+0x26>
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e04f      	b.n	8005606 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	88fa      	ldrh	r2, [r7, #6]
 8005570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	88fa      	ldrh	r2, [r7, #6]
 8005576:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2221      	movs	r2, #33	@ 0x21
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <HAL_UART_Transmit_DMA+0xd4>)
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	4a20      	ldr	r2, [pc, #128]	@ (8005614 <HAL_UART_Transmit_DMA+0xd8>)
 8005594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	4a1f      	ldr	r2, [pc, #124]	@ (8005618 <HAL_UART_Transmit_DMA+0xdc>)
 800559c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a2:	2200      	movs	r2, #0
 80055a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	461a      	mov	r2, r3
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	f7fd fd7b 	bl	80030b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	617b      	str	r3, [r7, #20]
   return(result);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6a39      	ldr	r1, [r7, #32]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3730      	adds	r7, #48	@ 0x30
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08005b95 	.word	0x08005b95
 8005614:	08005c2f 	.word	0x08005c2f
 8005618:	08005c4b 	.word	0x08005c4b

0800561c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b0ba      	sub	sp, #232	@ 0xe8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800565a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_UART_IRQHandler+0x66>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc36 	bl	8005eec <UART_Receive_IT>
      return;
 8005680:	e25b      	b.n	8005b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80de 	beq.w	8005848 <HAL_UART_IRQHandler+0x22c>
 800568c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80d1 	beq.w	8005848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xae>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_UART_IRQHandler+0xd2>
 80056d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f043 0202 	orr.w	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
 80056fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d011      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f043 0208 	orr.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 81f2 	beq.w	8005b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_UART_IRQHandler+0x14e>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fbc1 	bl	8005eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005774:	2b40      	cmp	r3, #64	@ 0x40
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_UART_IRQHandler+0x17a>
 800578e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d04f      	beq.n	8005836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fac9 	bl	8005d2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a6:	2b40      	cmp	r3, #64	@ 0x40
 80057a8:	d141      	bne.n	800582e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1d9      	bne.n	80057aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d013      	beq.n	8005826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005802:	4a7e      	ldr	r2, [pc, #504]	@ (80059fc <HAL_UART_IRQHandler+0x3e0>)
 8005804:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd fd1c 	bl	8003248 <HAL_DMA_Abort_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005820:	4610      	mov	r0, r2
 8005822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	e00e      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f99e 	bl	8005b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e00a      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f99a 	bl	8005b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e006      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f996 	bl	8005b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005842:	e175      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	bf00      	nop
    return;
 8005846:	e173      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 814f 	bne.w	8005af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8148 	beq.w	8005af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8141 	beq.w	8005af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b40      	cmp	r3, #64	@ 0x40
 8005890:	f040 80b6 	bne.w	8005a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8145 	beq.w	8005b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058b2:	429a      	cmp	r2, r3
 80058b4:	f080 813e 	bcs.w	8005b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ca:	f000 8088 	beq.w	80059de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1d9      	bne.n	80058ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800592a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800593e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e1      	bne.n	800591a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3314      	adds	r3, #20
 800595c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800596c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800597a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e3      	bne.n	8005956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80059c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e3      	bne.n	800599c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd fbc5 	bl	8003168 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8c1 	bl	8005b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059fa:	e09b      	b.n	8005b34 <HAL_UART_IRQHandler+0x518>
 80059fc:	08005df5 	.word	0x08005df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 808e 	beq.w	8005b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8089 	beq.w	8005b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e3      	bne.n	8005a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0310 	bic.w	r3, r3, #16
 8005aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ac8:	61fa      	str	r2, [r7, #28]
 8005aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f847 	bl	8005b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aee:	e023      	b.n	8005b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d009      	beq.n	8005b10 <HAL_UART_IRQHandler+0x4f4>
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f987 	bl	8005e1c <UART_Transmit_IT>
    return;
 8005b0e:	e014      	b.n	8005b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00e      	beq.n	8005b3a <HAL_UART_IRQHandler+0x51e>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f9c7 	bl	8005ebc <UART_EndTransmit_IT>
    return;
 8005b2e:	e004      	b.n	8005b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b38:	bf00      	nop
  }
}
 8005b3a:	37e8      	adds	r7, #232	@ 0xe8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b090      	sub	sp, #64	@ 0x40
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d137      	bne.n	8005c20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e5      	bne.n	8005bb6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c0a:	61fa      	str	r2, [r7, #28]
 8005c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69b9      	ldr	r1, [r7, #24]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	617b      	str	r3, [r7, #20]
   return(result);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c1e:	e002      	b.n	8005c26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005c22:	f7fb fa9b 	bl	800115c <HAL_UART_TxCpltCallback>
}
 8005c26:	bf00      	nop
 8005c28:	3740      	adds	r7, #64	@ 0x40
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff ff7f 	bl	8005b40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b21      	cmp	r3, #33	@ 0x21
 8005c7c:	d108      	bne.n	8005c90 <UART_DMAError+0x46>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	f000 f827 	bl	8005cde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b40      	cmp	r3, #64	@ 0x40
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b22      	cmp	r3, #34	@ 0x22
 8005cb0:	d108      	bne.n	8005cc4 <UART_DMAError+0x7a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005cbe:	68b8      	ldr	r0, [r7, #8]
 8005cc0:	f000 f835 	bl	8005d2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc8:	f043 0210 	orr.w	r2, r3, #16
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd0:	68b8      	ldr	r0, [r7, #8]
 8005cd2:	f7ff ff49 	bl	8005b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b089      	sub	sp, #36	@ 0x24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	61ba      	str	r2, [r7, #24]
 8005d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005d22:	bf00      	nop
 8005d24:	3724      	adds	r7, #36	@ 0x24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b095      	sub	sp, #84	@ 0x54
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	330c      	adds	r3, #12
 8005d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d56:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e5      	bne.n	8005d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3314      	adds	r3, #20
 8005d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3314      	adds	r3, #20
 8005d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e5      	bne.n	8005d6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d119      	bne.n	8005dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc6:	61ba      	str	r2, [r7, #24]
 8005dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005de8:	bf00      	nop
 8005dea:	3754      	adds	r7, #84	@ 0x54
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff feaa 	bl	8005b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b21      	cmp	r3, #33	@ 0x21
 8005e2e:	d13e      	bne.n	8005eae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e38:	d114      	bne.n	8005e64 <UART_Transmit_IT+0x48>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d110      	bne.n	8005e64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	1c9a      	adds	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]
 8005e62:	e008      	b.n	8005e76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6211      	str	r1, [r2, #32]
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4619      	mov	r1, r3
 8005e84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb f93d 	bl	800115c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08c      	sub	sp, #48	@ 0x30
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b22      	cmp	r3, #34	@ 0x22
 8005efe:	f040 80ae 	bne.w	800605e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0a:	d117      	bne.n	8005f3c <UART_Receive_IT+0x50>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d113      	bne.n	8005f3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f34:	1c9a      	adds	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f3a:	e026      	b.n	8005f8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d007      	beq.n	8005f60 <UART_Receive_IT+0x74>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <UART_Receive_IT+0x82>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e008      	b.n	8005f80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4619      	mov	r1, r3
 8005f98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d15d      	bne.n	800605a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0220 	bic.w	r2, r2, #32
 8005fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d135      	bne.n	8006050 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600a:	623a      	str	r2, [r7, #32]
 800600c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	61bb      	str	r3, [r7, #24]
   return(result);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d10a      	bne.n	8006042 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fd97 	bl	8005b7c <HAL_UARTEx_RxEventCallback>
 800604e:	e002      	b.n	8006056 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fd7f 	bl	8005b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e002      	b.n	8006060 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3730      	adds	r7, #48	@ 0x30
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c0      	sub	sp, #256	@ 0x100
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	ea40 0301 	orr.w	r3, r0, r1
 8006090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	ea40 0301 	orr.w	r3, r0, r1
 80060ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006334 <UART_SetConfig+0x2cc>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <UART_SetConfig+0xa0>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8d      	ldr	r3, [pc, #564]	@ (8006338 <UART_SetConfig+0x2d0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fe f922 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 800610c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006110:	e003      	b.n	800611a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006112:	f7fe f909 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8006116:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006124:	f040 810c 	bne.w	8006340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006132:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	1891      	adds	r1, r2, r2
 8006140:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006142:	415b      	adcs	r3, r3
 8006144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800614a:	4621      	mov	r1, r4
 800614c:	eb12 0801 	adds.w	r8, r2, r1
 8006150:	4629      	mov	r1, r5
 8006152:	eb43 0901 	adc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006178:	462b      	mov	r3, r5
 800617a:	eb49 0303 	adc.w	r3, r9, r3
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800618e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006196:	460b      	mov	r3, r1
 8006198:	18db      	adds	r3, r3, r3
 800619a:	653b      	str	r3, [r7, #80]	@ 0x50
 800619c:	4613      	mov	r3, r2
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061ac:	f7fa fd54 	bl	8000c58 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b61      	ldr	r3, [pc, #388]	@ (800633c <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061d8:	415b      	adcs	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061e0:	4641      	mov	r1, r8
 80061e2:	eb12 0a01 	adds.w	sl, r2, r1
 80061e6:	4649      	mov	r1, r9
 80061e8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	4692      	mov	sl, r2
 8006202:	469b      	mov	fp, r3
 8006204:	4643      	mov	r3, r8
 8006206:	eb1a 0303 	adds.w	r3, sl, r3
 800620a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800620e:	464b      	mov	r3, r9
 8006210:	eb4b 0303 	adc.w	r3, fp, r3
 8006214:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006224:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	643b      	str	r3, [r7, #64]	@ 0x40
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	647b      	str	r3, [r7, #68]	@ 0x44
 800623a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800623e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006242:	f7fa fd09 	bl	8000c58 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b3b      	ldr	r3, [pc, #236]	@ (800633c <UART_SetConfig+0x2d4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	@ 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006262:	4b36      	ldr	r3, [pc, #216]	@ (800633c <UART_SetConfig+0x2d4>)
 8006264:	fba3 2302 	umull	r2, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006270:	441c      	add	r4, r3
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800627c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6339      	str	r1, [r7, #48]	@ 0x30
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062fe:	f7fa fcab 	bl	8000c58 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <UART_SetConfig+0x2d4>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	@ 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	@ 0x32
 800631a:	4a08      	ldr	r2, [pc, #32]	@ (800633c <UART_SetConfig+0x2d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4422      	add	r2, r4
 800632e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006330:	e106      	b.n	8006540 <UART_SetConfig+0x4d8>
 8006332:	bf00      	nop
 8006334:	40011000 	.word	0x40011000
 8006338:	40011400 	.word	0x40011400
 800633c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800634a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800634e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	1891      	adds	r1, r2, r2
 8006358:	6239      	str	r1, [r7, #32]
 800635a:	415b      	adcs	r3, r3
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
 800635e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006362:	4641      	mov	r1, r8
 8006364:	1854      	adds	r4, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0501 	adc.w	r5, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006388:	464b      	mov	r3, r9
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ae:	4629      	mov	r1, r5
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b8:	4621      	mov	r1, r4
 80063ba:	008a      	lsls	r2, r1, #2
 80063bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063c0:	f7fa fc4a 	bl	8000c58 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b60      	ldr	r3, [pc, #384]	@ (800654c <UART_SetConfig+0x4e4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006428:	464b      	mov	r3, r9
 800642a:	460a      	mov	r2, r1
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800643e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800645e:	f7fa fbfb 	bl	8000c58 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b38      	ldr	r3, [pc, #224]	@ (800654c <UART_SetConfig+0x4e4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	@ 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	3332      	adds	r3, #50	@ 0x32
 800647c:	4a33      	ldr	r2, [pc, #204]	@ (800654c <UART_SetConfig+0x4e4>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006488:	441c      	add	r4, r3
 800648a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800648e:	2200      	movs	r2, #0
 8006490:	673b      	str	r3, [r7, #112]	@ 0x70
 8006492:	677a      	str	r2, [r7, #116]	@ 0x74
 8006494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064da:	464b      	mov	r3, r9
 80064dc:	460a      	mov	r2, r1
 80064de:	eb42 0303 	adc.w	r3, r2, r3
 80064e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800650e:	f7fa fba3 	bl	8000c58 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <UART_SetConfig+0x4e4>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	@ 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	@ 0x32
 800652a:	4a08      	ldr	r2, [pc, #32]	@ (800654c <UART_SetConfig+0x4e4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4422      	add	r2, r4
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <__cvt>:
 8006550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	ec57 6b10 	vmov	r6, r7, d0
 8006558:	2f00      	cmp	r7, #0
 800655a:	460c      	mov	r4, r1
 800655c:	4619      	mov	r1, r3
 800655e:	463b      	mov	r3, r7
 8006560:	bfbb      	ittet	lt
 8006562:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006566:	461f      	movlt	r7, r3
 8006568:	2300      	movge	r3, #0
 800656a:	232d      	movlt	r3, #45	@ 0x2d
 800656c:	700b      	strb	r3, [r1, #0]
 800656e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006570:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006574:	4691      	mov	r9, r2
 8006576:	f023 0820 	bic.w	r8, r3, #32
 800657a:	bfbc      	itt	lt
 800657c:	4632      	movlt	r2, r6
 800657e:	4616      	movlt	r6, r2
 8006580:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006584:	d005      	beq.n	8006592 <__cvt+0x42>
 8006586:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800658a:	d100      	bne.n	800658e <__cvt+0x3e>
 800658c:	3401      	adds	r4, #1
 800658e:	2102      	movs	r1, #2
 8006590:	e000      	b.n	8006594 <__cvt+0x44>
 8006592:	2103      	movs	r1, #3
 8006594:	ab03      	add	r3, sp, #12
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	ab02      	add	r3, sp, #8
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	ec47 6b10 	vmov	d0, r6, r7
 80065a0:	4653      	mov	r3, sl
 80065a2:	4622      	mov	r2, r4
 80065a4:	f000 fe5c 	bl	8007260 <_dtoa_r>
 80065a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065ac:	4605      	mov	r5, r0
 80065ae:	d119      	bne.n	80065e4 <__cvt+0x94>
 80065b0:	f019 0f01 	tst.w	r9, #1
 80065b4:	d00e      	beq.n	80065d4 <__cvt+0x84>
 80065b6:	eb00 0904 	add.w	r9, r0, r4
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7fa fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c6:	b108      	cbz	r0, 80065cc <__cvt+0x7c>
 80065c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065cc:	2230      	movs	r2, #48	@ 0x30
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	454b      	cmp	r3, r9
 80065d2:	d31e      	bcc.n	8006612 <__cvt+0xc2>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065d8:	1b5b      	subs	r3, r3, r5
 80065da:	4628      	mov	r0, r5
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	b004      	add	sp, #16
 80065e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065e8:	eb00 0904 	add.w	r9, r0, r4
 80065ec:	d1e5      	bne.n	80065ba <__cvt+0x6a>
 80065ee:	7803      	ldrb	r3, [r0, #0]
 80065f0:	2b30      	cmp	r3, #48	@ 0x30
 80065f2:	d10a      	bne.n	800660a <__cvt+0xba>
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006600:	b918      	cbnz	r0, 800660a <__cvt+0xba>
 8006602:	f1c4 0401 	rsb	r4, r4, #1
 8006606:	f8ca 4000 	str.w	r4, [sl]
 800660a:	f8da 3000 	ldr.w	r3, [sl]
 800660e:	4499      	add	r9, r3
 8006610:	e7d3      	b.n	80065ba <__cvt+0x6a>
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	9103      	str	r1, [sp, #12]
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e7d9      	b.n	80065ce <__cvt+0x7e>

0800661a <__exponent>:
 800661a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661c:	2900      	cmp	r1, #0
 800661e:	bfba      	itte	lt
 8006620:	4249      	neglt	r1, r1
 8006622:	232d      	movlt	r3, #45	@ 0x2d
 8006624:	232b      	movge	r3, #43	@ 0x2b
 8006626:	2909      	cmp	r1, #9
 8006628:	7002      	strb	r2, [r0, #0]
 800662a:	7043      	strb	r3, [r0, #1]
 800662c:	dd29      	ble.n	8006682 <__exponent+0x68>
 800662e:	f10d 0307 	add.w	r3, sp, #7
 8006632:	461d      	mov	r5, r3
 8006634:	270a      	movs	r7, #10
 8006636:	461a      	mov	r2, r3
 8006638:	fbb1 f6f7 	udiv	r6, r1, r7
 800663c:	fb07 1416 	mls	r4, r7, r6, r1
 8006640:	3430      	adds	r4, #48	@ 0x30
 8006642:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006646:	460c      	mov	r4, r1
 8006648:	2c63      	cmp	r4, #99	@ 0x63
 800664a:	f103 33ff 	add.w	r3, r3, #4294967295
 800664e:	4631      	mov	r1, r6
 8006650:	dcf1      	bgt.n	8006636 <__exponent+0x1c>
 8006652:	3130      	adds	r1, #48	@ 0x30
 8006654:	1e94      	subs	r4, r2, #2
 8006656:	f803 1c01 	strb.w	r1, [r3, #-1]
 800665a:	1c41      	adds	r1, r0, #1
 800665c:	4623      	mov	r3, r4
 800665e:	42ab      	cmp	r3, r5
 8006660:	d30a      	bcc.n	8006678 <__exponent+0x5e>
 8006662:	f10d 0309 	add.w	r3, sp, #9
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	42ac      	cmp	r4, r5
 800666a:	bf88      	it	hi
 800666c:	2300      	movhi	r3, #0
 800666e:	3302      	adds	r3, #2
 8006670:	4403      	add	r3, r0
 8006672:	1a18      	subs	r0, r3, r0
 8006674:	b003      	add	sp, #12
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	f813 6b01 	ldrb.w	r6, [r3], #1
 800667c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006680:	e7ed      	b.n	800665e <__exponent+0x44>
 8006682:	2330      	movs	r3, #48	@ 0x30
 8006684:	3130      	adds	r1, #48	@ 0x30
 8006686:	7083      	strb	r3, [r0, #2]
 8006688:	70c1      	strb	r1, [r0, #3]
 800668a:	1d03      	adds	r3, r0, #4
 800668c:	e7f1      	b.n	8006672 <__exponent+0x58>
	...

08006690 <_printf_float>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b08d      	sub	sp, #52	@ 0x34
 8006696:	460c      	mov	r4, r1
 8006698:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800669c:	4616      	mov	r6, r2
 800669e:	461f      	mov	r7, r3
 80066a0:	4605      	mov	r5, r0
 80066a2:	f000 fcdb 	bl	800705c <_localeconv_r>
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 fde8 	bl	8000280 <strlen>
 80066b0:	2300      	movs	r3, #0
 80066b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	9005      	str	r0, [sp, #20]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066c8:	f8d4 b000 	ldr.w	fp, [r4]
 80066cc:	f8c8 2000 	str.w	r2, [r8]
 80066d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	f8cd 8018 	str.w	r8, [sp, #24]
 80066de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006958 <_printf_float+0x2c8>)
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	f7fa fa26 	bl	8000b3c <__aeabi_dcmpun>
 80066f0:	bb70      	cbnz	r0, 8006750 <_printf_float+0xc0>
 80066f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f6:	4b98      	ldr	r3, [pc, #608]	@ (8006958 <_printf_float+0x2c8>)
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	f7fa fa00 	bl	8000b00 <__aeabi_dcmple>
 8006700:	bb30      	cbnz	r0, 8006750 <_printf_float+0xc0>
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7fa f9ef 	bl	8000aec <__aeabi_dcmplt>
 800670e:	b110      	cbz	r0, 8006716 <_printf_float+0x86>
 8006710:	232d      	movs	r3, #45	@ 0x2d
 8006712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006716:	4a91      	ldr	r2, [pc, #580]	@ (800695c <_printf_float+0x2cc>)
 8006718:	4b91      	ldr	r3, [pc, #580]	@ (8006960 <_printf_float+0x2d0>)
 800671a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800671e:	bf8c      	ite	hi
 8006720:	4690      	movhi	r8, r2
 8006722:	4698      	movls	r8, r3
 8006724:	2303      	movs	r3, #3
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	f02b 0304 	bic.w	r3, fp, #4
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	9700      	str	r7, [sp, #0]
 8006734:	4633      	mov	r3, r6
 8006736:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f9d2 	bl	8006ae4 <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	f040 808d 	bne.w	8006860 <_printf_float+0x1d0>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b00d      	add	sp, #52	@ 0x34
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	4640      	mov	r0, r8
 8006756:	4649      	mov	r1, r9
 8006758:	f7fa f9f0 	bl	8000b3c <__aeabi_dcmpun>
 800675c:	b140      	cbz	r0, 8006770 <_printf_float+0xe0>
 800675e:	464b      	mov	r3, r9
 8006760:	2b00      	cmp	r3, #0
 8006762:	bfbc      	itt	lt
 8006764:	232d      	movlt	r3, #45	@ 0x2d
 8006766:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800676a:	4a7e      	ldr	r2, [pc, #504]	@ (8006964 <_printf_float+0x2d4>)
 800676c:	4b7e      	ldr	r3, [pc, #504]	@ (8006968 <_printf_float+0x2d8>)
 800676e:	e7d4      	b.n	800671a <_printf_float+0x8a>
 8006770:	6863      	ldr	r3, [r4, #4]
 8006772:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006776:	9206      	str	r2, [sp, #24]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	d13b      	bne.n	80067f4 <_printf_float+0x164>
 800677c:	2306      	movs	r3, #6
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006784:	2300      	movs	r3, #0
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	ab0a      	add	r3, sp, #40	@ 0x28
 800678c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006790:	ab09      	add	r3, sp, #36	@ 0x24
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	6861      	ldr	r1, [r4, #4]
 8006796:	ec49 8b10 	vmov	d0, r8, r9
 800679a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800679e:	4628      	mov	r0, r5
 80067a0:	f7ff fed6 	bl	8006550 <__cvt>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067a8:	2b47      	cmp	r3, #71	@ 0x47
 80067aa:	4680      	mov	r8, r0
 80067ac:	d129      	bne.n	8006802 <_printf_float+0x172>
 80067ae:	1cc8      	adds	r0, r1, #3
 80067b0:	db02      	blt.n	80067b8 <_printf_float+0x128>
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	4299      	cmp	r1, r3
 80067b6:	dd41      	ble.n	800683c <_printf_float+0x1ac>
 80067b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80067bc:	fa5f fa8a 	uxtb.w	sl, sl
 80067c0:	3901      	subs	r1, #1
 80067c2:	4652      	mov	r2, sl
 80067c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80067ca:	f7ff ff26 	bl	800661a <__exponent>
 80067ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067d0:	1813      	adds	r3, r2, r0
 80067d2:	2a01      	cmp	r2, #1
 80067d4:	4681      	mov	r9, r0
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	dc02      	bgt.n	80067e0 <_printf_float+0x150>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	07d2      	lsls	r2, r2, #31
 80067de:	d501      	bpl.n	80067e4 <_printf_float+0x154>
 80067e0:	3301      	adds	r3, #1
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0a2      	beq.n	8006732 <_printf_float+0xa2>
 80067ec:	232d      	movs	r3, #45	@ 0x2d
 80067ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f2:	e79e      	b.n	8006732 <_printf_float+0xa2>
 80067f4:	9a06      	ldr	r2, [sp, #24]
 80067f6:	2a47      	cmp	r2, #71	@ 0x47
 80067f8:	d1c2      	bne.n	8006780 <_printf_float+0xf0>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1c0      	bne.n	8006780 <_printf_float+0xf0>
 80067fe:	2301      	movs	r3, #1
 8006800:	e7bd      	b.n	800677e <_printf_float+0xee>
 8006802:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006806:	d9db      	bls.n	80067c0 <_printf_float+0x130>
 8006808:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800680c:	d118      	bne.n	8006840 <_printf_float+0x1b0>
 800680e:	2900      	cmp	r1, #0
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	dd0b      	ble.n	800682c <_printf_float+0x19c>
 8006814:	6121      	str	r1, [r4, #16]
 8006816:	b913      	cbnz	r3, 800681e <_printf_float+0x18e>
 8006818:	6822      	ldr	r2, [r4, #0]
 800681a:	07d0      	lsls	r0, r2, #31
 800681c:	d502      	bpl.n	8006824 <_printf_float+0x194>
 800681e:	3301      	adds	r3, #1
 8006820:	440b      	add	r3, r1
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	e7db      	b.n	80067e4 <_printf_float+0x154>
 800682c:	b913      	cbnz	r3, 8006834 <_printf_float+0x1a4>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	07d2      	lsls	r2, r2, #31
 8006832:	d501      	bpl.n	8006838 <_printf_float+0x1a8>
 8006834:	3302      	adds	r3, #2
 8006836:	e7f4      	b.n	8006822 <_printf_float+0x192>
 8006838:	2301      	movs	r3, #1
 800683a:	e7f2      	b.n	8006822 <_printf_float+0x192>
 800683c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006842:	4299      	cmp	r1, r3
 8006844:	db05      	blt.n	8006852 <_printf_float+0x1c2>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	6121      	str	r1, [r4, #16]
 800684a:	07d8      	lsls	r0, r3, #31
 800684c:	d5ea      	bpl.n	8006824 <_printf_float+0x194>
 800684e:	1c4b      	adds	r3, r1, #1
 8006850:	e7e7      	b.n	8006822 <_printf_float+0x192>
 8006852:	2900      	cmp	r1, #0
 8006854:	bfd4      	ite	le
 8006856:	f1c1 0202 	rsble	r2, r1, #2
 800685a:	2201      	movgt	r2, #1
 800685c:	4413      	add	r3, r2
 800685e:	e7e0      	b.n	8006822 <_printf_float+0x192>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	055a      	lsls	r2, r3, #21
 8006864:	d407      	bmi.n	8006876 <_printf_float+0x1e6>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	4642      	mov	r2, r8
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d12b      	bne.n	80068cc <_printf_float+0x23c>
 8006874:	e767      	b.n	8006746 <_printf_float+0xb6>
 8006876:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800687a:	f240 80dd 	bls.w	8006a38 <_printf_float+0x3a8>
 800687e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	f7fa f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800688a:	2800      	cmp	r0, #0
 800688c:	d033      	beq.n	80068f6 <_printf_float+0x266>
 800688e:	4a37      	ldr	r2, [pc, #220]	@ (800696c <_printf_float+0x2dc>)
 8006890:	2301      	movs	r3, #1
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f af54 	beq.w	8006746 <_printf_float+0xb6>
 800689e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068a2:	4543      	cmp	r3, r8
 80068a4:	db02      	blt.n	80068ac <_printf_float+0x21c>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	07d8      	lsls	r0, r3, #31
 80068aa:	d50f      	bpl.n	80068cc <_printf_float+0x23c>
 80068ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af45 	beq.w	8006746 <_printf_float+0xb6>
 80068bc:	f04f 0900 	mov.w	r9, #0
 80068c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80068c4:	f104 0a1a 	add.w	sl, r4, #26
 80068c8:	45c8      	cmp	r8, r9
 80068ca:	dc09      	bgt.n	80068e0 <_printf_float+0x250>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	079b      	lsls	r3, r3, #30
 80068d0:	f100 8103 	bmi.w	8006ada <_printf_float+0x44a>
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068d8:	4298      	cmp	r0, r3
 80068da:	bfb8      	it	lt
 80068dc:	4618      	movlt	r0, r3
 80068de:	e734      	b.n	800674a <_printf_float+0xba>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af2b 	beq.w	8006746 <_printf_float+0xb6>
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	e7e8      	b.n	80068c8 <_printf_float+0x238>
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc39      	bgt.n	8006970 <_printf_float+0x2e0>
 80068fc:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <_printf_float+0x2dc>)
 80068fe:	2301      	movs	r3, #1
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af1d 	beq.w	8006746 <_printf_float+0xb6>
 800690c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006910:	ea59 0303 	orrs.w	r3, r9, r3
 8006914:	d102      	bne.n	800691c <_printf_float+0x28c>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	07d9      	lsls	r1, r3, #31
 800691a:	d5d7      	bpl.n	80068cc <_printf_float+0x23c>
 800691c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af0d 	beq.w	8006746 <_printf_float+0xb6>
 800692c:	f04f 0a00 	mov.w	sl, #0
 8006930:	f104 0b1a 	add.w	fp, r4, #26
 8006934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006936:	425b      	negs	r3, r3
 8006938:	4553      	cmp	r3, sl
 800693a:	dc01      	bgt.n	8006940 <_printf_float+0x2b0>
 800693c:	464b      	mov	r3, r9
 800693e:	e793      	b.n	8006868 <_printf_float+0x1d8>
 8006940:	2301      	movs	r3, #1
 8006942:	465a      	mov	r2, fp
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f aefb 	beq.w	8006746 <_printf_float+0xb6>
 8006950:	f10a 0a01 	add.w	sl, sl, #1
 8006954:	e7ee      	b.n	8006934 <_printf_float+0x2a4>
 8006956:	bf00      	nop
 8006958:	7fefffff 	.word	0x7fefffff
 800695c:	0800928c 	.word	0x0800928c
 8006960:	08009288 	.word	0x08009288
 8006964:	08009294 	.word	0x08009294
 8006968:	08009290 	.word	0x08009290
 800696c:	08009298 	.word	0x08009298
 8006970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006972:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006976:	4553      	cmp	r3, sl
 8006978:	bfa8      	it	ge
 800697a:	4653      	movge	r3, sl
 800697c:	2b00      	cmp	r3, #0
 800697e:	4699      	mov	r9, r3
 8006980:	dc36      	bgt.n	80069f0 <_printf_float+0x360>
 8006982:	f04f 0b00 	mov.w	fp, #0
 8006986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800698a:	f104 021a 	add.w	r2, r4, #26
 800698e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006990:	9306      	str	r3, [sp, #24]
 8006992:	eba3 0309 	sub.w	r3, r3, r9
 8006996:	455b      	cmp	r3, fp
 8006998:	dc31      	bgt.n	80069fe <_printf_float+0x36e>
 800699a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699c:	459a      	cmp	sl, r3
 800699e:	dc3a      	bgt.n	8006a16 <_printf_float+0x386>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	07da      	lsls	r2, r3, #31
 80069a4:	d437      	bmi.n	8006a16 <_printf_float+0x386>
 80069a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a8:	ebaa 0903 	sub.w	r9, sl, r3
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	ebaa 0303 	sub.w	r3, sl, r3
 80069b2:	4599      	cmp	r9, r3
 80069b4:	bfa8      	it	ge
 80069b6:	4699      	movge	r9, r3
 80069b8:	f1b9 0f00 	cmp.w	r9, #0
 80069bc:	dc33      	bgt.n	8006a26 <_printf_float+0x396>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069c6:	f104 0b1a 	add.w	fp, r4, #26
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	ebaa 0303 	sub.w	r3, sl, r3
 80069d0:	eba3 0309 	sub.w	r3, r3, r9
 80069d4:	4543      	cmp	r3, r8
 80069d6:	f77f af79 	ble.w	80068cc <_printf_float+0x23c>
 80069da:	2301      	movs	r3, #1
 80069dc:	465a      	mov	r2, fp
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	f43f aeae 	beq.w	8006746 <_printf_float+0xb6>
 80069ea:	f108 0801 	add.w	r8, r8, #1
 80069ee:	e7ec      	b.n	80069ca <_printf_float+0x33a>
 80069f0:	4642      	mov	r2, r8
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d1c2      	bne.n	8006982 <_printf_float+0x2f2>
 80069fc:	e6a3      	b.n	8006746 <_printf_float+0xb6>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	9206      	str	r2, [sp, #24]
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae9c 	beq.w	8006746 <_printf_float+0xb6>
 8006a0e:	9a06      	ldr	r2, [sp, #24]
 8006a10:	f10b 0b01 	add.w	fp, fp, #1
 8006a14:	e7bb      	b.n	800698e <_printf_float+0x2fe>
 8006a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	d1c0      	bne.n	80069a6 <_printf_float+0x316>
 8006a24:	e68f      	b.n	8006746 <_printf_float+0xb6>
 8006a26:	9a06      	ldr	r2, [sp, #24]
 8006a28:	464b      	mov	r3, r9
 8006a2a:	4442      	add	r2, r8
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	d1c3      	bne.n	80069be <_printf_float+0x32e>
 8006a36:	e686      	b.n	8006746 <_printf_float+0xb6>
 8006a38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a3c:	f1ba 0f01 	cmp.w	sl, #1
 8006a40:	dc01      	bgt.n	8006a46 <_printf_float+0x3b6>
 8006a42:	07db      	lsls	r3, r3, #31
 8006a44:	d536      	bpl.n	8006ab4 <_printf_float+0x424>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4642      	mov	r2, r8
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f ae78 	beq.w	8006746 <_printf_float+0xb6>
 8006a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae70 	beq.w	8006746 <_printf_float+0xb6>
 8006a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a72:	f7fa f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a76:	b9c0      	cbnz	r0, 8006aaa <_printf_float+0x41a>
 8006a78:	4653      	mov	r3, sl
 8006a7a:	f108 0201 	add.w	r2, r8, #1
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	d10c      	bne.n	8006aa2 <_printf_float+0x412>
 8006a88:	e65d      	b.n	8006746 <_printf_float+0xb6>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	465a      	mov	r2, fp
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f ae56 	beq.w	8006746 <_printf_float+0xb6>
 8006a9a:	f108 0801 	add.w	r8, r8, #1
 8006a9e:	45d0      	cmp	r8, sl
 8006aa0:	dbf3      	blt.n	8006a8a <_printf_float+0x3fa>
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006aa8:	e6df      	b.n	800686a <_printf_float+0x1da>
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	f104 0b1a 	add.w	fp, r4, #26
 8006ab2:	e7f4      	b.n	8006a9e <_printf_float+0x40e>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	e7e1      	b.n	8006a7e <_printf_float+0x3ee>
 8006aba:	2301      	movs	r3, #1
 8006abc:	464a      	mov	r2, r9
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f ae3e 	beq.w	8006746 <_printf_float+0xb6>
 8006aca:	f108 0801 	add.w	r8, r8, #1
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ad2:	1a5b      	subs	r3, r3, r1
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	dcf0      	bgt.n	8006aba <_printf_float+0x42a>
 8006ad8:	e6fc      	b.n	80068d4 <_printf_float+0x244>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	f104 0919 	add.w	r9, r4, #25
 8006ae2:	e7f4      	b.n	8006ace <_printf_float+0x43e>

08006ae4 <_printf_common>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	4616      	mov	r6, r2
 8006aea:	4698      	mov	r8, r3
 8006aec:	688a      	ldr	r2, [r1, #8]
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	bfb8      	it	lt
 8006af8:	4613      	movlt	r3, r2
 8006afa:	6033      	str	r3, [r6, #0]
 8006afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b00:	4607      	mov	r7, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	b10a      	cbz	r2, 8006b0a <_printf_common+0x26>
 8006b06:	3301      	adds	r3, #1
 8006b08:	6033      	str	r3, [r6, #0]
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	0699      	lsls	r1, r3, #26
 8006b0e:	bf42      	ittt	mi
 8006b10:	6833      	ldrmi	r3, [r6, #0]
 8006b12:	3302      	addmi	r3, #2
 8006b14:	6033      	strmi	r3, [r6, #0]
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	f015 0506 	ands.w	r5, r5, #6
 8006b1c:	d106      	bne.n	8006b2c <_printf_common+0x48>
 8006b1e:	f104 0a19 	add.w	sl, r4, #25
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	6832      	ldr	r2, [r6, #0]
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dc26      	bgt.n	8006b7a <_printf_common+0x96>
 8006b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b30:	6822      	ldr	r2, [r4, #0]
 8006b32:	3b00      	subs	r3, #0
 8006b34:	bf18      	it	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	0692      	lsls	r2, r2, #26
 8006b3a:	d42b      	bmi.n	8006b94 <_printf_common+0xb0>
 8006b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b40:	4641      	mov	r1, r8
 8006b42:	4638      	mov	r0, r7
 8006b44:	47c8      	blx	r9
 8006b46:	3001      	adds	r0, #1
 8006b48:	d01e      	beq.n	8006b88 <_printf_common+0xa4>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	6922      	ldr	r2, [r4, #16]
 8006b4e:	f003 0306 	and.w	r3, r3, #6
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	bf02      	ittt	eq
 8006b56:	68e5      	ldreq	r5, [r4, #12]
 8006b58:	6833      	ldreq	r3, [r6, #0]
 8006b5a:	1aed      	subeq	r5, r5, r3
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	bf0c      	ite	eq
 8006b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b64:	2500      	movne	r5, #0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfc4      	itt	gt
 8006b6a:	1a9b      	subgt	r3, r3, r2
 8006b6c:	18ed      	addgt	r5, r5, r3
 8006b6e:	2600      	movs	r6, #0
 8006b70:	341a      	adds	r4, #26
 8006b72:	42b5      	cmp	r5, r6
 8006b74:	d11a      	bne.n	8006bac <_printf_common+0xc8>
 8006b76:	2000      	movs	r0, #0
 8006b78:	e008      	b.n	8006b8c <_printf_common+0xa8>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	4641      	mov	r1, r8
 8006b80:	4638      	mov	r0, r7
 8006b82:	47c8      	blx	r9
 8006b84:	3001      	adds	r0, #1
 8006b86:	d103      	bne.n	8006b90 <_printf_common+0xac>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	3501      	adds	r5, #1
 8006b92:	e7c6      	b.n	8006b22 <_printf_common+0x3e>
 8006b94:	18e1      	adds	r1, r4, r3
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	2030      	movs	r0, #48	@ 0x30
 8006b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b9e:	4422      	add	r2, r4
 8006ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ba8:	3302      	adds	r3, #2
 8006baa:	e7c7      	b.n	8006b3c <_printf_common+0x58>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4622      	mov	r2, r4
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c8      	blx	r9
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d0e6      	beq.n	8006b88 <_printf_common+0xa4>
 8006bba:	3601      	adds	r6, #1
 8006bbc:	e7d9      	b.n	8006b72 <_printf_common+0x8e>
	...

08006bc0 <_printf_i>:
 8006bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	7e0f      	ldrb	r7, [r1, #24]
 8006bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bc8:	2f78      	cmp	r7, #120	@ 0x78
 8006bca:	4691      	mov	r9, r2
 8006bcc:	4680      	mov	r8, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	469a      	mov	sl, r3
 8006bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bd6:	d807      	bhi.n	8006be8 <_printf_i+0x28>
 8006bd8:	2f62      	cmp	r7, #98	@ 0x62
 8006bda:	d80a      	bhi.n	8006bf2 <_printf_i+0x32>
 8006bdc:	2f00      	cmp	r7, #0
 8006bde:	f000 80d1 	beq.w	8006d84 <_printf_i+0x1c4>
 8006be2:	2f58      	cmp	r7, #88	@ 0x58
 8006be4:	f000 80b8 	beq.w	8006d58 <_printf_i+0x198>
 8006be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bf0:	e03a      	b.n	8006c68 <_printf_i+0xa8>
 8006bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bf6:	2b15      	cmp	r3, #21
 8006bf8:	d8f6      	bhi.n	8006be8 <_printf_i+0x28>
 8006bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8006c00 <_printf_i+0x40>)
 8006bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c00:	08006c59 	.word	0x08006c59
 8006c04:	08006c6d 	.word	0x08006c6d
 8006c08:	08006be9 	.word	0x08006be9
 8006c0c:	08006be9 	.word	0x08006be9
 8006c10:	08006be9 	.word	0x08006be9
 8006c14:	08006be9 	.word	0x08006be9
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006be9 	.word	0x08006be9
 8006c20:	08006be9 	.word	0x08006be9
 8006c24:	08006be9 	.word	0x08006be9
 8006c28:	08006be9 	.word	0x08006be9
 8006c2c:	08006d6b 	.word	0x08006d6b
 8006c30:	08006c97 	.word	0x08006c97
 8006c34:	08006d25 	.word	0x08006d25
 8006c38:	08006be9 	.word	0x08006be9
 8006c3c:	08006be9 	.word	0x08006be9
 8006c40:	08006d8d 	.word	0x08006d8d
 8006c44:	08006be9 	.word	0x08006be9
 8006c48:	08006c97 	.word	0x08006c97
 8006c4c:	08006be9 	.word	0x08006be9
 8006c50:	08006be9 	.word	0x08006be9
 8006c54:	08006d2d 	.word	0x08006d2d
 8006c58:	6833      	ldr	r3, [r6, #0]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6032      	str	r2, [r6, #0]
 8006c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e09c      	b.n	8006da6 <_printf_i+0x1e6>
 8006c6c:	6833      	ldr	r3, [r6, #0]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	6031      	str	r1, [r6, #0]
 8006c74:	0606      	lsls	r6, r0, #24
 8006c76:	d501      	bpl.n	8006c7c <_printf_i+0xbc>
 8006c78:	681d      	ldr	r5, [r3, #0]
 8006c7a:	e003      	b.n	8006c84 <_printf_i+0xc4>
 8006c7c:	0645      	lsls	r5, r0, #25
 8006c7e:	d5fb      	bpl.n	8006c78 <_printf_i+0xb8>
 8006c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	da03      	bge.n	8006c90 <_printf_i+0xd0>
 8006c88:	232d      	movs	r3, #45	@ 0x2d
 8006c8a:	426d      	negs	r5, r5
 8006c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c90:	4858      	ldr	r0, [pc, #352]	@ (8006df4 <_printf_i+0x234>)
 8006c92:	230a      	movs	r3, #10
 8006c94:	e011      	b.n	8006cba <_printf_i+0xfa>
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	0608      	lsls	r0, r1, #24
 8006c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ca0:	d402      	bmi.n	8006ca8 <_printf_i+0xe8>
 8006ca2:	0649      	lsls	r1, r1, #25
 8006ca4:	bf48      	it	mi
 8006ca6:	b2ad      	uxthmi	r5, r5
 8006ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006caa:	4852      	ldr	r0, [pc, #328]	@ (8006df4 <_printf_i+0x234>)
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	bf14      	ite	ne
 8006cb0:	230a      	movne	r3, #10
 8006cb2:	2308      	moveq	r3, #8
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cba:	6866      	ldr	r6, [r4, #4]
 8006cbc:	60a6      	str	r6, [r4, #8]
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	db05      	blt.n	8006cce <_printf_i+0x10e>
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	432e      	orrs	r6, r5
 8006cc6:	f021 0104 	bic.w	r1, r1, #4
 8006cca:	6021      	str	r1, [r4, #0]
 8006ccc:	d04b      	beq.n	8006d66 <_printf_i+0x1a6>
 8006cce:	4616      	mov	r6, r2
 8006cd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cd4:	fb03 5711 	mls	r7, r3, r1, r5
 8006cd8:	5dc7      	ldrb	r7, [r0, r7]
 8006cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cde:	462f      	mov	r7, r5
 8006ce0:	42bb      	cmp	r3, r7
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	d9f4      	bls.n	8006cd0 <_printf_i+0x110>
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d10b      	bne.n	8006d02 <_printf_i+0x142>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	07df      	lsls	r7, r3, #31
 8006cee:	d508      	bpl.n	8006d02 <_printf_i+0x142>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	6861      	ldr	r1, [r4, #4]
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	bfde      	ittt	le
 8006cf8:	2330      	movle	r3, #48	@ 0x30
 8006cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d02:	1b92      	subs	r2, r2, r6
 8006d04:	6122      	str	r2, [r4, #16]
 8006d06:	f8cd a000 	str.w	sl, [sp]
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	aa03      	add	r2, sp, #12
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4640      	mov	r0, r8
 8006d12:	f7ff fee7 	bl	8006ae4 <_printf_common>
 8006d16:	3001      	adds	r0, #1
 8006d18:	d14a      	bne.n	8006db0 <_printf_i+0x1f0>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	b004      	add	sp, #16
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	f043 0320 	orr.w	r3, r3, #32
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	4832      	ldr	r0, [pc, #200]	@ (8006df8 <_printf_i+0x238>)
 8006d2e:	2778      	movs	r7, #120	@ 0x78
 8006d30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	6831      	ldr	r1, [r6, #0]
 8006d38:	061f      	lsls	r7, r3, #24
 8006d3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d3e:	d402      	bmi.n	8006d46 <_printf_i+0x186>
 8006d40:	065f      	lsls	r7, r3, #25
 8006d42:	bf48      	it	mi
 8006d44:	b2ad      	uxthmi	r5, r5
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	07d9      	lsls	r1, r3, #31
 8006d4a:	bf44      	itt	mi
 8006d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d50:	6023      	strmi	r3, [r4, #0]
 8006d52:	b11d      	cbz	r5, 8006d5c <_printf_i+0x19c>
 8006d54:	2310      	movs	r3, #16
 8006d56:	e7ad      	b.n	8006cb4 <_printf_i+0xf4>
 8006d58:	4826      	ldr	r0, [pc, #152]	@ (8006df4 <_printf_i+0x234>)
 8006d5a:	e7e9      	b.n	8006d30 <_printf_i+0x170>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f023 0320 	bic.w	r3, r3, #32
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	e7f6      	b.n	8006d54 <_printf_i+0x194>
 8006d66:	4616      	mov	r6, r2
 8006d68:	e7bd      	b.n	8006ce6 <_printf_i+0x126>
 8006d6a:	6833      	ldr	r3, [r6, #0]
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	6961      	ldr	r1, [r4, #20]
 8006d70:	1d18      	adds	r0, r3, #4
 8006d72:	6030      	str	r0, [r6, #0]
 8006d74:	062e      	lsls	r6, r5, #24
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	d501      	bpl.n	8006d7e <_printf_i+0x1be>
 8006d7a:	6019      	str	r1, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <_printf_i+0x1c4>
 8006d7e:	0668      	lsls	r0, r5, #25
 8006d80:	d5fb      	bpl.n	8006d7a <_printf_i+0x1ba>
 8006d82:	8019      	strh	r1, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	4616      	mov	r6, r2
 8006d8a:	e7bc      	b.n	8006d06 <_printf_i+0x146>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	1d1a      	adds	r2, r3, #4
 8006d90:	6032      	str	r2, [r6, #0]
 8006d92:	681e      	ldr	r6, [r3, #0]
 8006d94:	6862      	ldr	r2, [r4, #4]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7f9 fa21 	bl	80001e0 <memchr>
 8006d9e:	b108      	cbz	r0, 8006da4 <_printf_i+0x1e4>
 8006da0:	1b80      	subs	r0, r0, r6
 8006da2:	6060      	str	r0, [r4, #4]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	2300      	movs	r3, #0
 8006daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dae:	e7aa      	b.n	8006d06 <_printf_i+0x146>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	4632      	mov	r2, r6
 8006db4:	4649      	mov	r1, r9
 8006db6:	4640      	mov	r0, r8
 8006db8:	47d0      	blx	sl
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d0ad      	beq.n	8006d1a <_printf_i+0x15a>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	079b      	lsls	r3, r3, #30
 8006dc2:	d413      	bmi.n	8006dec <_printf_i+0x22c>
 8006dc4:	68e0      	ldr	r0, [r4, #12]
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	4298      	cmp	r0, r3
 8006dca:	bfb8      	it	lt
 8006dcc:	4618      	movlt	r0, r3
 8006dce:	e7a6      	b.n	8006d1e <_printf_i+0x15e>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	47d0      	blx	sl
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d09d      	beq.n	8006d1a <_printf_i+0x15a>
 8006dde:	3501      	adds	r5, #1
 8006de0:	68e3      	ldr	r3, [r4, #12]
 8006de2:	9903      	ldr	r1, [sp, #12]
 8006de4:	1a5b      	subs	r3, r3, r1
 8006de6:	42ab      	cmp	r3, r5
 8006de8:	dcf2      	bgt.n	8006dd0 <_printf_i+0x210>
 8006dea:	e7eb      	b.n	8006dc4 <_printf_i+0x204>
 8006dec:	2500      	movs	r5, #0
 8006dee:	f104 0619 	add.w	r6, r4, #25
 8006df2:	e7f5      	b.n	8006de0 <_printf_i+0x220>
 8006df4:	0800929a 	.word	0x0800929a
 8006df8:	080092ab 	.word	0x080092ab

08006dfc <std>:
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	e9c0 3300 	strd	r3, r3, [r0]
 8006e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e0a:	6083      	str	r3, [r0, #8]
 8006e0c:	8181      	strh	r1, [r0, #12]
 8006e0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e10:	81c2      	strh	r2, [r0, #14]
 8006e12:	6183      	str	r3, [r0, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2208      	movs	r2, #8
 8006e18:	305c      	adds	r0, #92	@ 0x5c
 8006e1a:	f000 f916 	bl	800704a <memset>
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <std+0x58>)
 8006e20:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e22:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <std+0x5c>)
 8006e24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <std+0x60>)
 8006e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <std+0x64>)
 8006e2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <std+0x68>)
 8006e30:	6224      	str	r4, [r4, #32]
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d006      	beq.n	8006e44 <std+0x48>
 8006e36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e3a:	4294      	cmp	r4, r2
 8006e3c:	d002      	beq.n	8006e44 <std+0x48>
 8006e3e:	33d0      	adds	r3, #208	@ 0xd0
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d105      	bne.n	8006e50 <std+0x54>
 8006e44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4c:	f000 b97a 	b.w	8007144 <__retarget_lock_init_recursive>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	08006fc5 	.word	0x08006fc5
 8006e58:	08006fe7 	.word	0x08006fe7
 8006e5c:	0800701f 	.word	0x0800701f
 8006e60:	08007043 	.word	0x08007043
 8006e64:	200004c8 	.word	0x200004c8

08006e68 <stdio_exit_handler>:
 8006e68:	4a02      	ldr	r2, [pc, #8]	@ (8006e74 <stdio_exit_handler+0xc>)
 8006e6a:	4903      	ldr	r1, [pc, #12]	@ (8006e78 <stdio_exit_handler+0x10>)
 8006e6c:	4803      	ldr	r0, [pc, #12]	@ (8006e7c <stdio_exit_handler+0x14>)
 8006e6e:	f000 b869 	b.w	8006f44 <_fwalk_sglue>
 8006e72:	bf00      	nop
 8006e74:	20000028 	.word	0x20000028
 8006e78:	08008aad 	.word	0x08008aad
 8006e7c:	20000038 	.word	0x20000038

08006e80 <cleanup_stdio>:
 8006e80:	6841      	ldr	r1, [r0, #4]
 8006e82:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <cleanup_stdio+0x34>)
 8006e84:	4299      	cmp	r1, r3
 8006e86:	b510      	push	{r4, lr}
 8006e88:	4604      	mov	r4, r0
 8006e8a:	d001      	beq.n	8006e90 <cleanup_stdio+0x10>
 8006e8c:	f001 fe0e 	bl	8008aac <_fflush_r>
 8006e90:	68a1      	ldr	r1, [r4, #8]
 8006e92:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <cleanup_stdio+0x38>)
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <cleanup_stdio+0x1e>
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f001 fe07 	bl	8008aac <_fflush_r>
 8006e9e:	68e1      	ldr	r1, [r4, #12]
 8006ea0:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <cleanup_stdio+0x3c>)
 8006ea2:	4299      	cmp	r1, r3
 8006ea4:	d004      	beq.n	8006eb0 <cleanup_stdio+0x30>
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eac:	f001 bdfe 	b.w	8008aac <_fflush_r>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200004c8 	.word	0x200004c8
 8006eb8:	20000530 	.word	0x20000530
 8006ebc:	20000598 	.word	0x20000598

08006ec0 <global_stdio_init.part.0>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <global_stdio_init.part.0+0x30>)
 8006ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ef4 <global_stdio_init.part.0+0x34>)
 8006ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef8 <global_stdio_init.part.0+0x38>)
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2104      	movs	r1, #4
 8006ed0:	f7ff ff94 	bl	8006dfc <std>
 8006ed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2109      	movs	r1, #9
 8006edc:	f7ff ff8e 	bl	8006dfc <std>
 8006ee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eea:	2112      	movs	r1, #18
 8006eec:	f7ff bf86 	b.w	8006dfc <std>
 8006ef0:	20000600 	.word	0x20000600
 8006ef4:	200004c8 	.word	0x200004c8
 8006ef8:	08006e69 	.word	0x08006e69

08006efc <__sfp_lock_acquire>:
 8006efc:	4801      	ldr	r0, [pc, #4]	@ (8006f04 <__sfp_lock_acquire+0x8>)
 8006efe:	f000 b922 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8006f02:	bf00      	nop
 8006f04:	20000609 	.word	0x20000609

08006f08 <__sfp_lock_release>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__sfp_lock_release+0x8>)
 8006f0a:	f000 b91d 	b.w	8007148 <__retarget_lock_release_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000609 	.word	0x20000609

08006f14 <__sinit>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4604      	mov	r4, r0
 8006f18:	f7ff fff0 	bl	8006efc <__sfp_lock_acquire>
 8006f1c:	6a23      	ldr	r3, [r4, #32]
 8006f1e:	b11b      	cbz	r3, 8006f28 <__sinit+0x14>
 8006f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f24:	f7ff bff0 	b.w	8006f08 <__sfp_lock_release>
 8006f28:	4b04      	ldr	r3, [pc, #16]	@ (8006f3c <__sinit+0x28>)
 8006f2a:	6223      	str	r3, [r4, #32]
 8006f2c:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <__sinit+0x2c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f5      	bne.n	8006f20 <__sinit+0xc>
 8006f34:	f7ff ffc4 	bl	8006ec0 <global_stdio_init.part.0>
 8006f38:	e7f2      	b.n	8006f20 <__sinit+0xc>
 8006f3a:	bf00      	nop
 8006f3c:	08006e81 	.word	0x08006e81
 8006f40:	20000600 	.word	0x20000600

08006f44 <_fwalk_sglue>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4607      	mov	r7, r0
 8006f4a:	4688      	mov	r8, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f54:	f1b9 0901 	subs.w	r9, r9, #1
 8006f58:	d505      	bpl.n	8006f66 <_fwalk_sglue+0x22>
 8006f5a:	6824      	ldr	r4, [r4, #0]
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	d1f7      	bne.n	8006f50 <_fwalk_sglue+0xc>
 8006f60:	4630      	mov	r0, r6
 8006f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d907      	bls.n	8006f7c <_fwalk_sglue+0x38>
 8006f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f70:	3301      	adds	r3, #1
 8006f72:	d003      	beq.n	8006f7c <_fwalk_sglue+0x38>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4638      	mov	r0, r7
 8006f78:	47c0      	blx	r8
 8006f7a:	4306      	orrs	r6, r0
 8006f7c:	3568      	adds	r5, #104	@ 0x68
 8006f7e:	e7e9      	b.n	8006f54 <_fwalk_sglue+0x10>

08006f80 <siprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	b510      	push	{r4, lr}
 8006f84:	b09d      	sub	sp, #116	@ 0x74
 8006f86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	9006      	str	r0, [sp, #24]
 8006f8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f90:	480a      	ldr	r0, [pc, #40]	@ (8006fbc <siprintf+0x3c>)
 8006f92:	9107      	str	r1, [sp, #28]
 8006f94:	9104      	str	r1, [sp, #16]
 8006f96:	490a      	ldr	r1, [pc, #40]	@ (8006fc0 <siprintf+0x40>)
 8006f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	a902      	add	r1, sp, #8
 8006fa2:	6800      	ldr	r0, [r0, #0]
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006fa8:	f001 fc00 	bl	80087ac <_svfiprintf_r>
 8006fac:	9b02      	ldr	r3, [sp, #8]
 8006fae:	701c      	strb	r4, [r3, #0]
 8006fb0:	b01d      	add	sp, #116	@ 0x74
 8006fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb6:	b003      	add	sp, #12
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000034 	.word	0x20000034
 8006fc0:	ffff0208 	.word	0xffff0208

08006fc4 <__sread>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fcc:	f000 f86c 	bl	80070a8 <_read_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	bfab      	itete	ge
 8006fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd8:	181b      	addge	r3, r3, r0
 8006fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fde:	bfac      	ite	ge
 8006fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fe2:	81a3      	strhlt	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__swrite>:
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	461f      	mov	r7, r3
 8006fec:	898b      	ldrh	r3, [r1, #12]
 8006fee:	05db      	lsls	r3, r3, #23
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	d505      	bpl.n	8007004 <__swrite+0x1e>
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	2200      	movs	r2, #0
 8007000:	f000 f840 	bl	8007084 <_lseek_r>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	4632      	mov	r2, r6
 8007012:	463b      	mov	r3, r7
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	f000 b857 	b.w	80070cc <_write_r>

0800701e <__sseek>:
 800701e:	b510      	push	{r4, lr}
 8007020:	460c      	mov	r4, r1
 8007022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007026:	f000 f82d 	bl	8007084 <_lseek_r>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	bf15      	itete	ne
 8007030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800703a:	81a3      	strheq	r3, [r4, #12]
 800703c:	bf18      	it	ne
 800703e:	81a3      	strhne	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__sclose>:
 8007042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007046:	f000 b80d 	b.w	8007064 <_close_r>

0800704a <memset>:
 800704a:	4402      	add	r2, r0
 800704c:	4603      	mov	r3, r0
 800704e:	4293      	cmp	r3, r2
 8007050:	d100      	bne.n	8007054 <memset+0xa>
 8007052:	4770      	bx	lr
 8007054:	f803 1b01 	strb.w	r1, [r3], #1
 8007058:	e7f9      	b.n	800704e <memset+0x4>
	...

0800705c <_localeconv_r>:
 800705c:	4800      	ldr	r0, [pc, #0]	@ (8007060 <_localeconv_r+0x4>)
 800705e:	4770      	bx	lr
 8007060:	20000174 	.word	0x20000174

08007064 <_close_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d06      	ldr	r5, [pc, #24]	@ (8007080 <_close_r+0x1c>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fb fd26 	bl	8002ac0 <_close>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_close_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_close_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20000604 	.word	0x20000604

08007084 <_lseek_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	@ (80070a4 <_lseek_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fb fd3b 	bl	8002b0e <_lseek>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_lseek_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_lseek_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000604 	.word	0x20000604

080070a8 <_read_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	@ (80070c8 <_read_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7fb fcc9 	bl	8002a4e <_read>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_read_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_read_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	20000604 	.word	0x20000604

080070cc <_write_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4d07      	ldr	r5, [pc, #28]	@ (80070ec <_write_r+0x20>)
 80070d0:	4604      	mov	r4, r0
 80070d2:	4608      	mov	r0, r1
 80070d4:	4611      	mov	r1, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	602a      	str	r2, [r5, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	f7fb fcd4 	bl	8002a88 <_write>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_write_r+0x1e>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_write_r+0x1e>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	20000604 	.word	0x20000604

080070f0 <__errno>:
 80070f0:	4b01      	ldr	r3, [pc, #4]	@ (80070f8 <__errno+0x8>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20000034 	.word	0x20000034

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	@ (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	@ (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	@ (8007140 <__libc_init_array+0x44>)
 8007110:	f002 f88e 	bl	8009230 <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	08009604 	.word	0x08009604
 8007138:	08009604 	.word	0x08009604
 800713c:	08009604 	.word	0x08009604
 8007140:	08009608 	.word	0x08009608

08007144 <__retarget_lock_init_recursive>:
 8007144:	4770      	bx	lr

08007146 <__retarget_lock_acquire_recursive>:
 8007146:	4770      	bx	lr

08007148 <__retarget_lock_release_recursive>:
 8007148:	4770      	bx	lr

0800714a <quorem>:
 800714a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714e:	6903      	ldr	r3, [r0, #16]
 8007150:	690c      	ldr	r4, [r1, #16]
 8007152:	42a3      	cmp	r3, r4
 8007154:	4607      	mov	r7, r0
 8007156:	db7e      	blt.n	8007256 <quorem+0x10c>
 8007158:	3c01      	subs	r4, #1
 800715a:	f101 0814 	add.w	r8, r1, #20
 800715e:	00a3      	lsls	r3, r4, #2
 8007160:	f100 0514 	add.w	r5, r0, #20
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007174:	3301      	adds	r3, #1
 8007176:	429a      	cmp	r2, r3
 8007178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800717c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007180:	d32e      	bcc.n	80071e0 <quorem+0x96>
 8007182:	f04f 0a00 	mov.w	sl, #0
 8007186:	46c4      	mov	ip, r8
 8007188:	46ae      	mov	lr, r5
 800718a:	46d3      	mov	fp, sl
 800718c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007190:	b298      	uxth	r0, r3
 8007192:	fb06 a000 	mla	r0, r6, r0, sl
 8007196:	0c02      	lsrs	r2, r0, #16
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	fb06 2303 	mla	r3, r6, r3, r2
 800719e:	f8de 2000 	ldr.w	r2, [lr]
 80071a2:	b280      	uxth	r0, r0
 80071a4:	b292      	uxth	r2, r2
 80071a6:	1a12      	subs	r2, r2, r0
 80071a8:	445a      	add	r2, fp
 80071aa:	f8de 0000 	ldr.w	r0, [lr]
 80071ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071bc:	b292      	uxth	r2, r2
 80071be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071c2:	45e1      	cmp	r9, ip
 80071c4:	f84e 2b04 	str.w	r2, [lr], #4
 80071c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071cc:	d2de      	bcs.n	800718c <quorem+0x42>
 80071ce:	9b00      	ldr	r3, [sp, #0]
 80071d0:	58eb      	ldr	r3, [r5, r3]
 80071d2:	b92b      	cbnz	r3, 80071e0 <quorem+0x96>
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	3b04      	subs	r3, #4
 80071d8:	429d      	cmp	r5, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	d32f      	bcc.n	800723e <quorem+0xf4>
 80071de:	613c      	str	r4, [r7, #16]
 80071e0:	4638      	mov	r0, r7
 80071e2:	f001 f97f 	bl	80084e4 <__mcmp>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	db25      	blt.n	8007236 <quorem+0xec>
 80071ea:	4629      	mov	r1, r5
 80071ec:	2000      	movs	r0, #0
 80071ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80071f2:	f8d1 c000 	ldr.w	ip, [r1]
 80071f6:	fa1f fe82 	uxth.w	lr, r2
 80071fa:	fa1f f38c 	uxth.w	r3, ip
 80071fe:	eba3 030e 	sub.w	r3, r3, lr
 8007202:	4403      	add	r3, r0
 8007204:	0c12      	lsrs	r2, r2, #16
 8007206:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800720a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800720e:	b29b      	uxth	r3, r3
 8007210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007214:	45c1      	cmp	r9, r8
 8007216:	f841 3b04 	str.w	r3, [r1], #4
 800721a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800721e:	d2e6      	bcs.n	80071ee <quorem+0xa4>
 8007220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007228:	b922      	cbnz	r2, 8007234 <quorem+0xea>
 800722a:	3b04      	subs	r3, #4
 800722c:	429d      	cmp	r5, r3
 800722e:	461a      	mov	r2, r3
 8007230:	d30b      	bcc.n	800724a <quorem+0x100>
 8007232:	613c      	str	r4, [r7, #16]
 8007234:	3601      	adds	r6, #1
 8007236:	4630      	mov	r0, r6
 8007238:	b003      	add	sp, #12
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	3b04      	subs	r3, #4
 8007242:	2a00      	cmp	r2, #0
 8007244:	d1cb      	bne.n	80071de <quorem+0x94>
 8007246:	3c01      	subs	r4, #1
 8007248:	e7c6      	b.n	80071d8 <quorem+0x8e>
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	3b04      	subs	r3, #4
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1ef      	bne.n	8007232 <quorem+0xe8>
 8007252:	3c01      	subs	r4, #1
 8007254:	e7ea      	b.n	800722c <quorem+0xe2>
 8007256:	2000      	movs	r0, #0
 8007258:	e7ee      	b.n	8007238 <quorem+0xee>
 800725a:	0000      	movs	r0, r0
 800725c:	0000      	movs	r0, r0
	...

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	69c7      	ldr	r7, [r0, #28]
 8007266:	b097      	sub	sp, #92	@ 0x5c
 8007268:	ed8d 0b04 	vstr	d0, [sp, #16]
 800726c:	ec55 4b10 	vmov	r4, r5, d0
 8007270:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007272:	9107      	str	r1, [sp, #28]
 8007274:	4681      	mov	r9, r0
 8007276:	920c      	str	r2, [sp, #48]	@ 0x30
 8007278:	9311      	str	r3, [sp, #68]	@ 0x44
 800727a:	b97f      	cbnz	r7, 800729c <_dtoa_r+0x3c>
 800727c:	2010      	movs	r0, #16
 800727e:	f000 fe09 	bl	8007e94 <malloc>
 8007282:	4602      	mov	r2, r0
 8007284:	f8c9 001c 	str.w	r0, [r9, #28]
 8007288:	b920      	cbnz	r0, 8007294 <_dtoa_r+0x34>
 800728a:	4ba9      	ldr	r3, [pc, #676]	@ (8007530 <_dtoa_r+0x2d0>)
 800728c:	21ef      	movs	r1, #239	@ 0xef
 800728e:	48a9      	ldr	r0, [pc, #676]	@ (8007534 <_dtoa_r+0x2d4>)
 8007290:	f001 fc6c 	bl	8008b6c <__assert_func>
 8007294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007298:	6007      	str	r7, [r0, #0]
 800729a:	60c7      	str	r7, [r0, #12]
 800729c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	b159      	cbz	r1, 80072bc <_dtoa_r+0x5c>
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	604a      	str	r2, [r1, #4]
 80072a8:	2301      	movs	r3, #1
 80072aa:	4093      	lsls	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 fee6 	bl	8008080 <_Bfree>
 80072b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	1e2b      	subs	r3, r5, #0
 80072be:	bfb9      	ittee	lt
 80072c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	9305      	strlt	r3, [sp, #20]
 80072c6:	2300      	movge	r3, #0
 80072c8:	6033      	strge	r3, [r6, #0]
 80072ca:	9f05      	ldr	r7, [sp, #20]
 80072cc:	4b9a      	ldr	r3, [pc, #616]	@ (8007538 <_dtoa_r+0x2d8>)
 80072ce:	bfbc      	itt	lt
 80072d0:	2201      	movlt	r2, #1
 80072d2:	6032      	strlt	r2, [r6, #0]
 80072d4:	43bb      	bics	r3, r7
 80072d6:	d112      	bne.n	80072fe <_dtoa_r+0x9e>
 80072d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80072da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072e4:	4323      	orrs	r3, r4
 80072e6:	f000 855a 	beq.w	8007d9e <_dtoa_r+0xb3e>
 80072ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800754c <_dtoa_r+0x2ec>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 855c 	beq.w	8007dae <_dtoa_r+0xb4e>
 80072f6:	f10a 0303 	add.w	r3, sl, #3
 80072fa:	f000 bd56 	b.w	8007daa <_dtoa_r+0xb4a>
 80072fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007302:	2200      	movs	r2, #0
 8007304:	ec51 0b17 	vmov	r0, r1, d7
 8007308:	2300      	movs	r3, #0
 800730a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800730e:	f7f9 fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007312:	4680      	mov	r8, r0
 8007314:	b158      	cbz	r0, 800732e <_dtoa_r+0xce>
 8007316:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007318:	2301      	movs	r3, #1
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800731e:	b113      	cbz	r3, 8007326 <_dtoa_r+0xc6>
 8007320:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007322:	4b86      	ldr	r3, [pc, #536]	@ (800753c <_dtoa_r+0x2dc>)
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007550 <_dtoa_r+0x2f0>
 800732a:	f000 bd40 	b.w	8007dae <_dtoa_r+0xb4e>
 800732e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007332:	aa14      	add	r2, sp, #80	@ 0x50
 8007334:	a915      	add	r1, sp, #84	@ 0x54
 8007336:	4648      	mov	r0, r9
 8007338:	f001 f984 	bl	8008644 <__d2b>
 800733c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007340:	9002      	str	r0, [sp, #8]
 8007342:	2e00      	cmp	r6, #0
 8007344:	d078      	beq.n	8007438 <_dtoa_r+0x1d8>
 8007346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007348:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800734c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800735c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007360:	4619      	mov	r1, r3
 8007362:	2200      	movs	r2, #0
 8007364:	4b76      	ldr	r3, [pc, #472]	@ (8007540 <_dtoa_r+0x2e0>)
 8007366:	f7f8 ff97 	bl	8000298 <__aeabi_dsub>
 800736a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007518 <_dtoa_r+0x2b8>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f9 f94a 	bl	8000608 <__aeabi_dmul>
 8007374:	a36a      	add	r3, pc, #424	@ (adr r3, 8007520 <_dtoa_r+0x2c0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 ff8f 	bl	800029c <__adddf3>
 800737e:	4604      	mov	r4, r0
 8007380:	4630      	mov	r0, r6
 8007382:	460d      	mov	r5, r1
 8007384:	f7f9 f8d6 	bl	8000534 <__aeabi_i2d>
 8007388:	a367      	add	r3, pc, #412	@ (adr r3, 8007528 <_dtoa_r+0x2c8>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 f93b 	bl	8000608 <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff7f 	bl	800029c <__adddf3>
 800739e:	4604      	mov	r4, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	f7f9 fbe1 	bl	8000b68 <__aeabi_d2iz>
 80073a6:	2200      	movs	r2, #0
 80073a8:	4607      	mov	r7, r0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f9 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80073b4:	b140      	cbz	r0, 80073c8 <_dtoa_r+0x168>
 80073b6:	4638      	mov	r0, r7
 80073b8:	f7f9 f8bc 	bl	8000534 <__aeabi_i2d>
 80073bc:	4622      	mov	r2, r4
 80073be:	462b      	mov	r3, r5
 80073c0:	f7f9 fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80073c4:	b900      	cbnz	r0, 80073c8 <_dtoa_r+0x168>
 80073c6:	3f01      	subs	r7, #1
 80073c8:	2f16      	cmp	r7, #22
 80073ca:	d852      	bhi.n	8007472 <_dtoa_r+0x212>
 80073cc:	4b5d      	ldr	r3, [pc, #372]	@ (8007544 <_dtoa_r+0x2e4>)
 80073ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073da:	f7f9 fb87 	bl	8000aec <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d049      	beq.n	8007476 <_dtoa_r+0x216>
 80073e2:	3f01      	subs	r7, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80073e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073ea:	1b9b      	subs	r3, r3, r6
 80073ec:	1e5a      	subs	r2, r3, #1
 80073ee:	bf45      	ittet	mi
 80073f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80073f4:	9300      	strmi	r3, [sp, #0]
 80073f6:	2300      	movpl	r3, #0
 80073f8:	2300      	movmi	r3, #0
 80073fa:	9206      	str	r2, [sp, #24]
 80073fc:	bf54      	ite	pl
 80073fe:	9300      	strpl	r3, [sp, #0]
 8007400:	9306      	strmi	r3, [sp, #24]
 8007402:	2f00      	cmp	r7, #0
 8007404:	db39      	blt.n	800747a <_dtoa_r+0x21a>
 8007406:	9b06      	ldr	r3, [sp, #24]
 8007408:	970d      	str	r7, [sp, #52]	@ 0x34
 800740a:	443b      	add	r3, r7
 800740c:	9306      	str	r3, [sp, #24]
 800740e:	2300      	movs	r3, #0
 8007410:	9308      	str	r3, [sp, #32]
 8007412:	9b07      	ldr	r3, [sp, #28]
 8007414:	2b09      	cmp	r3, #9
 8007416:	d863      	bhi.n	80074e0 <_dtoa_r+0x280>
 8007418:	2b05      	cmp	r3, #5
 800741a:	bfc4      	itt	gt
 800741c:	3b04      	subgt	r3, #4
 800741e:	9307      	strgt	r3, [sp, #28]
 8007420:	9b07      	ldr	r3, [sp, #28]
 8007422:	f1a3 0302 	sub.w	r3, r3, #2
 8007426:	bfcc      	ite	gt
 8007428:	2400      	movgt	r4, #0
 800742a:	2401      	movle	r4, #1
 800742c:	2b03      	cmp	r3, #3
 800742e:	d863      	bhi.n	80074f8 <_dtoa_r+0x298>
 8007430:	e8df f003 	tbb	[pc, r3]
 8007434:	2b375452 	.word	0x2b375452
 8007438:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800743c:	441e      	add	r6, r3
 800743e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007442:	2b20      	cmp	r3, #32
 8007444:	bfc1      	itttt	gt
 8007446:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800744a:	409f      	lslgt	r7, r3
 800744c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007450:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007454:	bfd6      	itet	le
 8007456:	f1c3 0320 	rsble	r3, r3, #32
 800745a:	ea47 0003 	orrgt.w	r0, r7, r3
 800745e:	fa04 f003 	lslle.w	r0, r4, r3
 8007462:	f7f9 f857 	bl	8000514 <__aeabi_ui2d>
 8007466:	2201      	movs	r2, #1
 8007468:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800746c:	3e01      	subs	r6, #1
 800746e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007470:	e776      	b.n	8007360 <_dtoa_r+0x100>
 8007472:	2301      	movs	r3, #1
 8007474:	e7b7      	b.n	80073e6 <_dtoa_r+0x186>
 8007476:	9010      	str	r0, [sp, #64]	@ 0x40
 8007478:	e7b6      	b.n	80073e8 <_dtoa_r+0x188>
 800747a:	9b00      	ldr	r3, [sp, #0]
 800747c:	1bdb      	subs	r3, r3, r7
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	427b      	negs	r3, r7
 8007482:	9308      	str	r3, [sp, #32]
 8007484:	2300      	movs	r3, #0
 8007486:	930d      	str	r3, [sp, #52]	@ 0x34
 8007488:	e7c3      	b.n	8007412 <_dtoa_r+0x1b2>
 800748a:	2301      	movs	r3, #1
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007490:	eb07 0b03 	add.w	fp, r7, r3
 8007494:	f10b 0301 	add.w	r3, fp, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	bfb8      	it	lt
 800749e:	2301      	movlt	r3, #1
 80074a0:	e006      	b.n	80074b0 <_dtoa_r+0x250>
 80074a2:	2301      	movs	r3, #1
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dd28      	ble.n	80074fe <_dtoa_r+0x29e>
 80074ac:	469b      	mov	fp, r3
 80074ae:	9303      	str	r3, [sp, #12]
 80074b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80074b4:	2100      	movs	r1, #0
 80074b6:	2204      	movs	r2, #4
 80074b8:	f102 0514 	add.w	r5, r2, #20
 80074bc:	429d      	cmp	r5, r3
 80074be:	d926      	bls.n	800750e <_dtoa_r+0x2ae>
 80074c0:	6041      	str	r1, [r0, #4]
 80074c2:	4648      	mov	r0, r9
 80074c4:	f000 fd9c 	bl	8008000 <_Balloc>
 80074c8:	4682      	mov	sl, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d142      	bne.n	8007554 <_dtoa_r+0x2f4>
 80074ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <_dtoa_r+0x2e8>)
 80074d0:	4602      	mov	r2, r0
 80074d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80074d6:	e6da      	b.n	800728e <_dtoa_r+0x2e>
 80074d8:	2300      	movs	r3, #0
 80074da:	e7e3      	b.n	80074a4 <_dtoa_r+0x244>
 80074dc:	2300      	movs	r3, #0
 80074de:	e7d5      	b.n	800748c <_dtoa_r+0x22c>
 80074e0:	2401      	movs	r4, #1
 80074e2:	2300      	movs	r3, #0
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80074e8:	f04f 3bff 	mov.w	fp, #4294967295
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80074f2:	2312      	movs	r3, #18
 80074f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80074f6:	e7db      	b.n	80074b0 <_dtoa_r+0x250>
 80074f8:	2301      	movs	r3, #1
 80074fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fc:	e7f4      	b.n	80074e8 <_dtoa_r+0x288>
 80074fe:	f04f 0b01 	mov.w	fp, #1
 8007502:	f8cd b00c 	str.w	fp, [sp, #12]
 8007506:	465b      	mov	r3, fp
 8007508:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800750c:	e7d0      	b.n	80074b0 <_dtoa_r+0x250>
 800750e:	3101      	adds	r1, #1
 8007510:	0052      	lsls	r2, r2, #1
 8007512:	e7d1      	b.n	80074b8 <_dtoa_r+0x258>
 8007514:	f3af 8000 	nop.w
 8007518:	636f4361 	.word	0x636f4361
 800751c:	3fd287a7 	.word	0x3fd287a7
 8007520:	8b60c8b3 	.word	0x8b60c8b3
 8007524:	3fc68a28 	.word	0x3fc68a28
 8007528:	509f79fb 	.word	0x509f79fb
 800752c:	3fd34413 	.word	0x3fd34413
 8007530:	080092c9 	.word	0x080092c9
 8007534:	080092e0 	.word	0x080092e0
 8007538:	7ff00000 	.word	0x7ff00000
 800753c:	08009299 	.word	0x08009299
 8007540:	3ff80000 	.word	0x3ff80000
 8007544:	08009430 	.word	0x08009430
 8007548:	08009338 	.word	0x08009338
 800754c:	080092c5 	.word	0x080092c5
 8007550:	08009298 	.word	0x08009298
 8007554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	2b0e      	cmp	r3, #14
 800755e:	f200 80a1 	bhi.w	80076a4 <_dtoa_r+0x444>
 8007562:	2c00      	cmp	r4, #0
 8007564:	f000 809e 	beq.w	80076a4 <_dtoa_r+0x444>
 8007568:	2f00      	cmp	r7, #0
 800756a:	dd33      	ble.n	80075d4 <_dtoa_r+0x374>
 800756c:	4b9c      	ldr	r3, [pc, #624]	@ (80077e0 <_dtoa_r+0x580>)
 800756e:	f007 020f 	and.w	r2, r7, #15
 8007572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007576:	ed93 7b00 	vldr	d7, [r3]
 800757a:	05f8      	lsls	r0, r7, #23
 800757c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007580:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007584:	d516      	bpl.n	80075b4 <_dtoa_r+0x354>
 8007586:	4b97      	ldr	r3, [pc, #604]	@ (80077e4 <_dtoa_r+0x584>)
 8007588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800758c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007590:	f7f9 f964 	bl	800085c <__aeabi_ddiv>
 8007594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007598:	f004 040f 	and.w	r4, r4, #15
 800759c:	2603      	movs	r6, #3
 800759e:	4d91      	ldr	r5, [pc, #580]	@ (80077e4 <_dtoa_r+0x584>)
 80075a0:	b954      	cbnz	r4, 80075b8 <_dtoa_r+0x358>
 80075a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075aa:	f7f9 f957 	bl	800085c <__aeabi_ddiv>
 80075ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075b2:	e028      	b.n	8007606 <_dtoa_r+0x3a6>
 80075b4:	2602      	movs	r6, #2
 80075b6:	e7f2      	b.n	800759e <_dtoa_r+0x33e>
 80075b8:	07e1      	lsls	r1, r4, #31
 80075ba:	d508      	bpl.n	80075ce <_dtoa_r+0x36e>
 80075bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80075c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075c4:	f7f9 f820 	bl	8000608 <__aeabi_dmul>
 80075c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075cc:	3601      	adds	r6, #1
 80075ce:	1064      	asrs	r4, r4, #1
 80075d0:	3508      	adds	r5, #8
 80075d2:	e7e5      	b.n	80075a0 <_dtoa_r+0x340>
 80075d4:	f000 80af 	beq.w	8007736 <_dtoa_r+0x4d6>
 80075d8:	427c      	negs	r4, r7
 80075da:	4b81      	ldr	r3, [pc, #516]	@ (80077e0 <_dtoa_r+0x580>)
 80075dc:	4d81      	ldr	r5, [pc, #516]	@ (80077e4 <_dtoa_r+0x584>)
 80075de:	f004 020f 	and.w	r2, r4, #15
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075ee:	f7f9 f80b 	bl	8000608 <__aeabi_dmul>
 80075f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f6:	1124      	asrs	r4, r4, #4
 80075f8:	2300      	movs	r3, #0
 80075fa:	2602      	movs	r6, #2
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	f040 808f 	bne.w	8007720 <_dtoa_r+0x4c0>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1d3      	bne.n	80075ae <_dtoa_r+0x34e>
 8007606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007608:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8094 	beq.w	800773a <_dtoa_r+0x4da>
 8007612:	4b75      	ldr	r3, [pc, #468]	@ (80077e8 <_dtoa_r+0x588>)
 8007614:	2200      	movs	r2, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 fa67 	bl	8000aec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f000 808b 	beq.w	800773a <_dtoa_r+0x4da>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8087 	beq.w	800773a <_dtoa_r+0x4da>
 800762c:	f1bb 0f00 	cmp.w	fp, #0
 8007630:	dd34      	ble.n	800769c <_dtoa_r+0x43c>
 8007632:	4620      	mov	r0, r4
 8007634:	4b6d      	ldr	r3, [pc, #436]	@ (80077ec <_dtoa_r+0x58c>)
 8007636:	2200      	movs	r2, #0
 8007638:	4629      	mov	r1, r5
 800763a:	f7f8 ffe5 	bl	8000608 <__aeabi_dmul>
 800763e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007642:	f107 38ff 	add.w	r8, r7, #4294967295
 8007646:	3601      	adds	r6, #1
 8007648:	465c      	mov	r4, fp
 800764a:	4630      	mov	r0, r6
 800764c:	f7f8 ff72 	bl	8000534 <__aeabi_i2d>
 8007650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	4b65      	ldr	r3, [pc, #404]	@ (80077f0 <_dtoa_r+0x590>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fe1e 	bl	800029c <__adddf3>
 8007660:	4605      	mov	r5, r0
 8007662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007666:	2c00      	cmp	r4, #0
 8007668:	d16a      	bne.n	8007740 <_dtoa_r+0x4e0>
 800766a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800766e:	4b61      	ldr	r3, [pc, #388]	@ (80077f4 <_dtoa_r+0x594>)
 8007670:	2200      	movs	r2, #0
 8007672:	f7f8 fe11 	bl	8000298 <__aeabi_dsub>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800767e:	462a      	mov	r2, r5
 8007680:	4633      	mov	r3, r6
 8007682:	f7f9 fa51 	bl	8000b28 <__aeabi_dcmpgt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 8298 	bne.w	8007bbc <_dtoa_r+0x95c>
 800768c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007690:	462a      	mov	r2, r5
 8007692:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007696:	f7f9 fa29 	bl	8000aec <__aeabi_dcmplt>
 800769a:	bb38      	cbnz	r0, 80076ec <_dtoa_r+0x48c>
 800769c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80076a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f2c0 8157 	blt.w	800795a <_dtoa_r+0x6fa>
 80076ac:	2f0e      	cmp	r7, #14
 80076ae:	f300 8154 	bgt.w	800795a <_dtoa_r+0x6fa>
 80076b2:	4b4b      	ldr	r3, [pc, #300]	@ (80077e0 <_dtoa_r+0x580>)
 80076b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076b8:	ed93 7b00 	vldr	d7, [r3]
 80076bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076be:	2b00      	cmp	r3, #0
 80076c0:	ed8d 7b00 	vstr	d7, [sp]
 80076c4:	f280 80e5 	bge.w	8007892 <_dtoa_r+0x632>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f300 80e1 	bgt.w	8007892 <_dtoa_r+0x632>
 80076d0:	d10c      	bne.n	80076ec <_dtoa_r+0x48c>
 80076d2:	4b48      	ldr	r3, [pc, #288]	@ (80077f4 <_dtoa_r+0x594>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	ec51 0b17 	vmov	r0, r1, d7
 80076da:	f7f8 ff95 	bl	8000608 <__aeabi_dmul>
 80076de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e2:	f7f9 fa17 	bl	8000b14 <__aeabi_dcmpge>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f000 8266 	beq.w	8007bb8 <_dtoa_r+0x958>
 80076ec:	2400      	movs	r4, #0
 80076ee:	4625      	mov	r5, r4
 80076f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076f2:	4656      	mov	r6, sl
 80076f4:	ea6f 0803 	mvn.w	r8, r3
 80076f8:	2700      	movs	r7, #0
 80076fa:	4621      	mov	r1, r4
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fcbf 	bl	8008080 <_Bfree>
 8007702:	2d00      	cmp	r5, #0
 8007704:	f000 80bd 	beq.w	8007882 <_dtoa_r+0x622>
 8007708:	b12f      	cbz	r7, 8007716 <_dtoa_r+0x4b6>
 800770a:	42af      	cmp	r7, r5
 800770c:	d003      	beq.n	8007716 <_dtoa_r+0x4b6>
 800770e:	4639      	mov	r1, r7
 8007710:	4648      	mov	r0, r9
 8007712:	f000 fcb5 	bl	8008080 <_Bfree>
 8007716:	4629      	mov	r1, r5
 8007718:	4648      	mov	r0, r9
 800771a:	f000 fcb1 	bl	8008080 <_Bfree>
 800771e:	e0b0      	b.n	8007882 <_dtoa_r+0x622>
 8007720:	07e2      	lsls	r2, r4, #31
 8007722:	d505      	bpl.n	8007730 <_dtoa_r+0x4d0>
 8007724:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007728:	f7f8 ff6e 	bl	8000608 <__aeabi_dmul>
 800772c:	3601      	adds	r6, #1
 800772e:	2301      	movs	r3, #1
 8007730:	1064      	asrs	r4, r4, #1
 8007732:	3508      	adds	r5, #8
 8007734:	e762      	b.n	80075fc <_dtoa_r+0x39c>
 8007736:	2602      	movs	r6, #2
 8007738:	e765      	b.n	8007606 <_dtoa_r+0x3a6>
 800773a:	9c03      	ldr	r4, [sp, #12]
 800773c:	46b8      	mov	r8, r7
 800773e:	e784      	b.n	800764a <_dtoa_r+0x3ea>
 8007740:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <_dtoa_r+0x580>)
 8007742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800774c:	4454      	add	r4, sl
 800774e:	2900      	cmp	r1, #0
 8007750:	d054      	beq.n	80077fc <_dtoa_r+0x59c>
 8007752:	4929      	ldr	r1, [pc, #164]	@ (80077f8 <_dtoa_r+0x598>)
 8007754:	2000      	movs	r0, #0
 8007756:	f7f9 f881 	bl	800085c <__aeabi_ddiv>
 800775a:	4633      	mov	r3, r6
 800775c:	462a      	mov	r2, r5
 800775e:	f7f8 fd9b 	bl	8000298 <__aeabi_dsub>
 8007762:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007766:	4656      	mov	r6, sl
 8007768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800776c:	f7f9 f9fc 	bl	8000b68 <__aeabi_d2iz>
 8007770:	4605      	mov	r5, r0
 8007772:	f7f8 fedf 	bl	8000534 <__aeabi_i2d>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777e:	f7f8 fd8b 	bl	8000298 <__aeabi_dsub>
 8007782:	3530      	adds	r5, #48	@ 0x30
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800778c:	f806 5b01 	strb.w	r5, [r6], #1
 8007790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007794:	f7f9 f9aa 	bl	8000aec <__aeabi_dcmplt>
 8007798:	2800      	cmp	r0, #0
 800779a:	d172      	bne.n	8007882 <_dtoa_r+0x622>
 800779c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a0:	4911      	ldr	r1, [pc, #68]	@ (80077e8 <_dtoa_r+0x588>)
 80077a2:	2000      	movs	r0, #0
 80077a4:	f7f8 fd78 	bl	8000298 <__aeabi_dsub>
 80077a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077ac:	f7f9 f99e 	bl	8000aec <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f040 80b4 	bne.w	800791e <_dtoa_r+0x6be>
 80077b6:	42a6      	cmp	r6, r4
 80077b8:	f43f af70 	beq.w	800769c <_dtoa_r+0x43c>
 80077bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <_dtoa_r+0x58c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7f8 ff20 	bl	8000608 <__aeabi_dmul>
 80077c8:	4b08      	ldr	r3, [pc, #32]	@ (80077ec <_dtoa_r+0x58c>)
 80077ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077ce:	2200      	movs	r2, #0
 80077d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d4:	f7f8 ff18 	bl	8000608 <__aeabi_dmul>
 80077d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077dc:	e7c4      	b.n	8007768 <_dtoa_r+0x508>
 80077de:	bf00      	nop
 80077e0:	08009430 	.word	0x08009430
 80077e4:	08009408 	.word	0x08009408
 80077e8:	3ff00000 	.word	0x3ff00000
 80077ec:	40240000 	.word	0x40240000
 80077f0:	401c0000 	.word	0x401c0000
 80077f4:	40140000 	.word	0x40140000
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	f7f8 ff02 	bl	8000608 <__aeabi_dmul>
 8007804:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007808:	9413      	str	r4, [sp, #76]	@ 0x4c
 800780a:	4656      	mov	r6, sl
 800780c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007810:	f7f9 f9aa 	bl	8000b68 <__aeabi_d2iz>
 8007814:	4605      	mov	r5, r0
 8007816:	f7f8 fe8d 	bl	8000534 <__aeabi_i2d>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007822:	f7f8 fd39 	bl	8000298 <__aeabi_dsub>
 8007826:	3530      	adds	r5, #48	@ 0x30
 8007828:	f806 5b01 	strb.w	r5, [r6], #1
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	42a6      	cmp	r6, r4
 8007832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	d124      	bne.n	8007886 <_dtoa_r+0x626>
 800783c:	4baf      	ldr	r3, [pc, #700]	@ (8007afc <_dtoa_r+0x89c>)
 800783e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007842:	f7f8 fd2b 	bl	800029c <__adddf3>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800784e:	f7f9 f96b 	bl	8000b28 <__aeabi_dcmpgt>
 8007852:	2800      	cmp	r0, #0
 8007854:	d163      	bne.n	800791e <_dtoa_r+0x6be>
 8007856:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800785a:	49a8      	ldr	r1, [pc, #672]	@ (8007afc <_dtoa_r+0x89c>)
 800785c:	2000      	movs	r0, #0
 800785e:	f7f8 fd1b 	bl	8000298 <__aeabi_dsub>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800786a:	f7f9 f93f 	bl	8000aec <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f af14 	beq.w	800769c <_dtoa_r+0x43c>
 8007874:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007876:	1e73      	subs	r3, r6, #1
 8007878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800787a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800787e:	2b30      	cmp	r3, #48	@ 0x30
 8007880:	d0f8      	beq.n	8007874 <_dtoa_r+0x614>
 8007882:	4647      	mov	r7, r8
 8007884:	e03b      	b.n	80078fe <_dtoa_r+0x69e>
 8007886:	4b9e      	ldr	r3, [pc, #632]	@ (8007b00 <_dtoa_r+0x8a0>)
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007890:	e7bc      	b.n	800780c <_dtoa_r+0x5ac>
 8007892:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007896:	4656      	mov	r6, sl
 8007898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 ffdc 	bl	800085c <__aeabi_ddiv>
 80078a4:	f7f9 f960 	bl	8000b68 <__aeabi_d2iz>
 80078a8:	4680      	mov	r8, r0
 80078aa:	f7f8 fe43 	bl	8000534 <__aeabi_i2d>
 80078ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b2:	f7f8 fea9 	bl	8000608 <__aeabi_dmul>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078c2:	f7f8 fce9 	bl	8000298 <__aeabi_dsub>
 80078c6:	f806 4b01 	strb.w	r4, [r6], #1
 80078ca:	9d03      	ldr	r5, [sp, #12]
 80078cc:	eba6 040a 	sub.w	r4, r6, sl
 80078d0:	42a5      	cmp	r5, r4
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	d133      	bne.n	8007940 <_dtoa_r+0x6e0>
 80078d8:	f7f8 fce0 	bl	800029c <__adddf3>
 80078dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	f7f9 f920 	bl	8000b28 <__aeabi_dcmpgt>
 80078e8:	b9c0      	cbnz	r0, 800791c <_dtoa_r+0x6bc>
 80078ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80078f6:	b110      	cbz	r0, 80078fe <_dtoa_r+0x69e>
 80078f8:	f018 0f01 	tst.w	r8, #1
 80078fc:	d10e      	bne.n	800791c <_dtoa_r+0x6bc>
 80078fe:	9902      	ldr	r1, [sp, #8]
 8007900:	4648      	mov	r0, r9
 8007902:	f000 fbbd 	bl	8008080 <_Bfree>
 8007906:	2300      	movs	r3, #0
 8007908:	7033      	strb	r3, [r6, #0]
 800790a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800790c:	3701      	adds	r7, #1
 800790e:	601f      	str	r7, [r3, #0]
 8007910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 824b 	beq.w	8007dae <_dtoa_r+0xb4e>
 8007918:	601e      	str	r6, [r3, #0]
 800791a:	e248      	b.n	8007dae <_dtoa_r+0xb4e>
 800791c:	46b8      	mov	r8, r7
 800791e:	4633      	mov	r3, r6
 8007920:	461e      	mov	r6, r3
 8007922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007926:	2a39      	cmp	r2, #57	@ 0x39
 8007928:	d106      	bne.n	8007938 <_dtoa_r+0x6d8>
 800792a:	459a      	cmp	sl, r3
 800792c:	d1f8      	bne.n	8007920 <_dtoa_r+0x6c0>
 800792e:	2230      	movs	r2, #48	@ 0x30
 8007930:	f108 0801 	add.w	r8, r8, #1
 8007934:	f88a 2000 	strb.w	r2, [sl]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	3201      	adds	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e7a0      	b.n	8007882 <_dtoa_r+0x622>
 8007940:	4b6f      	ldr	r3, [pc, #444]	@ (8007b00 <_dtoa_r+0x8a0>)
 8007942:	2200      	movs	r2, #0
 8007944:	f7f8 fe60 	bl	8000608 <__aeabi_dmul>
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	4604      	mov	r4, r0
 800794e:	460d      	mov	r5, r1
 8007950:	f7f9 f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007954:	2800      	cmp	r0, #0
 8007956:	d09f      	beq.n	8007898 <_dtoa_r+0x638>
 8007958:	e7d1      	b.n	80078fe <_dtoa_r+0x69e>
 800795a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800795c:	2a00      	cmp	r2, #0
 800795e:	f000 80ea 	beq.w	8007b36 <_dtoa_r+0x8d6>
 8007962:	9a07      	ldr	r2, [sp, #28]
 8007964:	2a01      	cmp	r2, #1
 8007966:	f300 80cd 	bgt.w	8007b04 <_dtoa_r+0x8a4>
 800796a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800796c:	2a00      	cmp	r2, #0
 800796e:	f000 80c1 	beq.w	8007af4 <_dtoa_r+0x894>
 8007972:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007976:	9c08      	ldr	r4, [sp, #32]
 8007978:	9e00      	ldr	r6, [sp, #0]
 800797a:	9a00      	ldr	r2, [sp, #0]
 800797c:	441a      	add	r2, r3
 800797e:	9200      	str	r2, [sp, #0]
 8007980:	9a06      	ldr	r2, [sp, #24]
 8007982:	2101      	movs	r1, #1
 8007984:	441a      	add	r2, r3
 8007986:	4648      	mov	r0, r9
 8007988:	9206      	str	r2, [sp, #24]
 800798a:	f000 fc2d 	bl	80081e8 <__i2b>
 800798e:	4605      	mov	r5, r0
 8007990:	b166      	cbz	r6, 80079ac <_dtoa_r+0x74c>
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	dd09      	ble.n	80079ac <_dtoa_r+0x74c>
 8007998:	42b3      	cmp	r3, r6
 800799a:	9a00      	ldr	r2, [sp, #0]
 800799c:	bfa8      	it	ge
 800799e:	4633      	movge	r3, r6
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	9200      	str	r2, [sp, #0]
 80079a4:	9a06      	ldr	r2, [sp, #24]
 80079a6:	1af6      	subs	r6, r6, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	9306      	str	r3, [sp, #24]
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	b30b      	cbz	r3, 80079f4 <_dtoa_r+0x794>
 80079b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80c6 	beq.w	8007b44 <_dtoa_r+0x8e4>
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	f000 80c0 	beq.w	8007b3e <_dtoa_r+0x8de>
 80079be:	4629      	mov	r1, r5
 80079c0:	4622      	mov	r2, r4
 80079c2:	4648      	mov	r0, r9
 80079c4:	f000 fcc8 	bl	8008358 <__pow5mult>
 80079c8:	9a02      	ldr	r2, [sp, #8]
 80079ca:	4601      	mov	r1, r0
 80079cc:	4605      	mov	r5, r0
 80079ce:	4648      	mov	r0, r9
 80079d0:	f000 fc20 	bl	8008214 <__multiply>
 80079d4:	9902      	ldr	r1, [sp, #8]
 80079d6:	4680      	mov	r8, r0
 80079d8:	4648      	mov	r0, r9
 80079da:	f000 fb51 	bl	8008080 <_Bfree>
 80079de:	9b08      	ldr	r3, [sp, #32]
 80079e0:	1b1b      	subs	r3, r3, r4
 80079e2:	9308      	str	r3, [sp, #32]
 80079e4:	f000 80b1 	beq.w	8007b4a <_dtoa_r+0x8ea>
 80079e8:	9a08      	ldr	r2, [sp, #32]
 80079ea:	4641      	mov	r1, r8
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 fcb3 	bl	8008358 <__pow5mult>
 80079f2:	9002      	str	r0, [sp, #8]
 80079f4:	2101      	movs	r1, #1
 80079f6:	4648      	mov	r0, r9
 80079f8:	f000 fbf6 	bl	80081e8 <__i2b>
 80079fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079fe:	4604      	mov	r4, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 81d8 	beq.w	8007db6 <_dtoa_r+0xb56>
 8007a06:	461a      	mov	r2, r3
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f000 fca4 	bl	8008358 <__pow5mult>
 8007a10:	9b07      	ldr	r3, [sp, #28]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	4604      	mov	r4, r0
 8007a16:	f300 809f 	bgt.w	8007b58 <_dtoa_r+0x8f8>
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 8097 	bne.w	8007b50 <_dtoa_r+0x8f0>
 8007a22:	9b05      	ldr	r3, [sp, #20]
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f040 8093 	bne.w	8007b54 <_dtoa_r+0x8f4>
 8007a2e:	9b05      	ldr	r3, [sp, #20]
 8007a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	0d1b      	lsrs	r3, r3, #20
 8007a36:	051b      	lsls	r3, r3, #20
 8007a38:	b133      	cbz	r3, 8007a48 <_dtoa_r+0x7e8>
 8007a3a:	9b00      	ldr	r3, [sp, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	3301      	adds	r3, #1
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	2301      	movs	r3, #1
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 81b8 	beq.w	8007dc2 <_dtoa_r+0xb62>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a58:	6918      	ldr	r0, [r3, #16]
 8007a5a:	f000 fb79 	bl	8008150 <__hi0bits>
 8007a5e:	f1c0 0020 	rsb	r0, r0, #32
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	4418      	add	r0, r3
 8007a66:	f010 001f 	ands.w	r0, r0, #31
 8007a6a:	f000 8082 	beq.w	8007b72 <_dtoa_r+0x912>
 8007a6e:	f1c0 0320 	rsb	r3, r0, #32
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	dd73      	ble.n	8007b5e <_dtoa_r+0x8fe>
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	f1c0 001c 	rsb	r0, r0, #28
 8007a7c:	4403      	add	r3, r0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	9b06      	ldr	r3, [sp, #24]
 8007a82:	4403      	add	r3, r0
 8007a84:	4406      	add	r6, r0
 8007a86:	9306      	str	r3, [sp, #24]
 8007a88:	9b00      	ldr	r3, [sp, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd05      	ble.n	8007a9a <_dtoa_r+0x83a>
 8007a8e:	9902      	ldr	r1, [sp, #8]
 8007a90:	461a      	mov	r2, r3
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fcba 	bl	800840c <__lshift>
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dd05      	ble.n	8007aac <_dtoa_r+0x84c>
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4648      	mov	r0, r9
 8007aa6:	f000 fcb1 	bl	800840c <__lshift>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d061      	beq.n	8007b76 <_dtoa_r+0x916>
 8007ab2:	9802      	ldr	r0, [sp, #8]
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f000 fd15 	bl	80084e4 <__mcmp>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	da5b      	bge.n	8007b76 <_dtoa_r+0x916>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9902      	ldr	r1, [sp, #8]
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f000 fafd 	bl	80080c4 <__multadd>
 8007aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007acc:	9002      	str	r0, [sp, #8]
 8007ace:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8177 	beq.w	8007dc6 <_dtoa_r+0xb66>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	2300      	movs	r3, #0
 8007adc:	220a      	movs	r2, #10
 8007ade:	4648      	mov	r0, r9
 8007ae0:	f000 faf0 	bl	80080c4 <__multadd>
 8007ae4:	f1bb 0f00 	cmp.w	fp, #0
 8007ae8:	4605      	mov	r5, r0
 8007aea:	dc6f      	bgt.n	8007bcc <_dtoa_r+0x96c>
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	dc49      	bgt.n	8007b86 <_dtoa_r+0x926>
 8007af2:	e06b      	b.n	8007bcc <_dtoa_r+0x96c>
 8007af4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007af6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007afa:	e73c      	b.n	8007976 <_dtoa_r+0x716>
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	40240000 	.word	0x40240000
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	1e5c      	subs	r4, r3, #1
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	db09      	blt.n	8007b22 <_dtoa_r+0x8c2>
 8007b0e:	1b1c      	subs	r4, r3, r4
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f6bf af30 	bge.w	8007978 <_dtoa_r+0x718>
 8007b18:	9b00      	ldr	r3, [sp, #0]
 8007b1a:	9a03      	ldr	r2, [sp, #12]
 8007b1c:	1a9e      	subs	r6, r3, r2
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e72b      	b.n	800797a <_dtoa_r+0x71a>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b26:	9408      	str	r4, [sp, #32]
 8007b28:	1ae3      	subs	r3, r4, r3
 8007b2a:	441a      	add	r2, r3
 8007b2c:	9e00      	ldr	r6, [sp, #0]
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	920d      	str	r2, [sp, #52]	@ 0x34
 8007b32:	2400      	movs	r4, #0
 8007b34:	e721      	b.n	800797a <_dtoa_r+0x71a>
 8007b36:	9c08      	ldr	r4, [sp, #32]
 8007b38:	9e00      	ldr	r6, [sp, #0]
 8007b3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007b3c:	e728      	b.n	8007990 <_dtoa_r+0x730>
 8007b3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007b42:	e751      	b.n	80079e8 <_dtoa_r+0x788>
 8007b44:	9a08      	ldr	r2, [sp, #32]
 8007b46:	9902      	ldr	r1, [sp, #8]
 8007b48:	e750      	b.n	80079ec <_dtoa_r+0x78c>
 8007b4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007b4e:	e751      	b.n	80079f4 <_dtoa_r+0x794>
 8007b50:	2300      	movs	r3, #0
 8007b52:	e779      	b.n	8007a48 <_dtoa_r+0x7e8>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	e777      	b.n	8007a48 <_dtoa_r+0x7e8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9308      	str	r3, [sp, #32]
 8007b5c:	e779      	b.n	8007a52 <_dtoa_r+0x7f2>
 8007b5e:	d093      	beq.n	8007a88 <_dtoa_r+0x828>
 8007b60:	9a00      	ldr	r2, [sp, #0]
 8007b62:	331c      	adds	r3, #28
 8007b64:	441a      	add	r2, r3
 8007b66:	9200      	str	r2, [sp, #0]
 8007b68:	9a06      	ldr	r2, [sp, #24]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	441e      	add	r6, r3
 8007b6e:	9206      	str	r2, [sp, #24]
 8007b70:	e78a      	b.n	8007a88 <_dtoa_r+0x828>
 8007b72:	4603      	mov	r3, r0
 8007b74:	e7f4      	b.n	8007b60 <_dtoa_r+0x900>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	46b8      	mov	r8, r7
 8007b7c:	dc20      	bgt.n	8007bc0 <_dtoa_r+0x960>
 8007b7e:	469b      	mov	fp, r3
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	dd1e      	ble.n	8007bc4 <_dtoa_r+0x964>
 8007b86:	f1bb 0f00 	cmp.w	fp, #0
 8007b8a:	f47f adb1 	bne.w	80076f0 <_dtoa_r+0x490>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	465b      	mov	r3, fp
 8007b92:	2205      	movs	r2, #5
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fa95 	bl	80080c4 <__multadd>
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	9802      	ldr	r0, [sp, #8]
 8007ba0:	f000 fca0 	bl	80084e4 <__mcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f77f ada3 	ble.w	80076f0 <_dtoa_r+0x490>
 8007baa:	4656      	mov	r6, sl
 8007bac:	2331      	movs	r3, #49	@ 0x31
 8007bae:	f806 3b01 	strb.w	r3, [r6], #1
 8007bb2:	f108 0801 	add.w	r8, r8, #1
 8007bb6:	e59f      	b.n	80076f8 <_dtoa_r+0x498>
 8007bb8:	9c03      	ldr	r4, [sp, #12]
 8007bba:	46b8      	mov	r8, r7
 8007bbc:	4625      	mov	r5, r4
 8007bbe:	e7f4      	b.n	8007baa <_dtoa_r+0x94a>
 8007bc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8101 	beq.w	8007dce <_dtoa_r+0xb6e>
 8007bcc:	2e00      	cmp	r6, #0
 8007bce:	dd05      	ble.n	8007bdc <_dtoa_r+0x97c>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fc19 	bl	800840c <__lshift>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	9b08      	ldr	r3, [sp, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d05c      	beq.n	8007c9c <_dtoa_r+0xa3c>
 8007be2:	6869      	ldr	r1, [r5, #4]
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fa0b 	bl	8008000 <_Balloc>
 8007bea:	4606      	mov	r6, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <_dtoa_r+0x99a>
 8007bee:	4b82      	ldr	r3, [pc, #520]	@ (8007df8 <_dtoa_r+0xb98>)
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bf6:	f7ff bb4a 	b.w	800728e <_dtoa_r+0x2e>
 8007bfa:	692a      	ldr	r2, [r5, #16]
 8007bfc:	3202      	adds	r2, #2
 8007bfe:	0092      	lsls	r2, r2, #2
 8007c00:	f105 010c 	add.w	r1, r5, #12
 8007c04:	300c      	adds	r0, #12
 8007c06:	f000 ffa3 	bl	8008b50 <memcpy>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4648      	mov	r0, r9
 8007c10:	f000 fbfc 	bl	800840c <__lshift>
 8007c14:	f10a 0301 	add.w	r3, sl, #1
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	eb0a 030b 	add.w	r3, sl, fp
 8007c1e:	9308      	str	r3, [sp, #32]
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	462f      	mov	r7, r5
 8007c28:	9306      	str	r3, [sp, #24]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	9b00      	ldr	r3, [sp, #0]
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	4621      	mov	r1, r4
 8007c32:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c36:	f7ff fa88 	bl	800714a <quorem>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	3330      	adds	r3, #48	@ 0x30
 8007c3e:	9003      	str	r0, [sp, #12]
 8007c40:	4639      	mov	r1, r7
 8007c42:	9802      	ldr	r0, [sp, #8]
 8007c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c46:	f000 fc4d 	bl	80084e4 <__mcmp>
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	9004      	str	r0, [sp, #16]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4648      	mov	r0, r9
 8007c52:	f000 fc63 	bl	800851c <__mdiff>
 8007c56:	68c2      	ldr	r2, [r0, #12]
 8007c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	bb02      	cbnz	r2, 8007ca0 <_dtoa_r+0xa40>
 8007c5e:	4601      	mov	r1, r0
 8007c60:	9802      	ldr	r0, [sp, #8]
 8007c62:	f000 fc3f 	bl	80084e4 <__mcmp>
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	4602      	mov	r2, r0
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c72:	f000 fa05 	bl	8008080 <_Bfree>
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c7a:	9e00      	ldr	r6, [sp, #0]
 8007c7c:	ea42 0103 	orr.w	r1, r2, r3
 8007c80:	9b06      	ldr	r3, [sp, #24]
 8007c82:	4319      	orrs	r1, r3
 8007c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c86:	d10d      	bne.n	8007ca4 <_dtoa_r+0xa44>
 8007c88:	2b39      	cmp	r3, #57	@ 0x39
 8007c8a:	d027      	beq.n	8007cdc <_dtoa_r+0xa7c>
 8007c8c:	9a04      	ldr	r2, [sp, #16]
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	dd01      	ble.n	8007c96 <_dtoa_r+0xa36>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	3331      	adds	r3, #49	@ 0x31
 8007c96:	f88b 3000 	strb.w	r3, [fp]
 8007c9a:	e52e      	b.n	80076fa <_dtoa_r+0x49a>
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	e7b9      	b.n	8007c14 <_dtoa_r+0x9b4>
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	e7e2      	b.n	8007c6a <_dtoa_r+0xa0a>
 8007ca4:	9904      	ldr	r1, [sp, #16]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	db04      	blt.n	8007cb4 <_dtoa_r+0xa54>
 8007caa:	9807      	ldr	r0, [sp, #28]
 8007cac:	4301      	orrs	r1, r0
 8007cae:	9806      	ldr	r0, [sp, #24]
 8007cb0:	4301      	orrs	r1, r0
 8007cb2:	d120      	bne.n	8007cf6 <_dtoa_r+0xa96>
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	ddee      	ble.n	8007c96 <_dtoa_r+0xa36>
 8007cb8:	9902      	ldr	r1, [sp, #8]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	f000 fba4 	bl	800840c <__lshift>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	9002      	str	r0, [sp, #8]
 8007cc8:	f000 fc0c 	bl	80084e4 <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	9b00      	ldr	r3, [sp, #0]
 8007cd0:	dc02      	bgt.n	8007cd8 <_dtoa_r+0xa78>
 8007cd2:	d1e0      	bne.n	8007c96 <_dtoa_r+0xa36>
 8007cd4:	07da      	lsls	r2, r3, #31
 8007cd6:	d5de      	bpl.n	8007c96 <_dtoa_r+0xa36>
 8007cd8:	2b39      	cmp	r3, #57	@ 0x39
 8007cda:	d1da      	bne.n	8007c92 <_dtoa_r+0xa32>
 8007cdc:	2339      	movs	r3, #57	@ 0x39
 8007cde:	f88b 3000 	strb.w	r3, [fp]
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	461e      	mov	r6, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cec:	2a39      	cmp	r2, #57	@ 0x39
 8007cee:	d04e      	beq.n	8007d8e <_dtoa_r+0xb2e>
 8007cf0:	3201      	adds	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	e501      	b.n	80076fa <_dtoa_r+0x49a>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dd03      	ble.n	8007d02 <_dtoa_r+0xaa2>
 8007cfa:	2b39      	cmp	r3, #57	@ 0x39
 8007cfc:	d0ee      	beq.n	8007cdc <_dtoa_r+0xa7c>
 8007cfe:	3301      	adds	r3, #1
 8007d00:	e7c9      	b.n	8007c96 <_dtoa_r+0xa36>
 8007d02:	9a00      	ldr	r2, [sp, #0]
 8007d04:	9908      	ldr	r1, [sp, #32]
 8007d06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d0a:	428a      	cmp	r2, r1
 8007d0c:	d028      	beq.n	8007d60 <_dtoa_r+0xb00>
 8007d0e:	9902      	ldr	r1, [sp, #8]
 8007d10:	2300      	movs	r3, #0
 8007d12:	220a      	movs	r2, #10
 8007d14:	4648      	mov	r0, r9
 8007d16:	f000 f9d5 	bl	80080c4 <__multadd>
 8007d1a:	42af      	cmp	r7, r5
 8007d1c:	9002      	str	r0, [sp, #8]
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	f04f 020a 	mov.w	r2, #10
 8007d26:	4639      	mov	r1, r7
 8007d28:	4648      	mov	r0, r9
 8007d2a:	d107      	bne.n	8007d3c <_dtoa_r+0xadc>
 8007d2c:	f000 f9ca 	bl	80080c4 <__multadd>
 8007d30:	4607      	mov	r7, r0
 8007d32:	4605      	mov	r5, r0
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	e777      	b.n	8007c2c <_dtoa_r+0x9cc>
 8007d3c:	f000 f9c2 	bl	80080c4 <__multadd>
 8007d40:	4629      	mov	r1, r5
 8007d42:	4607      	mov	r7, r0
 8007d44:	2300      	movs	r3, #0
 8007d46:	220a      	movs	r2, #10
 8007d48:	4648      	mov	r0, r9
 8007d4a:	f000 f9bb 	bl	80080c4 <__multadd>
 8007d4e:	4605      	mov	r5, r0
 8007d50:	e7f0      	b.n	8007d34 <_dtoa_r+0xad4>
 8007d52:	f1bb 0f00 	cmp.w	fp, #0
 8007d56:	bfcc      	ite	gt
 8007d58:	465e      	movgt	r6, fp
 8007d5a:	2601      	movle	r6, #1
 8007d5c:	4456      	add	r6, sl
 8007d5e:	2700      	movs	r7, #0
 8007d60:	9902      	ldr	r1, [sp, #8]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2201      	movs	r2, #1
 8007d66:	4648      	mov	r0, r9
 8007d68:	f000 fb50 	bl	800840c <__lshift>
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	9002      	str	r0, [sp, #8]
 8007d70:	f000 fbb8 	bl	80084e4 <__mcmp>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	dcb4      	bgt.n	8007ce2 <_dtoa_r+0xa82>
 8007d78:	d102      	bne.n	8007d80 <_dtoa_r+0xb20>
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	07db      	lsls	r3, r3, #31
 8007d7e:	d4b0      	bmi.n	8007ce2 <_dtoa_r+0xa82>
 8007d80:	4633      	mov	r3, r6
 8007d82:	461e      	mov	r6, r3
 8007d84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d88:	2a30      	cmp	r2, #48	@ 0x30
 8007d8a:	d0fa      	beq.n	8007d82 <_dtoa_r+0xb22>
 8007d8c:	e4b5      	b.n	80076fa <_dtoa_r+0x49a>
 8007d8e:	459a      	cmp	sl, r3
 8007d90:	d1a8      	bne.n	8007ce4 <_dtoa_r+0xa84>
 8007d92:	2331      	movs	r3, #49	@ 0x31
 8007d94:	f108 0801 	add.w	r8, r8, #1
 8007d98:	f88a 3000 	strb.w	r3, [sl]
 8007d9c:	e4ad      	b.n	80076fa <_dtoa_r+0x49a>
 8007d9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007da0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007dfc <_dtoa_r+0xb9c>
 8007da4:	b11b      	cbz	r3, 8007dae <_dtoa_r+0xb4e>
 8007da6:	f10a 0308 	add.w	r3, sl, #8
 8007daa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4650      	mov	r0, sl
 8007db0:	b017      	add	sp, #92	@ 0x5c
 8007db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db6:	9b07      	ldr	r3, [sp, #28]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	f77f ae2e 	ble.w	8007a1a <_dtoa_r+0x7ba>
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dc0:	9308      	str	r3, [sp, #32]
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e64d      	b.n	8007a62 <_dtoa_r+0x802>
 8007dc6:	f1bb 0f00 	cmp.w	fp, #0
 8007dca:	f77f aed9 	ble.w	8007b80 <_dtoa_r+0x920>
 8007dce:	4656      	mov	r6, sl
 8007dd0:	9802      	ldr	r0, [sp, #8]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7ff f9b9 	bl	800714a <quorem>
 8007dd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8007de0:	eba6 020a 	sub.w	r2, r6, sl
 8007de4:	4593      	cmp	fp, r2
 8007de6:	ddb4      	ble.n	8007d52 <_dtoa_r+0xaf2>
 8007de8:	9902      	ldr	r1, [sp, #8]
 8007dea:	2300      	movs	r3, #0
 8007dec:	220a      	movs	r2, #10
 8007dee:	4648      	mov	r0, r9
 8007df0:	f000 f968 	bl	80080c4 <__multadd>
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	e7eb      	b.n	8007dd0 <_dtoa_r+0xb70>
 8007df8:	08009338 	.word	0x08009338
 8007dfc:	080092bc 	.word	0x080092bc

08007e00 <_free_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4605      	mov	r5, r0
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d041      	beq.n	8007e8c <_free_r+0x8c>
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f0c      	subs	r4, r1, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfb8      	it	lt
 8007e12:	18e4      	addlt	r4, r4, r3
 8007e14:	f000 f8e8 	bl	8007fe8 <__malloc_lock>
 8007e18:	4a1d      	ldr	r2, [pc, #116]	@ (8007e90 <_free_r+0x90>)
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	b933      	cbnz	r3, 8007e2c <_free_r+0x2c>
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	6014      	str	r4, [r2, #0]
 8007e22:	4628      	mov	r0, r5
 8007e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e28:	f000 b8e4 	b.w	8007ff4 <__malloc_unlock>
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d908      	bls.n	8007e42 <_free_r+0x42>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	1821      	adds	r1, r4, r0
 8007e34:	428b      	cmp	r3, r1
 8007e36:	bf01      	itttt	eq
 8007e38:	6819      	ldreq	r1, [r3, #0]
 8007e3a:	685b      	ldreq	r3, [r3, #4]
 8007e3c:	1809      	addeq	r1, r1, r0
 8007e3e:	6021      	streq	r1, [r4, #0]
 8007e40:	e7ed      	b.n	8007e1e <_free_r+0x1e>
 8007e42:	461a      	mov	r2, r3
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b10b      	cbz	r3, 8007e4c <_free_r+0x4c>
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d9fa      	bls.n	8007e42 <_free_r+0x42>
 8007e4c:	6811      	ldr	r1, [r2, #0]
 8007e4e:	1850      	adds	r0, r2, r1
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d10b      	bne.n	8007e6c <_free_r+0x6c>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	4401      	add	r1, r0
 8007e58:	1850      	adds	r0, r2, r1
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	d1e0      	bne.n	8007e22 <_free_r+0x22>
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	6053      	str	r3, [r2, #4]
 8007e66:	4408      	add	r0, r1
 8007e68:	6010      	str	r0, [r2, #0]
 8007e6a:	e7da      	b.n	8007e22 <_free_r+0x22>
 8007e6c:	d902      	bls.n	8007e74 <_free_r+0x74>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	e7d6      	b.n	8007e22 <_free_r+0x22>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	1821      	adds	r1, r4, r0
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	bf04      	itt	eq
 8007e7c:	6819      	ldreq	r1, [r3, #0]
 8007e7e:	685b      	ldreq	r3, [r3, #4]
 8007e80:	6063      	str	r3, [r4, #4]
 8007e82:	bf04      	itt	eq
 8007e84:	1809      	addeq	r1, r1, r0
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	6054      	str	r4, [r2, #4]
 8007e8a:	e7ca      	b.n	8007e22 <_free_r+0x22>
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000610 	.word	0x20000610

08007e94 <malloc>:
 8007e94:	4b02      	ldr	r3, [pc, #8]	@ (8007ea0 <malloc+0xc>)
 8007e96:	4601      	mov	r1, r0
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	f000 b825 	b.w	8007ee8 <_malloc_r>
 8007e9e:	bf00      	nop
 8007ea0:	20000034 	.word	0x20000034

08007ea4 <sbrk_aligned>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee4 <sbrk_aligned+0x40>)
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	b911      	cbnz	r1, 8007eb6 <sbrk_aligned+0x12>
 8007eb0:	f000 fe3e 	bl	8008b30 <_sbrk_r>
 8007eb4:	6030      	str	r0, [r6, #0]
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 fe39 	bl	8008b30 <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d103      	bne.n	8007eca <sbrk_aligned+0x26>
 8007ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	1cc4      	adds	r4, r0, #3
 8007ecc:	f024 0403 	bic.w	r4, r4, #3
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d0f8      	beq.n	8007ec6 <sbrk_aligned+0x22>
 8007ed4:	1a21      	subs	r1, r4, r0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fe2a 	bl	8008b30 <_sbrk_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d1f2      	bne.n	8007ec6 <sbrk_aligned+0x22>
 8007ee0:	e7ef      	b.n	8007ec2 <sbrk_aligned+0x1e>
 8007ee2:	bf00      	nop
 8007ee4:	2000060c 	.word	0x2000060c

08007ee8 <_malloc_r>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d904      	bls.n	8007f0e <_malloc_r+0x26>
 8007f04:	230c      	movs	r3, #12
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe4 <_malloc_r+0xfc>
 8007f12:	f000 f869 	bl	8007fe8 <__malloc_lock>
 8007f16:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1a:	461c      	mov	r4, r3
 8007f1c:	bb44      	cbnz	r4, 8007f70 <_malloc_r+0x88>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ffbf 	bl	8007ea4 <sbrk_aligned>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	4604      	mov	r4, r0
 8007f2a:	d158      	bne.n	8007fde <_malloc_r+0xf6>
 8007f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f30:	4627      	mov	r7, r4
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d143      	bne.n	8007fbe <_malloc_r+0xd6>
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d04b      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	eb04 0903 	add.w	r9, r4, r3
 8007f44:	f000 fdf4 	bl	8008b30 <_sbrk_r>
 8007f48:	4581      	cmp	r9, r0
 8007f4a:	d142      	bne.n	8007fd2 <_malloc_r+0xea>
 8007f4c:	6821      	ldr	r1, [r4, #0]
 8007f4e:	1a6d      	subs	r5, r5, r1
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa6 	bl	8007ea4 <sbrk_aligned>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d03a      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	442b      	add	r3, r5
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f8d8 3000 	ldr.w	r3, [r8]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	bb62      	cbnz	r2, 8007fc4 <_malloc_r+0xdc>
 8007f6a:	f8c8 7000 	str.w	r7, [r8]
 8007f6e:	e00f      	b.n	8007f90 <_malloc_r+0xa8>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	1b52      	subs	r2, r2, r5
 8007f74:	d420      	bmi.n	8007fb8 <_malloc_r+0xd0>
 8007f76:	2a0b      	cmp	r2, #11
 8007f78:	d917      	bls.n	8007faa <_malloc_r+0xc2>
 8007f7a:	1961      	adds	r1, r4, r5
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	bf18      	it	ne
 8007f82:	6059      	strne	r1, [r3, #4]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	bf08      	it	eq
 8007f88:	f8c8 1000 	streq.w	r1, [r8]
 8007f8c:	5162      	str	r2, [r4, r5]
 8007f8e:	604b      	str	r3, [r1, #4]
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f82f 	bl	8007ff4 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac2      	subs	r2, r0, r3
 8007fa2:	bf1c      	itt	ne
 8007fa4:	1a1b      	subne	r3, r3, r0
 8007fa6:	50a3      	strne	r3, [r4, r2]
 8007fa8:	e7af      	b.n	8007f0a <_malloc_r+0x22>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	bf0c      	ite	eq
 8007fb0:	f8c8 2000 	streq.w	r2, [r8]
 8007fb4:	605a      	strne	r2, [r3, #4]
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0xa8>
 8007fb8:	4623      	mov	r3, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7ae      	b.n	8007f1c <_malloc_r+0x34>
 8007fbe:	463c      	mov	r4, r7
 8007fc0:	687f      	ldr	r7, [r7, #4]
 8007fc2:	e7b6      	b.n	8007f32 <_malloc_r+0x4a>
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d1fb      	bne.n	8007fc4 <_malloc_r+0xdc>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	e7de      	b.n	8007f90 <_malloc_r+0xa8>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f80c 	bl	8007ff4 <__malloc_unlock>
 8007fdc:	e794      	b.n	8007f08 <_malloc_r+0x20>
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	e7d6      	b.n	8007f90 <_malloc_r+0xa8>
 8007fe2:	bf00      	nop
 8007fe4:	20000610 	.word	0x20000610

08007fe8 <__malloc_lock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_lock+0x8>)
 8007fea:	f7ff b8ac 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000608 	.word	0x20000608

08007ff4 <__malloc_unlock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__malloc_unlock+0x8>)
 8007ff6:	f7ff b8a7 	b.w	8007148 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000608 	.word	0x20000608

08008000 <_Balloc>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	69c6      	ldr	r6, [r0, #28]
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	b976      	cbnz	r6, 8008028 <_Balloc+0x28>
 800800a:	2010      	movs	r0, #16
 800800c:	f7ff ff42 	bl	8007e94 <malloc>
 8008010:	4602      	mov	r2, r0
 8008012:	61e0      	str	r0, [r4, #28]
 8008014:	b920      	cbnz	r0, 8008020 <_Balloc+0x20>
 8008016:	4b18      	ldr	r3, [pc, #96]	@ (8008078 <_Balloc+0x78>)
 8008018:	4818      	ldr	r0, [pc, #96]	@ (800807c <_Balloc+0x7c>)
 800801a:	216b      	movs	r1, #107	@ 0x6b
 800801c:	f000 fda6 	bl	8008b6c <__assert_func>
 8008020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008024:	6006      	str	r6, [r0, #0]
 8008026:	60c6      	str	r6, [r0, #12]
 8008028:	69e6      	ldr	r6, [r4, #28]
 800802a:	68f3      	ldr	r3, [r6, #12]
 800802c:	b183      	cbz	r3, 8008050 <_Balloc+0x50>
 800802e:	69e3      	ldr	r3, [r4, #28]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008036:	b9b8      	cbnz	r0, 8008068 <_Balloc+0x68>
 8008038:	2101      	movs	r1, #1
 800803a:	fa01 f605 	lsl.w	r6, r1, r5
 800803e:	1d72      	adds	r2, r6, #5
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fdb0 	bl	8008ba8 <_calloc_r>
 8008048:	b160      	cbz	r0, 8008064 <_Balloc+0x64>
 800804a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800804e:	e00e      	b.n	800806e <_Balloc+0x6e>
 8008050:	2221      	movs	r2, #33	@ 0x21
 8008052:	2104      	movs	r1, #4
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fda7 	bl	8008ba8 <_calloc_r>
 800805a:	69e3      	ldr	r3, [r4, #28]
 800805c:	60f0      	str	r0, [r6, #12]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e4      	bne.n	800802e <_Balloc+0x2e>
 8008064:	2000      	movs	r0, #0
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	6802      	ldr	r2, [r0, #0]
 800806a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800806e:	2300      	movs	r3, #0
 8008070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008074:	e7f7      	b.n	8008066 <_Balloc+0x66>
 8008076:	bf00      	nop
 8008078:	080092c9 	.word	0x080092c9
 800807c:	08009349 	.word	0x08009349

08008080 <_Bfree>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	69c6      	ldr	r6, [r0, #28]
 8008084:	4605      	mov	r5, r0
 8008086:	460c      	mov	r4, r1
 8008088:	b976      	cbnz	r6, 80080a8 <_Bfree+0x28>
 800808a:	2010      	movs	r0, #16
 800808c:	f7ff ff02 	bl	8007e94 <malloc>
 8008090:	4602      	mov	r2, r0
 8008092:	61e8      	str	r0, [r5, #28]
 8008094:	b920      	cbnz	r0, 80080a0 <_Bfree+0x20>
 8008096:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <_Bfree+0x3c>)
 8008098:	4809      	ldr	r0, [pc, #36]	@ (80080c0 <_Bfree+0x40>)
 800809a:	218f      	movs	r1, #143	@ 0x8f
 800809c:	f000 fd66 	bl	8008b6c <__assert_func>
 80080a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a4:	6006      	str	r6, [r0, #0]
 80080a6:	60c6      	str	r6, [r0, #12]
 80080a8:	b13c      	cbz	r4, 80080ba <_Bfree+0x3a>
 80080aa:	69eb      	ldr	r3, [r5, #28]
 80080ac:	6862      	ldr	r2, [r4, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080b4:	6021      	str	r1, [r4, #0]
 80080b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	080092c9 	.word	0x080092c9
 80080c0:	08009349 	.word	0x08009349

080080c4 <__multadd>:
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	690d      	ldr	r5, [r1, #16]
 80080ca:	4607      	mov	r7, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	461e      	mov	r6, r3
 80080d0:	f101 0c14 	add.w	ip, r1, #20
 80080d4:	2000      	movs	r0, #0
 80080d6:	f8dc 3000 	ldr.w	r3, [ip]
 80080da:	b299      	uxth	r1, r3
 80080dc:	fb02 6101 	mla	r1, r2, r1, r6
 80080e0:	0c1e      	lsrs	r6, r3, #16
 80080e2:	0c0b      	lsrs	r3, r1, #16
 80080e4:	fb02 3306 	mla	r3, r2, r6, r3
 80080e8:	b289      	uxth	r1, r1
 80080ea:	3001      	adds	r0, #1
 80080ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080f0:	4285      	cmp	r5, r0
 80080f2:	f84c 1b04 	str.w	r1, [ip], #4
 80080f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080fa:	dcec      	bgt.n	80080d6 <__multadd+0x12>
 80080fc:	b30e      	cbz	r6, 8008142 <__multadd+0x7e>
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	42ab      	cmp	r3, r5
 8008102:	dc19      	bgt.n	8008138 <__multadd+0x74>
 8008104:	6861      	ldr	r1, [r4, #4]
 8008106:	4638      	mov	r0, r7
 8008108:	3101      	adds	r1, #1
 800810a:	f7ff ff79 	bl	8008000 <_Balloc>
 800810e:	4680      	mov	r8, r0
 8008110:	b928      	cbnz	r0, 800811e <__multadd+0x5a>
 8008112:	4602      	mov	r2, r0
 8008114:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <__multadd+0x84>)
 8008116:	480d      	ldr	r0, [pc, #52]	@ (800814c <__multadd+0x88>)
 8008118:	21ba      	movs	r1, #186	@ 0xba
 800811a:	f000 fd27 	bl	8008b6c <__assert_func>
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	3202      	adds	r2, #2
 8008122:	f104 010c 	add.w	r1, r4, #12
 8008126:	0092      	lsls	r2, r2, #2
 8008128:	300c      	adds	r0, #12
 800812a:	f000 fd11 	bl	8008b50 <memcpy>
 800812e:	4621      	mov	r1, r4
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff ffa5 	bl	8008080 <_Bfree>
 8008136:	4644      	mov	r4, r8
 8008138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800813c:	3501      	adds	r5, #1
 800813e:	615e      	str	r6, [r3, #20]
 8008140:	6125      	str	r5, [r4, #16]
 8008142:	4620      	mov	r0, r4
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	08009338 	.word	0x08009338
 800814c:	08009349 	.word	0x08009349

08008150 <__hi0bits>:
 8008150:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008154:	4603      	mov	r3, r0
 8008156:	bf36      	itet	cc
 8008158:	0403      	lslcc	r3, r0, #16
 800815a:	2000      	movcs	r0, #0
 800815c:	2010      	movcc	r0, #16
 800815e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008162:	bf3c      	itt	cc
 8008164:	021b      	lslcc	r3, r3, #8
 8008166:	3008      	addcc	r0, #8
 8008168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800816c:	bf3c      	itt	cc
 800816e:	011b      	lslcc	r3, r3, #4
 8008170:	3004      	addcc	r0, #4
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008176:	bf3c      	itt	cc
 8008178:	009b      	lslcc	r3, r3, #2
 800817a:	3002      	addcc	r0, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	db05      	blt.n	800818c <__hi0bits+0x3c>
 8008180:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008184:	f100 0001 	add.w	r0, r0, #1
 8008188:	bf08      	it	eq
 800818a:	2020      	moveq	r0, #32
 800818c:	4770      	bx	lr

0800818e <__lo0bits>:
 800818e:	6803      	ldr	r3, [r0, #0]
 8008190:	4602      	mov	r2, r0
 8008192:	f013 0007 	ands.w	r0, r3, #7
 8008196:	d00b      	beq.n	80081b0 <__lo0bits+0x22>
 8008198:	07d9      	lsls	r1, r3, #31
 800819a:	d421      	bmi.n	80081e0 <__lo0bits+0x52>
 800819c:	0798      	lsls	r0, r3, #30
 800819e:	bf49      	itett	mi
 80081a0:	085b      	lsrmi	r3, r3, #1
 80081a2:	089b      	lsrpl	r3, r3, #2
 80081a4:	2001      	movmi	r0, #1
 80081a6:	6013      	strmi	r3, [r2, #0]
 80081a8:	bf5c      	itt	pl
 80081aa:	6013      	strpl	r3, [r2, #0]
 80081ac:	2002      	movpl	r0, #2
 80081ae:	4770      	bx	lr
 80081b0:	b299      	uxth	r1, r3
 80081b2:	b909      	cbnz	r1, 80081b8 <__lo0bits+0x2a>
 80081b4:	0c1b      	lsrs	r3, r3, #16
 80081b6:	2010      	movs	r0, #16
 80081b8:	b2d9      	uxtb	r1, r3
 80081ba:	b909      	cbnz	r1, 80081c0 <__lo0bits+0x32>
 80081bc:	3008      	adds	r0, #8
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	0719      	lsls	r1, r3, #28
 80081c2:	bf04      	itt	eq
 80081c4:	091b      	lsreq	r3, r3, #4
 80081c6:	3004      	addeq	r0, #4
 80081c8:	0799      	lsls	r1, r3, #30
 80081ca:	bf04      	itt	eq
 80081cc:	089b      	lsreq	r3, r3, #2
 80081ce:	3002      	addeq	r0, #2
 80081d0:	07d9      	lsls	r1, r3, #31
 80081d2:	d403      	bmi.n	80081dc <__lo0bits+0x4e>
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	f100 0001 	add.w	r0, r0, #1
 80081da:	d003      	beq.n	80081e4 <__lo0bits+0x56>
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	4770      	bx	lr
 80081e0:	2000      	movs	r0, #0
 80081e2:	4770      	bx	lr
 80081e4:	2020      	movs	r0, #32
 80081e6:	4770      	bx	lr

080081e8 <__i2b>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	460c      	mov	r4, r1
 80081ec:	2101      	movs	r1, #1
 80081ee:	f7ff ff07 	bl	8008000 <_Balloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	b928      	cbnz	r0, 8008202 <__i2b+0x1a>
 80081f6:	4b05      	ldr	r3, [pc, #20]	@ (800820c <__i2b+0x24>)
 80081f8:	4805      	ldr	r0, [pc, #20]	@ (8008210 <__i2b+0x28>)
 80081fa:	f240 1145 	movw	r1, #325	@ 0x145
 80081fe:	f000 fcb5 	bl	8008b6c <__assert_func>
 8008202:	2301      	movs	r3, #1
 8008204:	6144      	str	r4, [r0, #20]
 8008206:	6103      	str	r3, [r0, #16]
 8008208:	bd10      	pop	{r4, pc}
 800820a:	bf00      	nop
 800820c:	08009338 	.word	0x08009338
 8008210:	08009349 	.word	0x08009349

08008214 <__multiply>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	4617      	mov	r7, r2
 800821a:	690a      	ldr	r2, [r1, #16]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	429a      	cmp	r2, r3
 8008220:	bfa8      	it	ge
 8008222:	463b      	movge	r3, r7
 8008224:	4689      	mov	r9, r1
 8008226:	bfa4      	itt	ge
 8008228:	460f      	movge	r7, r1
 800822a:	4699      	movge	r9, r3
 800822c:	693d      	ldr	r5, [r7, #16]
 800822e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	eb05 060a 	add.w	r6, r5, sl
 800823a:	42b3      	cmp	r3, r6
 800823c:	b085      	sub	sp, #20
 800823e:	bfb8      	it	lt
 8008240:	3101      	addlt	r1, #1
 8008242:	f7ff fedd 	bl	8008000 <_Balloc>
 8008246:	b930      	cbnz	r0, 8008256 <__multiply+0x42>
 8008248:	4602      	mov	r2, r0
 800824a:	4b41      	ldr	r3, [pc, #260]	@ (8008350 <__multiply+0x13c>)
 800824c:	4841      	ldr	r0, [pc, #260]	@ (8008354 <__multiply+0x140>)
 800824e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008252:	f000 fc8b 	bl	8008b6c <__assert_func>
 8008256:	f100 0414 	add.w	r4, r0, #20
 800825a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800825e:	4623      	mov	r3, r4
 8008260:	2200      	movs	r2, #0
 8008262:	4573      	cmp	r3, lr
 8008264:	d320      	bcc.n	80082a8 <__multiply+0x94>
 8008266:	f107 0814 	add.w	r8, r7, #20
 800826a:	f109 0114 	add.w	r1, r9, #20
 800826e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008272:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008276:	9302      	str	r3, [sp, #8]
 8008278:	1beb      	subs	r3, r5, r7
 800827a:	3b15      	subs	r3, #21
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	3304      	adds	r3, #4
 8008282:	3715      	adds	r7, #21
 8008284:	42bd      	cmp	r5, r7
 8008286:	bf38      	it	cc
 8008288:	2304      	movcc	r3, #4
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	428b      	cmp	r3, r1
 8008292:	d80c      	bhi.n	80082ae <__multiply+0x9a>
 8008294:	2e00      	cmp	r6, #0
 8008296:	dd03      	ble.n	80082a0 <__multiply+0x8c>
 8008298:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800829c:	2b00      	cmp	r3, #0
 800829e:	d055      	beq.n	800834c <__multiply+0x138>
 80082a0:	6106      	str	r6, [r0, #16]
 80082a2:	b005      	add	sp, #20
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	f843 2b04 	str.w	r2, [r3], #4
 80082ac:	e7d9      	b.n	8008262 <__multiply+0x4e>
 80082ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80082b2:	f1ba 0f00 	cmp.w	sl, #0
 80082b6:	d01f      	beq.n	80082f8 <__multiply+0xe4>
 80082b8:	46c4      	mov	ip, r8
 80082ba:	46a1      	mov	r9, r4
 80082bc:	2700      	movs	r7, #0
 80082be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082c2:	f8d9 3000 	ldr.w	r3, [r9]
 80082c6:	fa1f fb82 	uxth.w	fp, r2
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80082d0:	443b      	add	r3, r7
 80082d2:	f8d9 7000 	ldr.w	r7, [r9]
 80082d6:	0c12      	lsrs	r2, r2, #16
 80082d8:	0c3f      	lsrs	r7, r7, #16
 80082da:	fb0a 7202 	mla	r2, sl, r2, r7
 80082de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082e8:	4565      	cmp	r5, ip
 80082ea:	f849 3b04 	str.w	r3, [r9], #4
 80082ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082f2:	d8e4      	bhi.n	80082be <__multiply+0xaa>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	50e7      	str	r7, [r4, r3]
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082fe:	3104      	adds	r1, #4
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	d020      	beq.n	8008348 <__multiply+0x134>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	4647      	mov	r7, r8
 800830a:	46a4      	mov	ip, r4
 800830c:	f04f 0a00 	mov.w	sl, #0
 8008310:	f8b7 b000 	ldrh.w	fp, [r7]
 8008314:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008318:	fb09 220b 	mla	r2, r9, fp, r2
 800831c:	4452      	add	r2, sl
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008324:	f84c 3b04 	str.w	r3, [ip], #4
 8008328:	f857 3b04 	ldr.w	r3, [r7], #4
 800832c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008330:	f8bc 3000 	ldrh.w	r3, [ip]
 8008334:	fb09 330a 	mla	r3, r9, sl, r3
 8008338:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800833c:	42bd      	cmp	r5, r7
 800833e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008342:	d8e5      	bhi.n	8008310 <__multiply+0xfc>
 8008344:	9a01      	ldr	r2, [sp, #4]
 8008346:	50a3      	str	r3, [r4, r2]
 8008348:	3404      	adds	r4, #4
 800834a:	e79f      	b.n	800828c <__multiply+0x78>
 800834c:	3e01      	subs	r6, #1
 800834e:	e7a1      	b.n	8008294 <__multiply+0x80>
 8008350:	08009338 	.word	0x08009338
 8008354:	08009349 	.word	0x08009349

08008358 <__pow5mult>:
 8008358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800835c:	4615      	mov	r5, r2
 800835e:	f012 0203 	ands.w	r2, r2, #3
 8008362:	4607      	mov	r7, r0
 8008364:	460e      	mov	r6, r1
 8008366:	d007      	beq.n	8008378 <__pow5mult+0x20>
 8008368:	4c25      	ldr	r4, [pc, #148]	@ (8008400 <__pow5mult+0xa8>)
 800836a:	3a01      	subs	r2, #1
 800836c:	2300      	movs	r3, #0
 800836e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008372:	f7ff fea7 	bl	80080c4 <__multadd>
 8008376:	4606      	mov	r6, r0
 8008378:	10ad      	asrs	r5, r5, #2
 800837a:	d03d      	beq.n	80083f8 <__pow5mult+0xa0>
 800837c:	69fc      	ldr	r4, [r7, #28]
 800837e:	b97c      	cbnz	r4, 80083a0 <__pow5mult+0x48>
 8008380:	2010      	movs	r0, #16
 8008382:	f7ff fd87 	bl	8007e94 <malloc>
 8008386:	4602      	mov	r2, r0
 8008388:	61f8      	str	r0, [r7, #28]
 800838a:	b928      	cbnz	r0, 8008398 <__pow5mult+0x40>
 800838c:	4b1d      	ldr	r3, [pc, #116]	@ (8008404 <__pow5mult+0xac>)
 800838e:	481e      	ldr	r0, [pc, #120]	@ (8008408 <__pow5mult+0xb0>)
 8008390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008394:	f000 fbea 	bl	8008b6c <__assert_func>
 8008398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800839c:	6004      	str	r4, [r0, #0]
 800839e:	60c4      	str	r4, [r0, #12]
 80083a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083a8:	b94c      	cbnz	r4, 80083be <__pow5mult+0x66>
 80083aa:	f240 2171 	movw	r1, #625	@ 0x271
 80083ae:	4638      	mov	r0, r7
 80083b0:	f7ff ff1a 	bl	80081e8 <__i2b>
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ba:	4604      	mov	r4, r0
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	f04f 0900 	mov.w	r9, #0
 80083c2:	07eb      	lsls	r3, r5, #31
 80083c4:	d50a      	bpl.n	80083dc <__pow5mult+0x84>
 80083c6:	4631      	mov	r1, r6
 80083c8:	4622      	mov	r2, r4
 80083ca:	4638      	mov	r0, r7
 80083cc:	f7ff ff22 	bl	8008214 <__multiply>
 80083d0:	4631      	mov	r1, r6
 80083d2:	4680      	mov	r8, r0
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff fe53 	bl	8008080 <_Bfree>
 80083da:	4646      	mov	r6, r8
 80083dc:	106d      	asrs	r5, r5, #1
 80083de:	d00b      	beq.n	80083f8 <__pow5mult+0xa0>
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	b938      	cbnz	r0, 80083f4 <__pow5mult+0x9c>
 80083e4:	4622      	mov	r2, r4
 80083e6:	4621      	mov	r1, r4
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff ff13 	bl	8008214 <__multiply>
 80083ee:	6020      	str	r0, [r4, #0]
 80083f0:	f8c0 9000 	str.w	r9, [r0]
 80083f4:	4604      	mov	r4, r0
 80083f6:	e7e4      	b.n	80083c2 <__pow5mult+0x6a>
 80083f8:	4630      	mov	r0, r6
 80083fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fe:	bf00      	nop
 8008400:	080093fc 	.word	0x080093fc
 8008404:	080092c9 	.word	0x080092c9
 8008408:	08009349 	.word	0x08009349

0800840c <__lshift>:
 800840c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	460c      	mov	r4, r1
 8008412:	6849      	ldr	r1, [r1, #4]
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	4607      	mov	r7, r0
 800841e:	4691      	mov	r9, r2
 8008420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008424:	f108 0601 	add.w	r6, r8, #1
 8008428:	42b3      	cmp	r3, r6
 800842a:	db0b      	blt.n	8008444 <__lshift+0x38>
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff fde7 	bl	8008000 <_Balloc>
 8008432:	4605      	mov	r5, r0
 8008434:	b948      	cbnz	r0, 800844a <__lshift+0x3e>
 8008436:	4602      	mov	r2, r0
 8008438:	4b28      	ldr	r3, [pc, #160]	@ (80084dc <__lshift+0xd0>)
 800843a:	4829      	ldr	r0, [pc, #164]	@ (80084e0 <__lshift+0xd4>)
 800843c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008440:	f000 fb94 	bl	8008b6c <__assert_func>
 8008444:	3101      	adds	r1, #1
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	e7ee      	b.n	8008428 <__lshift+0x1c>
 800844a:	2300      	movs	r3, #0
 800844c:	f100 0114 	add.w	r1, r0, #20
 8008450:	f100 0210 	add.w	r2, r0, #16
 8008454:	4618      	mov	r0, r3
 8008456:	4553      	cmp	r3, sl
 8008458:	db33      	blt.n	80084c2 <__lshift+0xb6>
 800845a:	6920      	ldr	r0, [r4, #16]
 800845c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008460:	f104 0314 	add.w	r3, r4, #20
 8008464:	f019 091f 	ands.w	r9, r9, #31
 8008468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800846c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008470:	d02b      	beq.n	80084ca <__lshift+0xbe>
 8008472:	f1c9 0e20 	rsb	lr, r9, #32
 8008476:	468a      	mov	sl, r1
 8008478:	2200      	movs	r2, #0
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	fa00 f009 	lsl.w	r0, r0, r9
 8008480:	4310      	orrs	r0, r2
 8008482:	f84a 0b04 	str.w	r0, [sl], #4
 8008486:	f853 2b04 	ldr.w	r2, [r3], #4
 800848a:	459c      	cmp	ip, r3
 800848c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008490:	d8f3      	bhi.n	800847a <__lshift+0x6e>
 8008492:	ebac 0304 	sub.w	r3, ip, r4
 8008496:	3b15      	subs	r3, #21
 8008498:	f023 0303 	bic.w	r3, r3, #3
 800849c:	3304      	adds	r3, #4
 800849e:	f104 0015 	add.w	r0, r4, #21
 80084a2:	4560      	cmp	r0, ip
 80084a4:	bf88      	it	hi
 80084a6:	2304      	movhi	r3, #4
 80084a8:	50ca      	str	r2, [r1, r3]
 80084aa:	b10a      	cbz	r2, 80084b0 <__lshift+0xa4>
 80084ac:	f108 0602 	add.w	r6, r8, #2
 80084b0:	3e01      	subs	r6, #1
 80084b2:	4638      	mov	r0, r7
 80084b4:	612e      	str	r6, [r5, #16]
 80084b6:	4621      	mov	r1, r4
 80084b8:	f7ff fde2 	bl	8008080 <_Bfree>
 80084bc:	4628      	mov	r0, r5
 80084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084c6:	3301      	adds	r3, #1
 80084c8:	e7c5      	b.n	8008456 <__lshift+0x4a>
 80084ca:	3904      	subs	r1, #4
 80084cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084d4:	459c      	cmp	ip, r3
 80084d6:	d8f9      	bhi.n	80084cc <__lshift+0xc0>
 80084d8:	e7ea      	b.n	80084b0 <__lshift+0xa4>
 80084da:	bf00      	nop
 80084dc:	08009338 	.word	0x08009338
 80084e0:	08009349 	.word	0x08009349

080084e4 <__mcmp>:
 80084e4:	690a      	ldr	r2, [r1, #16]
 80084e6:	4603      	mov	r3, r0
 80084e8:	6900      	ldr	r0, [r0, #16]
 80084ea:	1a80      	subs	r0, r0, r2
 80084ec:	b530      	push	{r4, r5, lr}
 80084ee:	d10e      	bne.n	800850e <__mcmp+0x2a>
 80084f0:	3314      	adds	r3, #20
 80084f2:	3114      	adds	r1, #20
 80084f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008504:	4295      	cmp	r5, r2
 8008506:	d003      	beq.n	8008510 <__mcmp+0x2c>
 8008508:	d205      	bcs.n	8008516 <__mcmp+0x32>
 800850a:	f04f 30ff 	mov.w	r0, #4294967295
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	42a3      	cmp	r3, r4
 8008512:	d3f3      	bcc.n	80084fc <__mcmp+0x18>
 8008514:	e7fb      	b.n	800850e <__mcmp+0x2a>
 8008516:	2001      	movs	r0, #1
 8008518:	e7f9      	b.n	800850e <__mcmp+0x2a>
	...

0800851c <__mdiff>:
 800851c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	4689      	mov	r9, r1
 8008522:	4606      	mov	r6, r0
 8008524:	4611      	mov	r1, r2
 8008526:	4648      	mov	r0, r9
 8008528:	4614      	mov	r4, r2
 800852a:	f7ff ffdb 	bl	80084e4 <__mcmp>
 800852e:	1e05      	subs	r5, r0, #0
 8008530:	d112      	bne.n	8008558 <__mdiff+0x3c>
 8008532:	4629      	mov	r1, r5
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff fd63 	bl	8008000 <_Balloc>
 800853a:	4602      	mov	r2, r0
 800853c:	b928      	cbnz	r0, 800854a <__mdiff+0x2e>
 800853e:	4b3f      	ldr	r3, [pc, #252]	@ (800863c <__mdiff+0x120>)
 8008540:	f240 2137 	movw	r1, #567	@ 0x237
 8008544:	483e      	ldr	r0, [pc, #248]	@ (8008640 <__mdiff+0x124>)
 8008546:	f000 fb11 	bl	8008b6c <__assert_func>
 800854a:	2301      	movs	r3, #1
 800854c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008550:	4610      	mov	r0, r2
 8008552:	b003      	add	sp, #12
 8008554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008558:	bfbc      	itt	lt
 800855a:	464b      	movlt	r3, r9
 800855c:	46a1      	movlt	r9, r4
 800855e:	4630      	mov	r0, r6
 8008560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008564:	bfba      	itte	lt
 8008566:	461c      	movlt	r4, r3
 8008568:	2501      	movlt	r5, #1
 800856a:	2500      	movge	r5, #0
 800856c:	f7ff fd48 	bl	8008000 <_Balloc>
 8008570:	4602      	mov	r2, r0
 8008572:	b918      	cbnz	r0, 800857c <__mdiff+0x60>
 8008574:	4b31      	ldr	r3, [pc, #196]	@ (800863c <__mdiff+0x120>)
 8008576:	f240 2145 	movw	r1, #581	@ 0x245
 800857a:	e7e3      	b.n	8008544 <__mdiff+0x28>
 800857c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008580:	6926      	ldr	r6, [r4, #16]
 8008582:	60c5      	str	r5, [r0, #12]
 8008584:	f109 0310 	add.w	r3, r9, #16
 8008588:	f109 0514 	add.w	r5, r9, #20
 800858c:	f104 0e14 	add.w	lr, r4, #20
 8008590:	f100 0b14 	add.w	fp, r0, #20
 8008594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	46d9      	mov	r9, fp
 80085a0:	f04f 0c00 	mov.w	ip, #0
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	fa1f f38a 	uxth.w	r3, sl
 80085b4:	4619      	mov	r1, r3
 80085b6:	b283      	uxth	r3, r0
 80085b8:	1acb      	subs	r3, r1, r3
 80085ba:	0c00      	lsrs	r0, r0, #16
 80085bc:	4463      	add	r3, ip
 80085be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085cc:	4576      	cmp	r6, lr
 80085ce:	f849 3b04 	str.w	r3, [r9], #4
 80085d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085d6:	d8e5      	bhi.n	80085a4 <__mdiff+0x88>
 80085d8:	1b33      	subs	r3, r6, r4
 80085da:	3b15      	subs	r3, #21
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	3415      	adds	r4, #21
 80085e2:	3304      	adds	r3, #4
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	bf38      	it	cc
 80085e8:	2304      	movcc	r3, #4
 80085ea:	441d      	add	r5, r3
 80085ec:	445b      	add	r3, fp
 80085ee:	461e      	mov	r6, r3
 80085f0:	462c      	mov	r4, r5
 80085f2:	4544      	cmp	r4, r8
 80085f4:	d30e      	bcc.n	8008614 <__mdiff+0xf8>
 80085f6:	f108 0103 	add.w	r1, r8, #3
 80085fa:	1b49      	subs	r1, r1, r5
 80085fc:	f021 0103 	bic.w	r1, r1, #3
 8008600:	3d03      	subs	r5, #3
 8008602:	45a8      	cmp	r8, r5
 8008604:	bf38      	it	cc
 8008606:	2100      	movcc	r1, #0
 8008608:	440b      	add	r3, r1
 800860a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800860e:	b191      	cbz	r1, 8008636 <__mdiff+0x11a>
 8008610:	6117      	str	r7, [r2, #16]
 8008612:	e79d      	b.n	8008550 <__mdiff+0x34>
 8008614:	f854 1b04 	ldr.w	r1, [r4], #4
 8008618:	46e6      	mov	lr, ip
 800861a:	0c08      	lsrs	r0, r1, #16
 800861c:	fa1c fc81 	uxtah	ip, ip, r1
 8008620:	4471      	add	r1, lr
 8008622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008626:	b289      	uxth	r1, r1
 8008628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800862c:	f846 1b04 	str.w	r1, [r6], #4
 8008630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008634:	e7dd      	b.n	80085f2 <__mdiff+0xd6>
 8008636:	3f01      	subs	r7, #1
 8008638:	e7e7      	b.n	800860a <__mdiff+0xee>
 800863a:	bf00      	nop
 800863c:	08009338 	.word	0x08009338
 8008640:	08009349 	.word	0x08009349

08008644 <__d2b>:
 8008644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008648:	460f      	mov	r7, r1
 800864a:	2101      	movs	r1, #1
 800864c:	ec59 8b10 	vmov	r8, r9, d0
 8008650:	4616      	mov	r6, r2
 8008652:	f7ff fcd5 	bl	8008000 <_Balloc>
 8008656:	4604      	mov	r4, r0
 8008658:	b930      	cbnz	r0, 8008668 <__d2b+0x24>
 800865a:	4602      	mov	r2, r0
 800865c:	4b23      	ldr	r3, [pc, #140]	@ (80086ec <__d2b+0xa8>)
 800865e:	4824      	ldr	r0, [pc, #144]	@ (80086f0 <__d2b+0xac>)
 8008660:	f240 310f 	movw	r1, #783	@ 0x30f
 8008664:	f000 fa82 	bl	8008b6c <__assert_func>
 8008668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800866c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008670:	b10d      	cbz	r5, 8008676 <__d2b+0x32>
 8008672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	f1b8 0300 	subs.w	r3, r8, #0
 800867c:	d023      	beq.n	80086c6 <__d2b+0x82>
 800867e:	4668      	mov	r0, sp
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	f7ff fd84 	bl	800818e <__lo0bits>
 8008686:	e9dd 1200 	ldrd	r1, r2, [sp]
 800868a:	b1d0      	cbz	r0, 80086c2 <__d2b+0x7e>
 800868c:	f1c0 0320 	rsb	r3, r0, #32
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	430b      	orrs	r3, r1
 8008696:	40c2      	lsrs	r2, r0
 8008698:	6163      	str	r3, [r4, #20]
 800869a:	9201      	str	r2, [sp, #4]
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bf0c      	ite	eq
 80086a4:	2201      	moveq	r2, #1
 80086a6:	2202      	movne	r2, #2
 80086a8:	6122      	str	r2, [r4, #16]
 80086aa:	b1a5      	cbz	r5, 80086d6 <__d2b+0x92>
 80086ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086b0:	4405      	add	r5, r0
 80086b2:	603d      	str	r5, [r7, #0]
 80086b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	4620      	mov	r0, r4
 80086bc:	b003      	add	sp, #12
 80086be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c2:	6161      	str	r1, [r4, #20]
 80086c4:	e7ea      	b.n	800869c <__d2b+0x58>
 80086c6:	a801      	add	r0, sp, #4
 80086c8:	f7ff fd61 	bl	800818e <__lo0bits>
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	6163      	str	r3, [r4, #20]
 80086d0:	3020      	adds	r0, #32
 80086d2:	2201      	movs	r2, #1
 80086d4:	e7e8      	b.n	80086a8 <__d2b+0x64>
 80086d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086de:	6038      	str	r0, [r7, #0]
 80086e0:	6918      	ldr	r0, [r3, #16]
 80086e2:	f7ff fd35 	bl	8008150 <__hi0bits>
 80086e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ea:	e7e5      	b.n	80086b8 <__d2b+0x74>
 80086ec:	08009338 	.word	0x08009338
 80086f0:	08009349 	.word	0x08009349

080086f4 <__ssputs_r>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	688e      	ldr	r6, [r1, #8]
 80086fa:	461f      	mov	r7, r3
 80086fc:	42be      	cmp	r6, r7
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	4682      	mov	sl, r0
 8008702:	460c      	mov	r4, r1
 8008704:	4690      	mov	r8, r2
 8008706:	d82d      	bhi.n	8008764 <__ssputs_r+0x70>
 8008708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800870c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008710:	d026      	beq.n	8008760 <__ssputs_r+0x6c>
 8008712:	6965      	ldr	r5, [r4, #20]
 8008714:	6909      	ldr	r1, [r1, #16]
 8008716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800871a:	eba3 0901 	sub.w	r9, r3, r1
 800871e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008722:	1c7b      	adds	r3, r7, #1
 8008724:	444b      	add	r3, r9
 8008726:	106d      	asrs	r5, r5, #1
 8008728:	429d      	cmp	r5, r3
 800872a:	bf38      	it	cc
 800872c:	461d      	movcc	r5, r3
 800872e:	0553      	lsls	r3, r2, #21
 8008730:	d527      	bpl.n	8008782 <__ssputs_r+0x8e>
 8008732:	4629      	mov	r1, r5
 8008734:	f7ff fbd8 	bl	8007ee8 <_malloc_r>
 8008738:	4606      	mov	r6, r0
 800873a:	b360      	cbz	r0, 8008796 <__ssputs_r+0xa2>
 800873c:	6921      	ldr	r1, [r4, #16]
 800873e:	464a      	mov	r2, r9
 8008740:	f000 fa06 	bl	8008b50 <memcpy>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800874a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	6126      	str	r6, [r4, #16]
 8008752:	6165      	str	r5, [r4, #20]
 8008754:	444e      	add	r6, r9
 8008756:	eba5 0509 	sub.w	r5, r5, r9
 800875a:	6026      	str	r6, [r4, #0]
 800875c:	60a5      	str	r5, [r4, #8]
 800875e:	463e      	mov	r6, r7
 8008760:	42be      	cmp	r6, r7
 8008762:	d900      	bls.n	8008766 <__ssputs_r+0x72>
 8008764:	463e      	mov	r6, r7
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	4632      	mov	r2, r6
 800876a:	4641      	mov	r1, r8
 800876c:	f000 f9c6 	bl	8008afc <memmove>
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	1b9b      	subs	r3, r3, r6
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	4433      	add	r3, r6
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	462a      	mov	r2, r5
 8008784:	f000 fa36 	bl	8008bf4 <_realloc_r>
 8008788:	4606      	mov	r6, r0
 800878a:	2800      	cmp	r0, #0
 800878c:	d1e0      	bne.n	8008750 <__ssputs_r+0x5c>
 800878e:	6921      	ldr	r1, [r4, #16]
 8008790:	4650      	mov	r0, sl
 8008792:	f7ff fb35 	bl	8007e00 <_free_r>
 8008796:	230c      	movs	r3, #12
 8008798:	f8ca 3000 	str.w	r3, [sl]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e7e9      	b.n	800877e <__ssputs_r+0x8a>
	...

080087ac <_svfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4698      	mov	r8, r3
 80087b2:	898b      	ldrh	r3, [r1, #12]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	b09d      	sub	sp, #116	@ 0x74
 80087b8:	4607      	mov	r7, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	d510      	bpl.n	80087e2 <_svfiprintf_r+0x36>
 80087c0:	690b      	ldr	r3, [r1, #16]
 80087c2:	b973      	cbnz	r3, 80087e2 <_svfiprintf_r+0x36>
 80087c4:	2140      	movs	r1, #64	@ 0x40
 80087c6:	f7ff fb8f 	bl	8007ee8 <_malloc_r>
 80087ca:	6028      	str	r0, [r5, #0]
 80087cc:	6128      	str	r0, [r5, #16]
 80087ce:	b930      	cbnz	r0, 80087de <_svfiprintf_r+0x32>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	b01d      	add	sp, #116	@ 0x74
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	2340      	movs	r3, #64	@ 0x40
 80087e0:	616b      	str	r3, [r5, #20]
 80087e2:	2300      	movs	r3, #0
 80087e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e6:	2320      	movs	r3, #32
 80087e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f0:	2330      	movs	r3, #48	@ 0x30
 80087f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008990 <_svfiprintf_r+0x1e4>
 80087f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087fa:	f04f 0901 	mov.w	r9, #1
 80087fe:	4623      	mov	r3, r4
 8008800:	469a      	mov	sl, r3
 8008802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008806:	b10a      	cbz	r2, 800880c <_svfiprintf_r+0x60>
 8008808:	2a25      	cmp	r2, #37	@ 0x25
 800880a:	d1f9      	bne.n	8008800 <_svfiprintf_r+0x54>
 800880c:	ebba 0b04 	subs.w	fp, sl, r4
 8008810:	d00b      	beq.n	800882a <_svfiprintf_r+0x7e>
 8008812:	465b      	mov	r3, fp
 8008814:	4622      	mov	r2, r4
 8008816:	4629      	mov	r1, r5
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ff6b 	bl	80086f4 <__ssputs_r>
 800881e:	3001      	adds	r0, #1
 8008820:	f000 80a7 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008826:	445a      	add	r2, fp
 8008828:	9209      	str	r2, [sp, #36]	@ 0x24
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 809f 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008834:	2300      	movs	r3, #0
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883e:	f10a 0a01 	add.w	sl, sl, #1
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884a:	931a      	str	r3, [sp, #104]	@ 0x68
 800884c:	4654      	mov	r4, sl
 800884e:	2205      	movs	r2, #5
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	484e      	ldr	r0, [pc, #312]	@ (8008990 <_svfiprintf_r+0x1e4>)
 8008856:	f7f7 fcc3 	bl	80001e0 <memchr>
 800885a:	9a04      	ldr	r2, [sp, #16]
 800885c:	b9d8      	cbnz	r0, 8008896 <_svfiprintf_r+0xea>
 800885e:	06d0      	lsls	r0, r2, #27
 8008860:	bf44      	itt	mi
 8008862:	2320      	movmi	r3, #32
 8008864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008868:	0711      	lsls	r1, r2, #28
 800886a:	bf44      	itt	mi
 800886c:	232b      	movmi	r3, #43	@ 0x2b
 800886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b2a      	cmp	r3, #42	@ 0x2a
 8008878:	d015      	beq.n	80088a6 <_svfiprintf_r+0xfa>
 800887a:	9a07      	ldr	r2, [sp, #28]
 800887c:	4654      	mov	r4, sl
 800887e:	2000      	movs	r0, #0
 8008880:	f04f 0c0a 	mov.w	ip, #10
 8008884:	4621      	mov	r1, r4
 8008886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	2b09      	cmp	r3, #9
 800888e:	d94b      	bls.n	8008928 <_svfiprintf_r+0x17c>
 8008890:	b1b0      	cbz	r0, 80088c0 <_svfiprintf_r+0x114>
 8008892:	9207      	str	r2, [sp, #28]
 8008894:	e014      	b.n	80088c0 <_svfiprintf_r+0x114>
 8008896:	eba0 0308 	sub.w	r3, r0, r8
 800889a:	fa09 f303 	lsl.w	r3, r9, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	46a2      	mov	sl, r4
 80088a4:	e7d2      	b.n	800884c <_svfiprintf_r+0xa0>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9103      	str	r1, [sp, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfbb      	ittet	lt
 80088b2:	425b      	neglt	r3, r3
 80088b4:	f042 0202 	orrlt.w	r2, r2, #2
 80088b8:	9307      	strge	r3, [sp, #28]
 80088ba:	9307      	strlt	r3, [sp, #28]
 80088bc:	bfb8      	it	lt
 80088be:	9204      	strlt	r2, [sp, #16]
 80088c0:	7823      	ldrb	r3, [r4, #0]
 80088c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c4:	d10a      	bne.n	80088dc <_svfiprintf_r+0x130>
 80088c6:	7863      	ldrb	r3, [r4, #1]
 80088c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ca:	d132      	bne.n	8008932 <_svfiprintf_r+0x186>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1d1a      	adds	r2, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9203      	str	r2, [sp, #12]
 80088d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d8:	3402      	adds	r4, #2
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089a0 <_svfiprintf_r+0x1f4>
 80088e0:	7821      	ldrb	r1, [r4, #0]
 80088e2:	2203      	movs	r2, #3
 80088e4:	4650      	mov	r0, sl
 80088e6:	f7f7 fc7b 	bl	80001e0 <memchr>
 80088ea:	b138      	cbz	r0, 80088fc <_svfiprintf_r+0x150>
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	eba0 000a 	sub.w	r0, r0, sl
 80088f2:	2240      	movs	r2, #64	@ 0x40
 80088f4:	4082      	lsls	r2, r0
 80088f6:	4313      	orrs	r3, r2
 80088f8:	3401      	adds	r4, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008900:	4824      	ldr	r0, [pc, #144]	@ (8008994 <_svfiprintf_r+0x1e8>)
 8008902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008906:	2206      	movs	r2, #6
 8008908:	f7f7 fc6a 	bl	80001e0 <memchr>
 800890c:	2800      	cmp	r0, #0
 800890e:	d036      	beq.n	800897e <_svfiprintf_r+0x1d2>
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <_svfiprintf_r+0x1ec>)
 8008912:	bb1b      	cbnz	r3, 800895c <_svfiprintf_r+0x1b0>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	3307      	adds	r3, #7
 8008918:	f023 0307 	bic.w	r3, r3, #7
 800891c:	3308      	adds	r3, #8
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	4433      	add	r3, r6
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	e76a      	b.n	80087fe <_svfiprintf_r+0x52>
 8008928:	fb0c 3202 	mla	r2, ip, r2, r3
 800892c:	460c      	mov	r4, r1
 800892e:	2001      	movs	r0, #1
 8008930:	e7a8      	b.n	8008884 <_svfiprintf_r+0xd8>
 8008932:	2300      	movs	r3, #0
 8008934:	3401      	adds	r4, #1
 8008936:	9305      	str	r3, [sp, #20]
 8008938:	4619      	mov	r1, r3
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4620      	mov	r0, r4
 8008940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008944:	3a30      	subs	r2, #48	@ 0x30
 8008946:	2a09      	cmp	r2, #9
 8008948:	d903      	bls.n	8008952 <_svfiprintf_r+0x1a6>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c6      	beq.n	80088dc <_svfiprintf_r+0x130>
 800894e:	9105      	str	r1, [sp, #20]
 8008950:	e7c4      	b.n	80088dc <_svfiprintf_r+0x130>
 8008952:	fb0c 2101 	mla	r1, ip, r1, r2
 8008956:	4604      	mov	r4, r0
 8008958:	2301      	movs	r3, #1
 800895a:	e7f0      	b.n	800893e <_svfiprintf_r+0x192>
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4b0e      	ldr	r3, [pc, #56]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	4638      	mov	r0, r7
 8008968:	f7fd fe92 	bl	8006690 <_printf_float>
 800896c:	1c42      	adds	r2, r0, #1
 800896e:	4606      	mov	r6, r0
 8008970:	d1d6      	bne.n	8008920 <_svfiprintf_r+0x174>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	065b      	lsls	r3, r3, #25
 8008976:	f53f af2d 	bmi.w	80087d4 <_svfiprintf_r+0x28>
 800897a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800897c:	e72c      	b.n	80087d8 <_svfiprintf_r+0x2c>
 800897e:	ab03      	add	r3, sp, #12
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	462a      	mov	r2, r5
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	4638      	mov	r0, r7
 800898a:	f7fe f919 	bl	8006bc0 <_printf_i>
 800898e:	e7ed      	b.n	800896c <_svfiprintf_r+0x1c0>
 8008990:	080093a2 	.word	0x080093a2
 8008994:	080093ac 	.word	0x080093ac
 8008998:	08006691 	.word	0x08006691
 800899c:	080086f5 	.word	0x080086f5
 80089a0:	080093a8 	.word	0x080093a8

080089a4 <__sflush_r>:
 80089a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ac:	0716      	lsls	r6, r2, #28
 80089ae:	4605      	mov	r5, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d454      	bmi.n	8008a5e <__sflush_r+0xba>
 80089b4:	684b      	ldr	r3, [r1, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc02      	bgt.n	80089c0 <__sflush_r+0x1c>
 80089ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd48      	ble.n	8008a52 <__sflush_r+0xae>
 80089c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d045      	beq.n	8008a52 <__sflush_r+0xae>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089cc:	682f      	ldr	r7, [r5, #0]
 80089ce:	6a21      	ldr	r1, [r4, #32]
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	d030      	beq.n	8008a36 <__sflush_r+0x92>
 80089d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	0759      	lsls	r1, r3, #29
 80089da:	d505      	bpl.n	80089e8 <__sflush_r+0x44>
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089e2:	b10b      	cbz	r3, 80089e8 <__sflush_r+0x44>
 80089e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089e6:	1ad2      	subs	r2, r2, r3
 80089e8:	2300      	movs	r3, #0
 80089ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b0      	blx	r6
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	d106      	bne.n	8008a06 <__sflush_r+0x62>
 80089f8:	6829      	ldr	r1, [r5, #0]
 80089fa:	291d      	cmp	r1, #29
 80089fc:	d82b      	bhi.n	8008a56 <__sflush_r+0xb2>
 80089fe:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa8 <__sflush_r+0x104>)
 8008a00:	40ca      	lsrs	r2, r1
 8008a02:	07d6      	lsls	r6, r2, #31
 8008a04:	d527      	bpl.n	8008a56 <__sflush_r+0xb2>
 8008a06:	2200      	movs	r2, #0
 8008a08:	6062      	str	r2, [r4, #4]
 8008a0a:	04d9      	lsls	r1, r3, #19
 8008a0c:	6922      	ldr	r2, [r4, #16]
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	d504      	bpl.n	8008a1c <__sflush_r+0x78>
 8008a12:	1c42      	adds	r2, r0, #1
 8008a14:	d101      	bne.n	8008a1a <__sflush_r+0x76>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b903      	cbnz	r3, 8008a1c <__sflush_r+0x78>
 8008a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a1e:	602f      	str	r7, [r5, #0]
 8008a20:	b1b9      	cbz	r1, 8008a52 <__sflush_r+0xae>
 8008a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a26:	4299      	cmp	r1, r3
 8008a28:	d002      	beq.n	8008a30 <__sflush_r+0x8c>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f7ff f9e8 	bl	8007e00 <_free_r>
 8008a30:	2300      	movs	r3, #0
 8008a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a34:	e00d      	b.n	8008a52 <__sflush_r+0xae>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	1c50      	adds	r0, r2, #1
 8008a40:	d1c9      	bne.n	80089d6 <__sflush_r+0x32>
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0c6      	beq.n	80089d6 <__sflush_r+0x32>
 8008a48:	2b1d      	cmp	r3, #29
 8008a4a:	d001      	beq.n	8008a50 <__sflush_r+0xac>
 8008a4c:	2b16      	cmp	r3, #22
 8008a4e:	d11e      	bne.n	8008a8e <__sflush_r+0xea>
 8008a50:	602f      	str	r7, [r5, #0]
 8008a52:	2000      	movs	r0, #0
 8008a54:	e022      	b.n	8008a9c <__sflush_r+0xf8>
 8008a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5a:	b21b      	sxth	r3, r3
 8008a5c:	e01b      	b.n	8008a96 <__sflush_r+0xf2>
 8008a5e:	690f      	ldr	r7, [r1, #16]
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	d0f6      	beq.n	8008a52 <__sflush_r+0xae>
 8008a64:	0793      	lsls	r3, r2, #30
 8008a66:	680e      	ldr	r6, [r1, #0]
 8008a68:	bf08      	it	eq
 8008a6a:	694b      	ldreq	r3, [r1, #20]
 8008a6c:	600f      	str	r7, [r1, #0]
 8008a6e:	bf18      	it	ne
 8008a70:	2300      	movne	r3, #0
 8008a72:	eba6 0807 	sub.w	r8, r6, r7
 8008a76:	608b      	str	r3, [r1, #8]
 8008a78:	f1b8 0f00 	cmp.w	r8, #0
 8008a7c:	dde9      	ble.n	8008a52 <__sflush_r+0xae>
 8008a7e:	6a21      	ldr	r1, [r4, #32]
 8008a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a82:	4643      	mov	r3, r8
 8008a84:	463a      	mov	r2, r7
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b0      	blx	r6
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dc08      	bgt.n	8008aa0 <__sflush_r+0xfc>
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa0:	4407      	add	r7, r0
 8008aa2:	eba8 0800 	sub.w	r8, r8, r0
 8008aa6:	e7e7      	b.n	8008a78 <__sflush_r+0xd4>
 8008aa8:	20400001 	.word	0x20400001

08008aac <_fflush_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	690b      	ldr	r3, [r1, #16]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b913      	cbnz	r3, 8008abc <_fflush_r+0x10>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	b118      	cbz	r0, 8008ac6 <_fflush_r+0x1a>
 8008abe:	6a03      	ldr	r3, [r0, #32]
 8008ac0:	b90b      	cbnz	r3, 8008ac6 <_fflush_r+0x1a>
 8008ac2:	f7fe fa27 	bl	8006f14 <__sinit>
 8008ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f3      	beq.n	8008ab6 <_fflush_r+0xa>
 8008ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ad0:	07d0      	lsls	r0, r2, #31
 8008ad2:	d404      	bmi.n	8008ade <_fflush_r+0x32>
 8008ad4:	0599      	lsls	r1, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_fflush_r+0x32>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ada:	f7fe fb34 	bl	8007146 <__retarget_lock_acquire_recursive>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f7ff ff5f 	bl	80089a4 <__sflush_r>
 8008ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ae8:	07da      	lsls	r2, r3, #31
 8008aea:	4605      	mov	r5, r0
 8008aec:	d4e4      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	059b      	lsls	r3, r3, #22
 8008af2:	d4e1      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af6:	f7fe fb27 	bl	8007148 <__retarget_lock_release_recursive>
 8008afa:	e7dd      	b.n	8008ab8 <_fflush_r+0xc>

08008afc <memmove>:
 8008afc:	4288      	cmp	r0, r1
 8008afe:	b510      	push	{r4, lr}
 8008b00:	eb01 0402 	add.w	r4, r1, r2
 8008b04:	d902      	bls.n	8008b0c <memmove+0x10>
 8008b06:	4284      	cmp	r4, r0
 8008b08:	4623      	mov	r3, r4
 8008b0a:	d807      	bhi.n	8008b1c <memmove+0x20>
 8008b0c:	1e43      	subs	r3, r0, #1
 8008b0e:	42a1      	cmp	r1, r4
 8008b10:	d008      	beq.n	8008b24 <memmove+0x28>
 8008b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b1a:	e7f8      	b.n	8008b0e <memmove+0x12>
 8008b1c:	4402      	add	r2, r0
 8008b1e:	4601      	mov	r1, r0
 8008b20:	428a      	cmp	r2, r1
 8008b22:	d100      	bne.n	8008b26 <memmove+0x2a>
 8008b24:	bd10      	pop	{r4, pc}
 8008b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b2e:	e7f7      	b.n	8008b20 <memmove+0x24>

08008b30 <_sbrk_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d06      	ldr	r5, [pc, #24]	@ (8008b4c <_sbrk_r+0x1c>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	f7f9 fff4 	bl	8002b28 <_sbrk>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_sbrk_r+0x1a>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_sbrk_r+0x1a>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000604 	.word	0x20000604

08008b50 <memcpy>:
 8008b50:	440a      	add	r2, r1
 8008b52:	4291      	cmp	r1, r2
 8008b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b58:	d100      	bne.n	8008b5c <memcpy+0xc>
 8008b5a:	4770      	bx	lr
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b66:	4291      	cmp	r1, r2
 8008b68:	d1f9      	bne.n	8008b5e <memcpy+0xe>
 8008b6a:	bd10      	pop	{r4, pc}

08008b6c <__assert_func>:
 8008b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b6e:	4614      	mov	r4, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <__assert_func+0x2c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4605      	mov	r5, r0
 8008b78:	68d8      	ldr	r0, [r3, #12]
 8008b7a:	b14c      	cbz	r4, 8008b90 <__assert_func+0x24>
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <__assert_func+0x30>)
 8008b7e:	9100      	str	r1, [sp, #0]
 8008b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b84:	4906      	ldr	r1, [pc, #24]	@ (8008ba0 <__assert_func+0x34>)
 8008b86:	462b      	mov	r3, r5
 8008b88:	f000 f870 	bl	8008c6c <fiprintf>
 8008b8c:	f000 f880 	bl	8008c90 <abort>
 8008b90:	4b04      	ldr	r3, [pc, #16]	@ (8008ba4 <__assert_func+0x38>)
 8008b92:	461c      	mov	r4, r3
 8008b94:	e7f3      	b.n	8008b7e <__assert_func+0x12>
 8008b96:	bf00      	nop
 8008b98:	20000034 	.word	0x20000034
 8008b9c:	080093bd 	.word	0x080093bd
 8008ba0:	080093ca 	.word	0x080093ca
 8008ba4:	080093f8 	.word	0x080093f8

08008ba8 <_calloc_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	fba1 5402 	umull	r5, r4, r1, r2
 8008bae:	b934      	cbnz	r4, 8008bbe <_calloc_r+0x16>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7ff f999 	bl	8007ee8 <_malloc_r>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	b928      	cbnz	r0, 8008bc6 <_calloc_r+0x1e>
 8008bba:	4630      	mov	r0, r6
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
 8008bbe:	220c      	movs	r2, #12
 8008bc0:	6002      	str	r2, [r0, #0]
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	e7f9      	b.n	8008bba <_calloc_r+0x12>
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f7fe fa3e 	bl	800704a <memset>
 8008bce:	e7f4      	b.n	8008bba <_calloc_r+0x12>

08008bd0 <__ascii_mbtowc>:
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	b901      	cbnz	r1, 8008bd6 <__ascii_mbtowc+0x6>
 8008bd4:	a901      	add	r1, sp, #4
 8008bd6:	b142      	cbz	r2, 8008bea <__ascii_mbtowc+0x1a>
 8008bd8:	b14b      	cbz	r3, 8008bee <__ascii_mbtowc+0x1e>
 8008bda:	7813      	ldrb	r3, [r2, #0]
 8008bdc:	600b      	str	r3, [r1, #0]
 8008bde:	7812      	ldrb	r2, [r2, #0]
 8008be0:	1e10      	subs	r0, r2, #0
 8008be2:	bf18      	it	ne
 8008be4:	2001      	movne	r0, #1
 8008be6:	b002      	add	sp, #8
 8008be8:	4770      	bx	lr
 8008bea:	4610      	mov	r0, r2
 8008bec:	e7fb      	b.n	8008be6 <__ascii_mbtowc+0x16>
 8008bee:	f06f 0001 	mvn.w	r0, #1
 8008bf2:	e7f8      	b.n	8008be6 <__ascii_mbtowc+0x16>

08008bf4 <_realloc_r>:
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	b921      	cbnz	r1, 8008c0a <_realloc_r+0x16>
 8008c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	4611      	mov	r1, r2
 8008c06:	f7ff b96f 	b.w	8007ee8 <_malloc_r>
 8008c0a:	b92a      	cbnz	r2, 8008c18 <_realloc_r+0x24>
 8008c0c:	f7ff f8f8 	bl	8007e00 <_free_r>
 8008c10:	4625      	mov	r5, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	f000 f841 	bl	8008c9e <_malloc_usable_size_r>
 8008c1c:	4284      	cmp	r4, r0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	d802      	bhi.n	8008c28 <_realloc_r+0x34>
 8008c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c26:	d8f4      	bhi.n	8008c12 <_realloc_r+0x1e>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7ff f95c 	bl	8007ee8 <_malloc_r>
 8008c30:	4680      	mov	r8, r0
 8008c32:	b908      	cbnz	r0, 8008c38 <_realloc_r+0x44>
 8008c34:	4645      	mov	r5, r8
 8008c36:	e7ec      	b.n	8008c12 <_realloc_r+0x1e>
 8008c38:	42b4      	cmp	r4, r6
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	bf28      	it	cs
 8008c40:	4632      	movcs	r2, r6
 8008c42:	f7ff ff85 	bl	8008b50 <memcpy>
 8008c46:	4629      	mov	r1, r5
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff f8d9 	bl	8007e00 <_free_r>
 8008c4e:	e7f1      	b.n	8008c34 <_realloc_r+0x40>

08008c50 <__ascii_wctomb>:
 8008c50:	4603      	mov	r3, r0
 8008c52:	4608      	mov	r0, r1
 8008c54:	b141      	cbz	r1, 8008c68 <__ascii_wctomb+0x18>
 8008c56:	2aff      	cmp	r2, #255	@ 0xff
 8008c58:	d904      	bls.n	8008c64 <__ascii_wctomb+0x14>
 8008c5a:	228a      	movs	r2, #138	@ 0x8a
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	4770      	bx	lr
 8008c64:	700a      	strb	r2, [r1, #0]
 8008c66:	2001      	movs	r0, #1
 8008c68:	4770      	bx	lr
	...

08008c6c <fiprintf>:
 8008c6c:	b40e      	push	{r1, r2, r3}
 8008c6e:	b503      	push	{r0, r1, lr}
 8008c70:	4601      	mov	r1, r0
 8008c72:	ab03      	add	r3, sp, #12
 8008c74:	4805      	ldr	r0, [pc, #20]	@ (8008c8c <fiprintf+0x20>)
 8008c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	f000 f83f 	bl	8008d00 <_vfiprintf_r>
 8008c82:	b002      	add	sp, #8
 8008c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c88:	b003      	add	sp, #12
 8008c8a:	4770      	bx	lr
 8008c8c:	20000034 	.word	0x20000034

08008c90 <abort>:
 8008c90:	b508      	push	{r3, lr}
 8008c92:	2006      	movs	r0, #6
 8008c94:	f000 fa08 	bl	80090a8 <raise>
 8008c98:	2001      	movs	r0, #1
 8008c9a:	f7f9 fecd 	bl	8002a38 <_exit>

08008c9e <_malloc_usable_size_r>:
 8008c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca2:	1f18      	subs	r0, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfbc      	itt	lt
 8008ca8:	580b      	ldrlt	r3, [r1, r0]
 8008caa:	18c0      	addlt	r0, r0, r3
 8008cac:	4770      	bx	lr

08008cae <__sfputc_r>:
 8008cae:	6893      	ldr	r3, [r2, #8]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	b410      	push	{r4}
 8008cb6:	6093      	str	r3, [r2, #8]
 8008cb8:	da08      	bge.n	8008ccc <__sfputc_r+0x1e>
 8008cba:	6994      	ldr	r4, [r2, #24]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	db01      	blt.n	8008cc4 <__sfputc_r+0x16>
 8008cc0:	290a      	cmp	r1, #10
 8008cc2:	d103      	bne.n	8008ccc <__sfputc_r+0x1e>
 8008cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc8:	f000 b932 	b.w	8008f30 <__swbuf_r>
 8008ccc:	6813      	ldr	r3, [r2, #0]
 8008cce:	1c58      	adds	r0, r3, #1
 8008cd0:	6010      	str	r0, [r2, #0]
 8008cd2:	7019      	strb	r1, [r3, #0]
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <__sfputs_r>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	18d5      	adds	r5, r2, r3
 8008ce6:	42ac      	cmp	r4, r5
 8008ce8:	d101      	bne.n	8008cee <__sfputs_r+0x12>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e007      	b.n	8008cfe <__sfputs_r+0x22>
 8008cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf2:	463a      	mov	r2, r7
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7ff ffda 	bl	8008cae <__sfputc_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d1f3      	bne.n	8008ce6 <__sfputs_r+0xa>
 8008cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d00 <_vfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	460d      	mov	r5, r1
 8008d06:	b09d      	sub	sp, #116	@ 0x74
 8008d08:	4614      	mov	r4, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	b118      	cbz	r0, 8008d18 <_vfiprintf_r+0x18>
 8008d10:	6a03      	ldr	r3, [r0, #32]
 8008d12:	b90b      	cbnz	r3, 8008d18 <_vfiprintf_r+0x18>
 8008d14:	f7fe f8fe 	bl	8006f14 <__sinit>
 8008d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d1a:	07d9      	lsls	r1, r3, #31
 8008d1c:	d405      	bmi.n	8008d2a <_vfiprintf_r+0x2a>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	059a      	lsls	r2, r3, #22
 8008d22:	d402      	bmi.n	8008d2a <_vfiprintf_r+0x2a>
 8008d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d26:	f7fe fa0e 	bl	8007146 <__retarget_lock_acquire_recursive>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	071b      	lsls	r3, r3, #28
 8008d2e:	d501      	bpl.n	8008d34 <_vfiprintf_r+0x34>
 8008d30:	692b      	ldr	r3, [r5, #16]
 8008d32:	b99b      	cbnz	r3, 8008d5c <_vfiprintf_r+0x5c>
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f000 f938 	bl	8008fac <__swsetup_r>
 8008d3c:	b170      	cbz	r0, 8008d5c <_vfiprintf_r+0x5c>
 8008d3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d40:	07dc      	lsls	r4, r3, #31
 8008d42:	d504      	bpl.n	8008d4e <_vfiprintf_r+0x4e>
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	b01d      	add	sp, #116	@ 0x74
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	0598      	lsls	r0, r3, #22
 8008d52:	d4f7      	bmi.n	8008d44 <_vfiprintf_r+0x44>
 8008d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d56:	f7fe f9f7 	bl	8007148 <__retarget_lock_release_recursive>
 8008d5a:	e7f3      	b.n	8008d44 <_vfiprintf_r+0x44>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d60:	2320      	movs	r3, #32
 8008d62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6a:	2330      	movs	r3, #48	@ 0x30
 8008d6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f1c <_vfiprintf_r+0x21c>
 8008d70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d74:	f04f 0901 	mov.w	r9, #1
 8008d78:	4623      	mov	r3, r4
 8008d7a:	469a      	mov	sl, r3
 8008d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d80:	b10a      	cbz	r2, 8008d86 <_vfiprintf_r+0x86>
 8008d82:	2a25      	cmp	r2, #37	@ 0x25
 8008d84:	d1f9      	bne.n	8008d7a <_vfiprintf_r+0x7a>
 8008d86:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8a:	d00b      	beq.n	8008da4 <_vfiprintf_r+0xa4>
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7ff ffa2 	bl	8008cdc <__sfputs_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f000 80a7 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	445a      	add	r2, fp
 8008da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da4:	f89a 3000 	ldrb.w	r3, [sl]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 809f 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db8:	f10a 0a01 	add.w	sl, sl, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2205      	movs	r2, #5
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4853      	ldr	r0, [pc, #332]	@ (8008f1c <_vfiprintf_r+0x21c>)
 8008dd0:	f7f7 fa06 	bl	80001e0 <memchr>
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	b9d8      	cbnz	r0, 8008e10 <_vfiprintf_r+0x110>
 8008dd8:	06d1      	lsls	r1, r2, #27
 8008dda:	bf44      	itt	mi
 8008ddc:	2320      	movmi	r3, #32
 8008dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de2:	0713      	lsls	r3, r2, #28
 8008de4:	bf44      	itt	mi
 8008de6:	232b      	movmi	r3, #43	@ 0x2b
 8008de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dec:	f89a 3000 	ldrb.w	r3, [sl]
 8008df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df2:	d015      	beq.n	8008e20 <_vfiprintf_r+0x120>
 8008df4:	9a07      	ldr	r2, [sp, #28]
 8008df6:	4654      	mov	r4, sl
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f04f 0c0a 	mov.w	ip, #10
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e04:	3b30      	subs	r3, #48	@ 0x30
 8008e06:	2b09      	cmp	r3, #9
 8008e08:	d94b      	bls.n	8008ea2 <_vfiprintf_r+0x1a2>
 8008e0a:	b1b0      	cbz	r0, 8008e3a <_vfiprintf_r+0x13a>
 8008e0c:	9207      	str	r2, [sp, #28]
 8008e0e:	e014      	b.n	8008e3a <_vfiprintf_r+0x13a>
 8008e10:	eba0 0308 	sub.w	r3, r0, r8
 8008e14:	fa09 f303 	lsl.w	r3, r9, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	46a2      	mov	sl, r4
 8008e1e:	e7d2      	b.n	8008dc6 <_vfiprintf_r+0xc6>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	1d19      	adds	r1, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	9103      	str	r1, [sp, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfbb      	ittet	lt
 8008e2c:	425b      	neglt	r3, r3
 8008e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e32:	9307      	strge	r3, [sp, #28]
 8008e34:	9307      	strlt	r3, [sp, #28]
 8008e36:	bfb8      	it	lt
 8008e38:	9204      	strlt	r2, [sp, #16]
 8008e3a:	7823      	ldrb	r3, [r4, #0]
 8008e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e3e:	d10a      	bne.n	8008e56 <_vfiprintf_r+0x156>
 8008e40:	7863      	ldrb	r3, [r4, #1]
 8008e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e44:	d132      	bne.n	8008eac <_vfiprintf_r+0x1ac>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	9203      	str	r2, [sp, #12]
 8008e4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e52:	3402      	adds	r4, #2
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f2c <_vfiprintf_r+0x22c>
 8008e5a:	7821      	ldrb	r1, [r4, #0]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7f7 f9be 	bl	80001e0 <memchr>
 8008e64:	b138      	cbz	r0, 8008e76 <_vfiprintf_r+0x176>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	eba0 000a 	sub.w	r0, r0, sl
 8008e6c:	2240      	movs	r2, #64	@ 0x40
 8008e6e:	4082      	lsls	r2, r0
 8008e70:	4313      	orrs	r3, r2
 8008e72:	3401      	adds	r4, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4829      	ldr	r0, [pc, #164]	@ (8008f20 <_vfiprintf_r+0x220>)
 8008e7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e80:	2206      	movs	r2, #6
 8008e82:	f7f7 f9ad 	bl	80001e0 <memchr>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d03f      	beq.n	8008f0a <_vfiprintf_r+0x20a>
 8008e8a:	4b26      	ldr	r3, [pc, #152]	@ (8008f24 <_vfiprintf_r+0x224>)
 8008e8c:	bb1b      	cbnz	r3, 8008ed6 <_vfiprintf_r+0x1d6>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	3308      	adds	r3, #8
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9c:	443b      	add	r3, r7
 8008e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea0:	e76a      	b.n	8008d78 <_vfiprintf_r+0x78>
 8008ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e7a8      	b.n	8008dfe <_vfiprintf_r+0xfe>
 8008eac:	2300      	movs	r3, #0
 8008eae:	3401      	adds	r4, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ebe:	3a30      	subs	r2, #48	@ 0x30
 8008ec0:	2a09      	cmp	r2, #9
 8008ec2:	d903      	bls.n	8008ecc <_vfiprintf_r+0x1cc>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c6      	beq.n	8008e56 <_vfiprintf_r+0x156>
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	e7c4      	b.n	8008e56 <_vfiprintf_r+0x156>
 8008ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e7f0      	b.n	8008eb8 <_vfiprintf_r+0x1b8>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4b12      	ldr	r3, [pc, #72]	@ (8008f28 <_vfiprintf_r+0x228>)
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7fd fbd5 	bl	8006690 <_printf_float>
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	1c78      	adds	r0, r7, #1
 8008eea:	d1d6      	bne.n	8008e9a <_vfiprintf_r+0x19a>
 8008eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eee:	07d9      	lsls	r1, r3, #31
 8008ef0:	d405      	bmi.n	8008efe <_vfiprintf_r+0x1fe>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	059a      	lsls	r2, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_vfiprintf_r+0x1fe>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008efa:	f7fe f925 	bl	8007148 <__retarget_lock_release_recursive>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af1f 	bmi.w	8008d44 <_vfiprintf_r+0x44>
 8008f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f08:	e71e      	b.n	8008d48 <_vfiprintf_r+0x48>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <_vfiprintf_r+0x228>)
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fd fe53 	bl	8006bc0 <_printf_i>
 8008f1a:	e7e4      	b.n	8008ee6 <_vfiprintf_r+0x1e6>
 8008f1c:	080093a2 	.word	0x080093a2
 8008f20:	080093ac 	.word	0x080093ac
 8008f24:	08006691 	.word	0x08006691
 8008f28:	08008cdd 	.word	0x08008cdd
 8008f2c:	080093a8 	.word	0x080093a8

08008f30 <__swbuf_r>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	460e      	mov	r6, r1
 8008f34:	4614      	mov	r4, r2
 8008f36:	4605      	mov	r5, r0
 8008f38:	b118      	cbz	r0, 8008f42 <__swbuf_r+0x12>
 8008f3a:	6a03      	ldr	r3, [r0, #32]
 8008f3c:	b90b      	cbnz	r3, 8008f42 <__swbuf_r+0x12>
 8008f3e:	f7fd ffe9 	bl	8006f14 <__sinit>
 8008f42:	69a3      	ldr	r3, [r4, #24]
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	071a      	lsls	r2, r3, #28
 8008f4a:	d501      	bpl.n	8008f50 <__swbuf_r+0x20>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	b943      	cbnz	r3, 8008f62 <__swbuf_r+0x32>
 8008f50:	4621      	mov	r1, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 f82a 	bl	8008fac <__swsetup_r>
 8008f58:	b118      	cbz	r0, 8008f62 <__swbuf_r+0x32>
 8008f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f5e:	4638      	mov	r0, r7
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	1a98      	subs	r0, r3, r2
 8008f68:	6963      	ldr	r3, [r4, #20]
 8008f6a:	b2f6      	uxtb	r6, r6
 8008f6c:	4283      	cmp	r3, r0
 8008f6e:	4637      	mov	r7, r6
 8008f70:	dc05      	bgt.n	8008f7e <__swbuf_r+0x4e>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff fd99 	bl	8008aac <_fflush_r>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d1ed      	bne.n	8008f5a <__swbuf_r+0x2a>
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	60a3      	str	r3, [r4, #8]
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	6022      	str	r2, [r4, #0]
 8008f8a:	701e      	strb	r6, [r3, #0]
 8008f8c:	6962      	ldr	r2, [r4, #20]
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d004      	beq.n	8008f9e <__swbuf_r+0x6e>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	07db      	lsls	r3, r3, #31
 8008f98:	d5e1      	bpl.n	8008f5e <__swbuf_r+0x2e>
 8008f9a:	2e0a      	cmp	r6, #10
 8008f9c:	d1df      	bne.n	8008f5e <__swbuf_r+0x2e>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f7ff fd83 	bl	8008aac <_fflush_r>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d0d9      	beq.n	8008f5e <__swbuf_r+0x2e>
 8008faa:	e7d6      	b.n	8008f5a <__swbuf_r+0x2a>

08008fac <__swsetup_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4b29      	ldr	r3, [pc, #164]	@ (8009054 <__swsetup_r+0xa8>)
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	b118      	cbz	r0, 8008fc0 <__swsetup_r+0x14>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <__swsetup_r+0x14>
 8008fbc:	f7fd ffaa 	bl	8006f14 <__sinit>
 8008fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc4:	0719      	lsls	r1, r3, #28
 8008fc6:	d422      	bmi.n	800900e <__swsetup_r+0x62>
 8008fc8:	06da      	lsls	r2, r3, #27
 8008fca:	d407      	bmi.n	8008fdc <__swsetup_r+0x30>
 8008fcc:	2209      	movs	r2, #9
 8008fce:	602a      	str	r2, [r5, #0]
 8008fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	e033      	b.n	8009044 <__swsetup_r+0x98>
 8008fdc:	0758      	lsls	r0, r3, #29
 8008fde:	d512      	bpl.n	8009006 <__swsetup_r+0x5a>
 8008fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fe2:	b141      	cbz	r1, 8008ff6 <__swsetup_r+0x4a>
 8008fe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	d002      	beq.n	8008ff2 <__swsetup_r+0x46>
 8008fec:	4628      	mov	r0, r5
 8008fee:	f7fe ff07 	bl	8007e00 <_free_r>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	2300      	movs	r3, #0
 8009000:	6063      	str	r3, [r4, #4]
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f043 0308 	orr.w	r3, r3, #8
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	b94b      	cbnz	r3, 8009026 <__swsetup_r+0x7a>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901c:	d003      	beq.n	8009026 <__swsetup_r+0x7a>
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 f883 	bl	800912c <__smakebuf_r>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	f013 0201 	ands.w	r2, r3, #1
 800902e:	d00a      	beq.n	8009046 <__swsetup_r+0x9a>
 8009030:	2200      	movs	r2, #0
 8009032:	60a2      	str	r2, [r4, #8]
 8009034:	6962      	ldr	r2, [r4, #20]
 8009036:	4252      	negs	r2, r2
 8009038:	61a2      	str	r2, [r4, #24]
 800903a:	6922      	ldr	r2, [r4, #16]
 800903c:	b942      	cbnz	r2, 8009050 <__swsetup_r+0xa4>
 800903e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009042:	d1c5      	bne.n	8008fd0 <__swsetup_r+0x24>
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	0799      	lsls	r1, r3, #30
 8009048:	bf58      	it	pl
 800904a:	6962      	ldrpl	r2, [r4, #20]
 800904c:	60a2      	str	r2, [r4, #8]
 800904e:	e7f4      	b.n	800903a <__swsetup_r+0x8e>
 8009050:	2000      	movs	r0, #0
 8009052:	e7f7      	b.n	8009044 <__swsetup_r+0x98>
 8009054:	20000034 	.word	0x20000034

08009058 <_raise_r>:
 8009058:	291f      	cmp	r1, #31
 800905a:	b538      	push	{r3, r4, r5, lr}
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	d904      	bls.n	800906c <_raise_r+0x14>
 8009062:	2316      	movs	r3, #22
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800906e:	b112      	cbz	r2, 8009076 <_raise_r+0x1e>
 8009070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009074:	b94b      	cbnz	r3, 800908a <_raise_r+0x32>
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f830 	bl	80090dc <_getpid_r>
 800907c:	4622      	mov	r2, r4
 800907e:	4601      	mov	r1, r0
 8009080:	4628      	mov	r0, r5
 8009082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009086:	f000 b817 	b.w	80090b8 <_kill_r>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d00a      	beq.n	80090a4 <_raise_r+0x4c>
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	d103      	bne.n	800909a <_raise_r+0x42>
 8009092:	2316      	movs	r3, #22
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	2001      	movs	r0, #1
 8009098:	e7e7      	b.n	800906a <_raise_r+0x12>
 800909a:	2100      	movs	r1, #0
 800909c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090a0:	4620      	mov	r0, r4
 80090a2:	4798      	blx	r3
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7e0      	b.n	800906a <_raise_r+0x12>

080090a8 <raise>:
 80090a8:	4b02      	ldr	r3, [pc, #8]	@ (80090b4 <raise+0xc>)
 80090aa:	4601      	mov	r1, r0
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	f7ff bfd3 	b.w	8009058 <_raise_r>
 80090b2:	bf00      	nop
 80090b4:	20000034 	.word	0x20000034

080090b8 <_kill_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	@ (80090d8 <_kill_r+0x20>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	4611      	mov	r1, r2
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	f7f9 fca7 	bl	8002a18 <_kill>
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	d102      	bne.n	80090d4 <_kill_r+0x1c>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	b103      	cbz	r3, 80090d4 <_kill_r+0x1c>
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	20000604 	.word	0x20000604

080090dc <_getpid_r>:
 80090dc:	f7f9 bc94 	b.w	8002a08 <_getpid>

080090e0 <__swhatbuf_r>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	2900      	cmp	r1, #0
 80090ea:	b096      	sub	sp, #88	@ 0x58
 80090ec:	4615      	mov	r5, r2
 80090ee:	461e      	mov	r6, r3
 80090f0:	da0d      	bge.n	800910e <__swhatbuf_r+0x2e>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090f8:	f04f 0100 	mov.w	r1, #0
 80090fc:	bf14      	ite	ne
 80090fe:	2340      	movne	r3, #64	@ 0x40
 8009100:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009104:	2000      	movs	r0, #0
 8009106:	6031      	str	r1, [r6, #0]
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	b016      	add	sp, #88	@ 0x58
 800910c:	bd70      	pop	{r4, r5, r6, pc}
 800910e:	466a      	mov	r2, sp
 8009110:	f000 f848 	bl	80091a4 <_fstat_r>
 8009114:	2800      	cmp	r0, #0
 8009116:	dbec      	blt.n	80090f2 <__swhatbuf_r+0x12>
 8009118:	9901      	ldr	r1, [sp, #4]
 800911a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800911e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009122:	4259      	negs	r1, r3
 8009124:	4159      	adcs	r1, r3
 8009126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912a:	e7eb      	b.n	8009104 <__swhatbuf_r+0x24>

0800912c <__smakebuf_r>:
 800912c:	898b      	ldrh	r3, [r1, #12]
 800912e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009130:	079d      	lsls	r5, r3, #30
 8009132:	4606      	mov	r6, r0
 8009134:	460c      	mov	r4, r1
 8009136:	d507      	bpl.n	8009148 <__smakebuf_r+0x1c>
 8009138:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	2301      	movs	r3, #1
 8009142:	6163      	str	r3, [r4, #20]
 8009144:	b003      	add	sp, #12
 8009146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009148:	ab01      	add	r3, sp, #4
 800914a:	466a      	mov	r2, sp
 800914c:	f7ff ffc8 	bl	80090e0 <__swhatbuf_r>
 8009150:	9f00      	ldr	r7, [sp, #0]
 8009152:	4605      	mov	r5, r0
 8009154:	4639      	mov	r1, r7
 8009156:	4630      	mov	r0, r6
 8009158:	f7fe fec6 	bl	8007ee8 <_malloc_r>
 800915c:	b948      	cbnz	r0, 8009172 <__smakebuf_r+0x46>
 800915e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009162:	059a      	lsls	r2, r3, #22
 8009164:	d4ee      	bmi.n	8009144 <__smakebuf_r+0x18>
 8009166:	f023 0303 	bic.w	r3, r3, #3
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	e7e2      	b.n	8009138 <__smakebuf_r+0xc>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	6020      	str	r0, [r4, #0]
 8009176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009182:	b15b      	cbz	r3, 800919c <__smakebuf_r+0x70>
 8009184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f81d 	bl	80091c8 <_isatty_r>
 800918e:	b128      	cbz	r0, 800919c <__smakebuf_r+0x70>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	431d      	orrs	r5, r3
 80091a0:	81a5      	strh	r5, [r4, #12]
 80091a2:	e7cf      	b.n	8009144 <__smakebuf_r+0x18>

080091a4 <_fstat_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d07      	ldr	r5, [pc, #28]	@ (80091c4 <_fstat_r+0x20>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	f7f9 fc91 	bl	8002ad8 <_fstat>
 80091b6:	1c43      	adds	r3, r0, #1
 80091b8:	d102      	bne.n	80091c0 <_fstat_r+0x1c>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	b103      	cbz	r3, 80091c0 <_fstat_r+0x1c>
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	bd38      	pop	{r3, r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	20000604 	.word	0x20000604

080091c8 <_isatty_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d06      	ldr	r5, [pc, #24]	@ (80091e4 <_isatty_r+0x1c>)
 80091cc:	2300      	movs	r3, #0
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	602b      	str	r3, [r5, #0]
 80091d4:	f7f9 fc90 	bl	8002af8 <_isatty>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_isatty_r+0x1a>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_isatty_r+0x1a>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000604 	.word	0x20000604

080091e8 <roundf>:
 80091e8:	ee10 0a10 	vmov	r0, s0
 80091ec:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80091f0:	3a7f      	subs	r2, #127	@ 0x7f
 80091f2:	2a16      	cmp	r2, #22
 80091f4:	dc15      	bgt.n	8009222 <roundf+0x3a>
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	da08      	bge.n	800920c <roundf+0x24>
 80091fa:	3201      	adds	r2, #1
 80091fc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8009200:	d101      	bne.n	8009206 <roundf+0x1e>
 8009202:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8009206:	ee00 3a10 	vmov	s0, r3
 800920a:	4770      	bx	lr
 800920c:	4907      	ldr	r1, [pc, #28]	@ (800922c <roundf+0x44>)
 800920e:	4111      	asrs	r1, r2
 8009210:	4201      	tst	r1, r0
 8009212:	d0fa      	beq.n	800920a <roundf+0x22>
 8009214:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009218:	4113      	asrs	r3, r2
 800921a:	4403      	add	r3, r0
 800921c:	ea23 0301 	bic.w	r3, r3, r1
 8009220:	e7f1      	b.n	8009206 <roundf+0x1e>
 8009222:	2a80      	cmp	r2, #128	@ 0x80
 8009224:	d1f1      	bne.n	800920a <roundf+0x22>
 8009226:	ee30 0a00 	vadd.f32	s0, s0, s0
 800922a:	4770      	bx	lr
 800922c:	007fffff 	.word	0x007fffff

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
